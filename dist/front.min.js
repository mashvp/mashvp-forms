(()=>{var __webpack_modules__={227:(Q,U,F)=>{var B={"./mashvp-forms/ajax-controller.js":435,"./mashvp-forms/recaptcha-controller.js":36};function t(Q){var U=e(Q);return F(U)}function e(Q){if(!F.o(B,Q)){var U=new Error("Cannot find module '"+Q+"'");throw U.code="MODULE_NOT_FOUND",U}return B[Q]}t.keys=function(){return Object.keys(B)},t.resolve=e,Q.exports=t,t.id=227},761:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   lg: () => (/* binding */ Application),\n/* harmony export */   xI: () => (/* binding */ Controller)\n/* harmony export */ });\n/* unused harmony exports AttributeObserver, Context, ElementObserver, IndexedMultimap, Multimap, SelectorObserver, StringMapObserver, TokenListObserver, ValueListObserver, add, defaultSchema, del, fetch, prune */\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _superPropGet(t, e, o, r) { var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), e, o); return 2 & r && "function" == typeof p ? function (t) { return p.apply(o, t); } : p; }\nfunction _get() { return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) { var p = _superPropBase(e, t); if (p) { var n = Object.getOwnPropertyDescriptor(p, t); return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value; } }, _get.apply(null, arguments); }\nfunction _superPropBase(t, o) { for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t));); return t; }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\n/*\nStimulus 3.2.1\nCopyright © 2023 Basecamp, LLC\n */\nvar EventListener = /*#__PURE__*/function () {\n  function EventListener(eventTarget, eventName, eventOptions) {\n    _classCallCheck(this, EventListener);\n    this.eventTarget = eventTarget;\n    this.eventName = eventName;\n    this.eventOptions = eventOptions;\n    this.unorderedBindings = new Set();\n  }\n  return _createClass(EventListener, [{\n    key: "connect",\n    value: function connect() {\n      this.eventTarget.addEventListener(this.eventName, this, this.eventOptions);\n    }\n  }, {\n    key: "disconnect",\n    value: function disconnect() {\n      this.eventTarget.removeEventListener(this.eventName, this, this.eventOptions);\n    }\n  }, {\n    key: "bindingConnected",\n    value: function bindingConnected(binding) {\n      this.unorderedBindings.add(binding);\n    }\n  }, {\n    key: "bindingDisconnected",\n    value: function bindingDisconnected(binding) {\n      this.unorderedBindings["delete"](binding);\n    }\n  }, {\n    key: "handleEvent",\n    value: function handleEvent(event) {\n      var extendedEvent = extendEvent(event);\n      var _iterator = _createForOfIteratorHelper(this.bindings),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var binding = _step.value;\n          if (extendedEvent.immediatePropagationStopped) {\n            break;\n          } else {\n            binding.handleEvent(extendedEvent);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: "hasBindings",\n    value: function hasBindings() {\n      return this.unorderedBindings.size > 0;\n    }\n  }, {\n    key: "bindings",\n    get: function get() {\n      return Array.from(this.unorderedBindings).sort(function (left, right) {\n        var leftIndex = left.index,\n          rightIndex = right.index;\n        return leftIndex < rightIndex ? -1 : leftIndex > rightIndex ? 1 : 0;\n      });\n    }\n  }]);\n}();\nfunction extendEvent(event) {\n  if ("immediatePropagationStopped" in event) {\n    return event;\n  } else {\n    var _stopImmediatePropagation = event.stopImmediatePropagation;\n    return Object.assign(event, {\n      immediatePropagationStopped: false,\n      stopImmediatePropagation: function stopImmediatePropagation() {\n        this.immediatePropagationStopped = true;\n        _stopImmediatePropagation.call(this);\n      }\n    });\n  }\n}\nvar Dispatcher = /*#__PURE__*/function () {\n  function Dispatcher(application) {\n    _classCallCheck(this, Dispatcher);\n    this.application = application;\n    this.eventListenerMaps = new Map();\n    this.started = false;\n  }\n  return _createClass(Dispatcher, [{\n    key: "start",\n    value: function start() {\n      if (!this.started) {\n        this.started = true;\n        this.eventListeners.forEach(function (eventListener) {\n          return eventListener.connect();\n        });\n      }\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      if (this.started) {\n        this.started = false;\n        this.eventListeners.forEach(function (eventListener) {\n          return eventListener.disconnect();\n        });\n      }\n    }\n  }, {\n    key: "eventListeners",\n    get: function get() {\n      return Array.from(this.eventListenerMaps.values()).reduce(function (listeners, map) {\n        return listeners.concat(Array.from(map.values()));\n      }, []);\n    }\n  }, {\n    key: "bindingConnected",\n    value: function bindingConnected(binding) {\n      this.fetchEventListenerForBinding(binding).bindingConnected(binding);\n    }\n  }, {\n    key: "bindingDisconnected",\n    value: function bindingDisconnected(binding) {\n      var clearEventListeners = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      this.fetchEventListenerForBinding(binding).bindingDisconnected(binding);\n      if (clearEventListeners) this.clearEventListenersForBinding(binding);\n    }\n  }, {\n    key: "handleError",\n    value: function handleError(error, message) {\n      var detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.application.handleError(error, "Error ".concat(message), detail);\n    }\n  }, {\n    key: "clearEventListenersForBinding",\n    value: function clearEventListenersForBinding(binding) {\n      var eventListener = this.fetchEventListenerForBinding(binding);\n      if (!eventListener.hasBindings()) {\n        eventListener.disconnect();\n        this.removeMappedEventListenerFor(binding);\n      }\n    }\n  }, {\n    key: "removeMappedEventListenerFor",\n    value: function removeMappedEventListenerFor(binding) {\n      var eventTarget = binding.eventTarget,\n        eventName = binding.eventName,\n        eventOptions = binding.eventOptions;\n      var eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);\n      var cacheKey = this.cacheKey(eventName, eventOptions);\n      eventListenerMap["delete"](cacheKey);\n      if (eventListenerMap.size == 0) this.eventListenerMaps["delete"](eventTarget);\n    }\n  }, {\n    key: "fetchEventListenerForBinding",\n    value: function fetchEventListenerForBinding(binding) {\n      var eventTarget = binding.eventTarget,\n        eventName = binding.eventName,\n        eventOptions = binding.eventOptions;\n      return this.fetchEventListener(eventTarget, eventName, eventOptions);\n    }\n  }, {\n    key: "fetchEventListener",\n    value: function fetchEventListener(eventTarget, eventName, eventOptions) {\n      var eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);\n      var cacheKey = this.cacheKey(eventName, eventOptions);\n      var eventListener = eventListenerMap.get(cacheKey);\n      if (!eventListener) {\n        eventListener = this.createEventListener(eventTarget, eventName, eventOptions);\n        eventListenerMap.set(cacheKey, eventListener);\n      }\n      return eventListener;\n    }\n  }, {\n    key: "createEventListener",\n    value: function createEventListener(eventTarget, eventName, eventOptions) {\n      var eventListener = new EventListener(eventTarget, eventName, eventOptions);\n      if (this.started) {\n        eventListener.connect();\n      }\n      return eventListener;\n    }\n  }, {\n    key: "fetchEventListenerMapForEventTarget",\n    value: function fetchEventListenerMapForEventTarget(eventTarget) {\n      var eventListenerMap = this.eventListenerMaps.get(eventTarget);\n      if (!eventListenerMap) {\n        eventListenerMap = new Map();\n        this.eventListenerMaps.set(eventTarget, eventListenerMap);\n      }\n      return eventListenerMap;\n    }\n  }, {\n    key: "cacheKey",\n    value: function cacheKey(eventName, eventOptions) {\n      var parts = [eventName];\n      Object.keys(eventOptions).sort().forEach(function (key) {\n        parts.push("".concat(eventOptions[key] ? "" : "!").concat(key));\n      });\n      return parts.join(":");\n    }\n  }]);\n}();\nvar defaultActionDescriptorFilters = {\n  stop: function stop(_ref) {\n    var event = _ref.event,\n      value = _ref.value;\n    if (value) event.stopPropagation();\n    return true;\n  },\n  prevent: function prevent(_ref2) {\n    var event = _ref2.event,\n      value = _ref2.value;\n    if (value) event.preventDefault();\n    return true;\n  },\n  self: function self(_ref3) {\n    var event = _ref3.event,\n      value = _ref3.value,\n      element = _ref3.element;\n    if (value) {\n      return element === event.target;\n    } else {\n      return true;\n    }\n  }\n};\nvar descriptorPattern = /^(?:(?:([^.]+?)\\+)?(.+?)(?:\\.(.+?))?(?:@(window|document))?->)?(.+?)(?:#([^:]+?))(?::(.+))?$/;\nfunction parseActionDescriptorString(descriptorString) {\n  var source = descriptorString.trim();\n  var matches = source.match(descriptorPattern) || [];\n  var eventName = matches[2];\n  var keyFilter = matches[3];\n  if (keyFilter && !["keydown", "keyup", "keypress"].includes(eventName)) {\n    eventName += ".".concat(keyFilter);\n    keyFilter = "";\n  }\n  return {\n    eventTarget: parseEventTarget(matches[4]),\n    eventName: eventName,\n    eventOptions: matches[7] ? parseEventOptions(matches[7]) : {},\n    identifier: matches[5],\n    methodName: matches[6],\n    keyFilter: matches[1] || keyFilter\n  };\n}\nfunction parseEventTarget(eventTargetName) {\n  if (eventTargetName == "window") {\n    return window;\n  } else if (eventTargetName == "document") {\n    return document;\n  }\n}\nfunction parseEventOptions(eventOptions) {\n  return eventOptions.split(":").reduce(function (options, token) {\n    return Object.assign(options, _defineProperty({}, token.replace(/^!/, ""), !/^!/.test(token)));\n  }, {});\n}\nfunction stringifyEventTarget(eventTarget) {\n  if (eventTarget == window) {\n    return "window";\n  } else if (eventTarget == document) {\n    return "document";\n  }\n}\nfunction camelize(value) {\n  return value.replace(/(?:[_-])([a-z0-9])/g, function (_, _char) {\n    return _char.toUpperCase();\n  });\n}\nfunction namespaceCamelize(value) {\n  return camelize(value.replace(/--/g, "-").replace(/__/g, "_"));\n}\nfunction capitalize(value) {\n  return value.charAt(0).toUpperCase() + value.slice(1);\n}\nfunction dasherize(value) {\n  return value.replace(/([A-Z])/g, function (_, _char2) {\n    return "-".concat(_char2.toLowerCase());\n  });\n}\nfunction tokenize(value) {\n  return value.match(/[^\\s]+/g) || [];\n}\nfunction isSomething(object) {\n  return object !== null && object !== undefined;\n}\nfunction hasProperty(object, property) {\n  return Object.prototype.hasOwnProperty.call(object, property);\n}\nvar allModifiers = ["meta", "ctrl", "alt", "shift"];\nvar Action = /*#__PURE__*/function () {\n  function Action(element, index, descriptor, schema) {\n    _classCallCheck(this, Action);\n    this.element = element;\n    this.index = index;\n    this.eventTarget = descriptor.eventTarget || element;\n    this.eventName = descriptor.eventName || getDefaultEventNameForElement(element) || error("missing event name");\n    this.eventOptions = descriptor.eventOptions || {};\n    this.identifier = descriptor.identifier || error("missing identifier");\n    this.methodName = descriptor.methodName || error("missing method name");\n    this.keyFilter = descriptor.keyFilter || "";\n    this.schema = schema;\n  }\n  return _createClass(Action, [{\n    key: "toString",\n    value: function toString() {\n      var eventFilter = this.keyFilter ? ".".concat(this.keyFilter) : "";\n      var eventTarget = this.eventTargetName ? "@".concat(this.eventTargetName) : "";\n      return "".concat(this.eventName).concat(eventFilter).concat(eventTarget, "->").concat(this.identifier, "#").concat(this.methodName);\n    }\n  }, {\n    key: "shouldIgnoreKeyboardEvent",\n    value: function shouldIgnoreKeyboardEvent(event) {\n      if (!this.keyFilter) {\n        return false;\n      }\n      var filters = this.keyFilter.split("+");\n      if (this.keyFilterDissatisfied(event, filters)) {\n        return true;\n      }\n      var standardFilter = filters.filter(function (key) {\n        return !allModifiers.includes(key);\n      })[0];\n      if (!standardFilter) {\n        return false;\n      }\n      if (!hasProperty(this.keyMappings, standardFilter)) {\n        error("contains unknown key filter: ".concat(this.keyFilter));\n      }\n      return this.keyMappings[standardFilter].toLowerCase() !== event.key.toLowerCase();\n    }\n  }, {\n    key: "shouldIgnoreMouseEvent",\n    value: function shouldIgnoreMouseEvent(event) {\n      if (!this.keyFilter) {\n        return false;\n      }\n      var filters = [this.keyFilter];\n      if (this.keyFilterDissatisfied(event, filters)) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: "params",\n    get: function get() {\n      var params = {};\n      var pattern = new RegExp("^data-".concat(this.identifier, "-(.+)-param$"), "i");\n      for (var _i = 0, _Array$from = Array.from(this.element.attributes); _i < _Array$from.length; _i++) {\n        var _Array$from$_i = _Array$from[_i],\n          name = _Array$from$_i.name,\n          value = _Array$from$_i.value;\n        var match = name.match(pattern);\n        var key = match && match[1];\n        if (key) {\n          params[camelize(key)] = typecast(value);\n        }\n      }\n      return params;\n    }\n  }, {\n    key: "eventTargetName",\n    get: function get() {\n      return stringifyEventTarget(this.eventTarget);\n    }\n  }, {\n    key: "keyMappings",\n    get: function get() {\n      return this.schema.keyMappings;\n    }\n  }, {\n    key: "keyFilterDissatisfied",\n    value: function keyFilterDissatisfied(event, filters) {\n      var _allModifiers$map = allModifiers.map(function (modifier) {\n          return filters.includes(modifier);\n        }),\n        _allModifiers$map2 = _slicedToArray(_allModifiers$map, 4),\n        meta = _allModifiers$map2[0],\n        ctrl = _allModifiers$map2[1],\n        alt = _allModifiers$map2[2],\n        shift = _allModifiers$map2[3];\n      return event.metaKey !== meta || event.ctrlKey !== ctrl || event.altKey !== alt || event.shiftKey !== shift;\n    }\n  }], [{\n    key: "forToken",\n    value: function forToken(token, schema) {\n      return new this(token.element, token.index, parseActionDescriptorString(token.content), schema);\n    }\n  }]);\n}();\nvar defaultEventNames = {\n  a: function a() {\n    return "click";\n  },\n  button: function button() {\n    return "click";\n  },\n  form: function form() {\n    return "submit";\n  },\n  details: function details() {\n    return "toggle";\n  },\n  input: function input(e) {\n    return e.getAttribute("type") == "submit" ? "click" : "input";\n  },\n  select: function select() {\n    return "change";\n  },\n  textarea: function textarea() {\n    return "input";\n  }\n};\nfunction getDefaultEventNameForElement(element) {\n  var tagName = element.tagName.toLowerCase();\n  if (tagName in defaultEventNames) {\n    return defaultEventNames[tagName](element);\n  }\n}\nfunction error(message) {\n  throw new Error(message);\n}\nfunction typecast(value) {\n  try {\n    return JSON.parse(value);\n  } catch (o_O) {\n    return value;\n  }\n}\nvar Binding = /*#__PURE__*/function () {\n  function Binding(context, action) {\n    _classCallCheck(this, Binding);\n    this.context = context;\n    this.action = action;\n  }\n  return _createClass(Binding, [{\n    key: "index",\n    get: function get() {\n      return this.action.index;\n    }\n  }, {\n    key: "eventTarget",\n    get: function get() {\n      return this.action.eventTarget;\n    }\n  }, {\n    key: "eventOptions",\n    get: function get() {\n      return this.action.eventOptions;\n    }\n  }, {\n    key: "identifier",\n    get: function get() {\n      return this.context.identifier;\n    }\n  }, {\n    key: "handleEvent",\n    value: function handleEvent(event) {\n      var actionEvent = this.prepareActionEvent(event);\n      if (this.willBeInvokedByEvent(event) && this.applyEventModifiers(actionEvent)) {\n        this.invokeWithEvent(actionEvent);\n      }\n    }\n  }, {\n    key: "eventName",\n    get: function get() {\n      return this.action.eventName;\n    }\n  }, {\n    key: "method",\n    get: function get() {\n      var method = this.controller[this.methodName];\n      if (typeof method == "function") {\n        return method;\n      }\n      throw new Error("Action \\"".concat(this.action, "\\" references undefined method \\"").concat(this.methodName, "\\""));\n    }\n  }, {\n    key: "applyEventModifiers",\n    value: function applyEventModifiers(event) {\n      var element = this.action.element;\n      var actionDescriptorFilters = this.context.application.actionDescriptorFilters;\n      var controller = this.context.controller;\n      var passes = true;\n      for (var _i2 = 0, _Object$entries = Object.entries(this.eventOptions); _i2 < _Object$entries.length; _i2++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),\n          name = _Object$entries$_i[0],\n          value = _Object$entries$_i[1];\n        if (name in actionDescriptorFilters) {\n          var filter = actionDescriptorFilters[name];\n          passes = passes && filter({\n            name: name,\n            value: value,\n            event: event,\n            element: element,\n            controller: controller\n          });\n        } else {\n          continue;\n        }\n      }\n      return passes;\n    }\n  }, {\n    key: "prepareActionEvent",\n    value: function prepareActionEvent(event) {\n      return Object.assign(event, {\n        params: this.action.params\n      });\n    }\n  }, {\n    key: "invokeWithEvent",\n    value: function invokeWithEvent(event) {\n      var target = event.target,\n        currentTarget = event.currentTarget;\n      try {\n        this.method.call(this.controller, event);\n        this.context.logDebugActivity(this.methodName, {\n          event: event,\n          target: target,\n          currentTarget: currentTarget,\n          action: this.methodName\n        });\n      } catch (error) {\n        var identifier = this.identifier,\n          controller = this.controller,\n          element = this.element,\n          index = this.index;\n        var detail = {\n          identifier: identifier,\n          controller: controller,\n          element: element,\n          index: index,\n          event: event\n        };\n        this.context.handleError(error, "invoking action \\"".concat(this.action, "\\""), detail);\n      }\n    }\n  }, {\n    key: "willBeInvokedByEvent",\n    value: function willBeInvokedByEvent(event) {\n      var eventTarget = event.target;\n      if (event instanceof KeyboardEvent && this.action.shouldIgnoreKeyboardEvent(event)) {\n        return false;\n      }\n      if (event instanceof MouseEvent && this.action.shouldIgnoreMouseEvent(event)) {\n        return false;\n      }\n      if (this.element === eventTarget) {\n        return true;\n      } else if (eventTarget instanceof Element && this.element.contains(eventTarget)) {\n        return this.scope.containsElement(eventTarget);\n      } else {\n        return this.scope.containsElement(this.action.element);\n      }\n    }\n  }, {\n    key: "controller",\n    get: function get() {\n      return this.context.controller;\n    }\n  }, {\n    key: "methodName",\n    get: function get() {\n      return this.action.methodName;\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.scope.element;\n    }\n  }, {\n    key: "scope",\n    get: function get() {\n      return this.context.scope;\n    }\n  }]);\n}();\nvar ElementObserver = /*#__PURE__*/function () {\n  function ElementObserver(element, delegate) {\n    var _this = this;\n    _classCallCheck(this, ElementObserver);\n    this.mutationObserverInit = {\n      attributes: true,\n      childList: true,\n      subtree: true\n    };\n    this.element = element;\n    this.started = false;\n    this.delegate = delegate;\n    this.elements = new Set();\n    this.mutationObserver = new MutationObserver(function (mutations) {\n      return _this.processMutations(mutations);\n    });\n  }\n  return _createClass(ElementObserver, [{\n    key: "start",\n    value: function start() {\n      if (!this.started) {\n        this.started = true;\n        this.mutationObserver.observe(this.element, this.mutationObserverInit);\n        this.refresh();\n      }\n    }\n  }, {\n    key: "pause",\n    value: function pause(callback) {\n      if (this.started) {\n        this.mutationObserver.disconnect();\n        this.started = false;\n      }\n      callback();\n      if (!this.started) {\n        this.mutationObserver.observe(this.element, this.mutationObserverInit);\n        this.started = true;\n      }\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      if (this.started) {\n        this.mutationObserver.takeRecords();\n        this.mutationObserver.disconnect();\n        this.started = false;\n      }\n    }\n  }, {\n    key: "refresh",\n    value: function refresh() {\n      if (this.started) {\n        var matches = new Set(this.matchElementsInTree());\n        for (var _i3 = 0, _Array$from2 = Array.from(this.elements); _i3 < _Array$from2.length; _i3++) {\n          var element = _Array$from2[_i3];\n          if (!matches.has(element)) {\n            this.removeElement(element);\n          }\n        }\n        for (var _i4 = 0, _Array$from3 = Array.from(matches); _i4 < _Array$from3.length; _i4++) {\n          var _element2 = _Array$from3[_i4];\n          this.addElement(_element2);\n        }\n      }\n    }\n  }, {\n    key: "processMutations",\n    value: function processMutations(mutations) {\n      if (this.started) {\n        var _iterator2 = _createForOfIteratorHelper(mutations),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var mutation = _step2.value;\n            this.processMutation(mutation);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  }, {\n    key: "processMutation",\n    value: function processMutation(mutation) {\n      if (mutation.type == "attributes") {\n        this.processAttributeChange(mutation.target, mutation.attributeName);\n      } else if (mutation.type == "childList") {\n        this.processRemovedNodes(mutation.removedNodes);\n        this.processAddedNodes(mutation.addedNodes);\n      }\n    }\n  }, {\n    key: "processAttributeChange",\n    value: function processAttributeChange(element, attributeName) {\n      if (this.elements.has(element)) {\n        if (this.delegate.elementAttributeChanged && this.matchElement(element)) {\n          this.delegate.elementAttributeChanged(element, attributeName);\n        } else {\n          this.removeElement(element);\n        }\n      } else if (this.matchElement(element)) {\n        this.addElement(element);\n      }\n    }\n  }, {\n    key: "processRemovedNodes",\n    value: function processRemovedNodes(nodes) {\n      for (var _i5 = 0, _Array$from4 = Array.from(nodes); _i5 < _Array$from4.length; _i5++) {\n        var node = _Array$from4[_i5];\n        var element = this.elementFromNode(node);\n        if (element) {\n          this.processTree(element, this.removeElement);\n        }\n      }\n    }\n  }, {\n    key: "processAddedNodes",\n    value: function processAddedNodes(nodes) {\n      for (var _i6 = 0, _Array$from5 = Array.from(nodes); _i6 < _Array$from5.length; _i6++) {\n        var node = _Array$from5[_i6];\n        var element = this.elementFromNode(node);\n        if (element && this.elementIsActive(element)) {\n          this.processTree(element, this.addElement);\n        }\n      }\n    }\n  }, {\n    key: "matchElement",\n    value: function matchElement(element) {\n      return this.delegate.matchElement(element);\n    }\n  }, {\n    key: "matchElementsInTree",\n    value: function matchElementsInTree() {\n      var tree = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.element;\n      return this.delegate.matchElementsInTree(tree);\n    }\n  }, {\n    key: "processTree",\n    value: function processTree(tree, processor) {\n      var _iterator3 = _createForOfIteratorHelper(this.matchElementsInTree(tree)),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var element = _step3.value;\n          processor.call(this, element);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: "elementFromNode",\n    value: function elementFromNode(node) {\n      if (node.nodeType == Node.ELEMENT_NODE) {\n        return node;\n      }\n    }\n  }, {\n    key: "elementIsActive",\n    value: function elementIsActive(element) {\n      if (element.isConnected != this.element.isConnected) {\n        return false;\n      } else {\n        return this.element.contains(element);\n      }\n    }\n  }, {\n    key: "addElement",\n    value: function addElement(element) {\n      if (!this.elements.has(element)) {\n        if (this.elementIsActive(element)) {\n          this.elements.add(element);\n          if (this.delegate.elementMatched) {\n            this.delegate.elementMatched(element);\n          }\n        }\n      }\n    }\n  }, {\n    key: "removeElement",\n    value: function removeElement(element) {\n      if (this.elements.has(element)) {\n        this.elements["delete"](element);\n        if (this.delegate.elementUnmatched) {\n          this.delegate.elementUnmatched(element);\n        }\n      }\n    }\n  }]);\n}();\nvar AttributeObserver = /*#__PURE__*/function () {\n  function AttributeObserver(element, attributeName, delegate) {\n    _classCallCheck(this, AttributeObserver);\n    this.attributeName = attributeName;\n    this.delegate = delegate;\n    this.elementObserver = new ElementObserver(element, this);\n  }\n  return _createClass(AttributeObserver, [{\n    key: "element",\n    get: function get() {\n      return this.elementObserver.element;\n    }\n  }, {\n    key: "selector",\n    get: function get() {\n      return "[".concat(this.attributeName, "]");\n    }\n  }, {\n    key: "start",\n    value: function start() {\n      this.elementObserver.start();\n    }\n  }, {\n    key: "pause",\n    value: function pause(callback) {\n      this.elementObserver.pause(callback);\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      this.elementObserver.stop();\n    }\n  }, {\n    key: "refresh",\n    value: function refresh() {\n      this.elementObserver.refresh();\n    }\n  }, {\n    key: "started",\n    get: function get() {\n      return this.elementObserver.started;\n    }\n  }, {\n    key: "matchElement",\n    value: function matchElement(element) {\n      return element.hasAttribute(this.attributeName);\n    }\n  }, {\n    key: "matchElementsInTree",\n    value: function matchElementsInTree(tree) {\n      var match = this.matchElement(tree) ? [tree] : [];\n      var matches = Array.from(tree.querySelectorAll(this.selector));\n      return match.concat(matches);\n    }\n  }, {\n    key: "elementMatched",\n    value: function elementMatched(element) {\n      if (this.delegate.elementMatchedAttribute) {\n        this.delegate.elementMatchedAttribute(element, this.attributeName);\n      }\n    }\n  }, {\n    key: "elementUnmatched",\n    value: function elementUnmatched(element) {\n      if (this.delegate.elementUnmatchedAttribute) {\n        this.delegate.elementUnmatchedAttribute(element, this.attributeName);\n      }\n    }\n  }, {\n    key: "elementAttributeChanged",\n    value: function elementAttributeChanged(element, attributeName) {\n      if (this.delegate.elementAttributeValueChanged && this.attributeName == attributeName) {\n        this.delegate.elementAttributeValueChanged(element, attributeName);\n      }\n    }\n  }]);\n}();\nfunction _add(map, key, value) {\n  fetch(map, key).add(value);\n}\nfunction del(map, key, value) {\n  fetch(map, key)["delete"](value);\n  prune(map, key);\n}\nfunction fetch(map, key) {\n  var values = map.get(key);\n  if (!values) {\n    values = new Set();\n    map.set(key, values);\n  }\n  return values;\n}\nfunction prune(map, key) {\n  var values = map.get(key);\n  if (values != null && values.size == 0) {\n    map["delete"](key);\n  }\n}\nvar Multimap = /*#__PURE__*/function () {\n  function Multimap() {\n    _classCallCheck(this, Multimap);\n    this.valuesByKey = new Map();\n  }\n  return _createClass(Multimap, [{\n    key: "keys",\n    get: function get() {\n      return Array.from(this.valuesByKey.keys());\n    }\n  }, {\n    key: "values",\n    get: function get() {\n      var sets = Array.from(this.valuesByKey.values());\n      return sets.reduce(function (values, set) {\n        return values.concat(Array.from(set));\n      }, []);\n    }\n  }, {\n    key: "size",\n    get: function get() {\n      var sets = Array.from(this.valuesByKey.values());\n      return sets.reduce(function (size, set) {\n        return size + set.size;\n      }, 0);\n    }\n  }, {\n    key: "add",\n    value: function add(key, value) {\n      _add(this.valuesByKey, key, value);\n    }\n  }, {\n    key: "delete",\n    value: function _delete(key, value) {\n      del(this.valuesByKey, key, value);\n    }\n  }, {\n    key: "has",\n    value: function has(key, value) {\n      var values = this.valuesByKey.get(key);\n      return values != null && values.has(value);\n    }\n  }, {\n    key: "hasKey",\n    value: function hasKey(key) {\n      return this.valuesByKey.has(key);\n    }\n  }, {\n    key: "hasValue",\n    value: function hasValue(value) {\n      var sets = Array.from(this.valuesByKey.values());\n      return sets.some(function (set) {\n        return set.has(value);\n      });\n    }\n  }, {\n    key: "getValuesForKey",\n    value: function getValuesForKey(key) {\n      var values = this.valuesByKey.get(key);\n      return values ? Array.from(values) : [];\n    }\n  }, {\n    key: "getKeysForValue",\n    value: function getKeysForValue(value) {\n      return Array.from(this.valuesByKey).filter(function (_ref4) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n          _key = _ref5[0],\n          values = _ref5[1];\n        return values.has(value);\n      }).map(function (_ref6) {\n        var _ref7 = _slicedToArray(_ref6, 2),\n          key = _ref7[0],\n          _values = _ref7[1];\n        return key;\n      });\n    }\n  }]);\n}();\nvar IndexedMultimap = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Multimap) {\n  function IndexedMultimap() {\n    var _this2;\n    _classCallCheck(this, IndexedMultimap);\n    _this2 = _callSuper(this, IndexedMultimap);\n    _this2.keysByValue = new Map();\n    return _this2;\n  }\n  _inherits(IndexedMultimap, _Multimap);\n  return _createClass(IndexedMultimap, [{\n    key: "values",\n    get: function get() {\n      return Array.from(this.keysByValue.keys());\n    }\n  }, {\n    key: "add",\n    value: function add(key, value) {\n      _superPropGet(IndexedMultimap, "add", this, 3)([key, value]);\n      _add(this.keysByValue, value, key);\n    }\n  }, {\n    key: "delete",\n    value: function _delete(key, value) {\n      _superPropGet(IndexedMultimap, "delete", this, 3)([key, value]);\n      del(this.keysByValue, value, key);\n    }\n  }, {\n    key: "hasValue",\n    value: function hasValue(value) {\n      return this.keysByValue.has(value);\n    }\n  }, {\n    key: "getKeysForValue",\n    value: function getKeysForValue(value) {\n      var set = this.keysByValue.get(value);\n      return set ? Array.from(set) : [];\n    }\n  }]);\n}(Multimap)));\nvar SelectorObserver = /*#__PURE__*/function () {\n  function SelectorObserver(element, selector, delegate, details) {\n    _classCallCheck(this, SelectorObserver);\n    this._selector = selector;\n    this.details = details;\n    this.elementObserver = new ElementObserver(element, this);\n    this.delegate = delegate;\n    this.matchesByElement = new Multimap();\n  }\n  return _createClass(SelectorObserver, [{\n    key: "started",\n    get: function get() {\n      return this.elementObserver.started;\n    }\n  }, {\n    key: "selector",\n    get: function get() {\n      return this._selector;\n    },\n    set: function set(selector) {\n      this._selector = selector;\n      this.refresh();\n    }\n  }, {\n    key: "start",\n    value: function start() {\n      this.elementObserver.start();\n    }\n  }, {\n    key: "pause",\n    value: function pause(callback) {\n      this.elementObserver.pause(callback);\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      this.elementObserver.stop();\n    }\n  }, {\n    key: "refresh",\n    value: function refresh() {\n      this.elementObserver.refresh();\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.elementObserver.element;\n    }\n  }, {\n    key: "matchElement",\n    value: function matchElement(element) {\n      var selector = this.selector;\n      if (selector) {\n        var matches = element.matches(selector);\n        if (this.delegate.selectorMatchElement) {\n          return matches && this.delegate.selectorMatchElement(element, this.details);\n        }\n        return matches;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: "matchElementsInTree",\n    value: function matchElementsInTree(tree) {\n      var _this3 = this;\n      var selector = this.selector;\n      if (selector) {\n        var match = this.matchElement(tree) ? [tree] : [];\n        var matches = Array.from(tree.querySelectorAll(selector)).filter(function (match) {\n          return _this3.matchElement(match);\n        });\n        return match.concat(matches);\n      } else {\n        return [];\n      }\n    }\n  }, {\n    key: "elementMatched",\n    value: function elementMatched(element) {\n      var selector = this.selector;\n      if (selector) {\n        this.selectorMatched(element, selector);\n      }\n    }\n  }, {\n    key: "elementUnmatched",\n    value: function elementUnmatched(element) {\n      var selectors = this.matchesByElement.getKeysForValue(element);\n      var _iterator4 = _createForOfIteratorHelper(selectors),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var selector = _step4.value;\n          this.selectorUnmatched(element, selector);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: "elementAttributeChanged",\n    value: function elementAttributeChanged(element, _attributeName) {\n      var selector = this.selector;\n      if (selector) {\n        var matches = this.matchElement(element);\n        var matchedBefore = this.matchesByElement.has(selector, element);\n        if (matches && !matchedBefore) {\n          this.selectorMatched(element, selector);\n        } else if (!matches && matchedBefore) {\n          this.selectorUnmatched(element, selector);\n        }\n      }\n    }\n  }, {\n    key: "selectorMatched",\n    value: function selectorMatched(element, selector) {\n      this.delegate.selectorMatched(element, selector, this.details);\n      this.matchesByElement.add(selector, element);\n    }\n  }, {\n    key: "selectorUnmatched",\n    value: function selectorUnmatched(element, selector) {\n      this.delegate.selectorUnmatched(element, selector, this.details);\n      this.matchesByElement["delete"](selector, element);\n    }\n  }]);\n}();\nvar StringMapObserver = /*#__PURE__*/function () {\n  function StringMapObserver(element, delegate) {\n    var _this4 = this;\n    _classCallCheck(this, StringMapObserver);\n    this.element = element;\n    this.delegate = delegate;\n    this.started = false;\n    this.stringMap = new Map();\n    this.mutationObserver = new MutationObserver(function (mutations) {\n      return _this4.processMutations(mutations);\n    });\n  }\n  return _createClass(StringMapObserver, [{\n    key: "start",\n    value: function start() {\n      if (!this.started) {\n        this.started = true;\n        this.mutationObserver.observe(this.element, {\n          attributes: true,\n          attributeOldValue: true\n        });\n        this.refresh();\n      }\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      if (this.started) {\n        this.mutationObserver.takeRecords();\n        this.mutationObserver.disconnect();\n        this.started = false;\n      }\n    }\n  }, {\n    key: "refresh",\n    value: function refresh() {\n      if (this.started) {\n        var _iterator5 = _createForOfIteratorHelper(this.knownAttributeNames),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var attributeName = _step5.value;\n            this.refreshAttribute(attributeName, null);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    }\n  }, {\n    key: "processMutations",\n    value: function processMutations(mutations) {\n      if (this.started) {\n        var _iterator6 = _createForOfIteratorHelper(mutations),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var mutation = _step6.value;\n            this.processMutation(mutation);\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      }\n    }\n  }, {\n    key: "processMutation",\n    value: function processMutation(mutation) {\n      var attributeName = mutation.attributeName;\n      if (attributeName) {\n        this.refreshAttribute(attributeName, mutation.oldValue);\n      }\n    }\n  }, {\n    key: "refreshAttribute",\n    value: function refreshAttribute(attributeName, oldValue) {\n      var key = this.delegate.getStringMapKeyForAttribute(attributeName);\n      if (key != null) {\n        if (!this.stringMap.has(attributeName)) {\n          this.stringMapKeyAdded(key, attributeName);\n        }\n        var value = this.element.getAttribute(attributeName);\n        if (this.stringMap.get(attributeName) != value) {\n          this.stringMapValueChanged(value, key, oldValue);\n        }\n        if (value == null) {\n          var _oldValue = this.stringMap.get(attributeName);\n          this.stringMap["delete"](attributeName);\n          if (_oldValue) this.stringMapKeyRemoved(key, attributeName, _oldValue);\n        } else {\n          this.stringMap.set(attributeName, value);\n        }\n      }\n    }\n  }, {\n    key: "stringMapKeyAdded",\n    value: function stringMapKeyAdded(key, attributeName) {\n      if (this.delegate.stringMapKeyAdded) {\n        this.delegate.stringMapKeyAdded(key, attributeName);\n      }\n    }\n  }, {\n    key: "stringMapValueChanged",\n    value: function stringMapValueChanged(value, key, oldValue) {\n      if (this.delegate.stringMapValueChanged) {\n        this.delegate.stringMapValueChanged(value, key, oldValue);\n      }\n    }\n  }, {\n    key: "stringMapKeyRemoved",\n    value: function stringMapKeyRemoved(key, attributeName, oldValue) {\n      if (this.delegate.stringMapKeyRemoved) {\n        this.delegate.stringMapKeyRemoved(key, attributeName, oldValue);\n      }\n    }\n  }, {\n    key: "knownAttributeNames",\n    get: function get() {\n      return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)));\n    }\n  }, {\n    key: "currentAttributeNames",\n    get: function get() {\n      return Array.from(this.element.attributes).map(function (attribute) {\n        return attribute.name;\n      });\n    }\n  }, {\n    key: "recordedAttributeNames",\n    get: function get() {\n      return Array.from(this.stringMap.keys());\n    }\n  }]);\n}();\nvar TokenListObserver = /*#__PURE__*/function () {\n  function TokenListObserver(element, attributeName, delegate) {\n    _classCallCheck(this, TokenListObserver);\n    this.attributeObserver = new AttributeObserver(element, attributeName, this);\n    this.delegate = delegate;\n    this.tokensByElement = new Multimap();\n  }\n  return _createClass(TokenListObserver, [{\n    key: "started",\n    get: function get() {\n      return this.attributeObserver.started;\n    }\n  }, {\n    key: "start",\n    value: function start() {\n      this.attributeObserver.start();\n    }\n  }, {\n    key: "pause",\n    value: function pause(callback) {\n      this.attributeObserver.pause(callback);\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      this.attributeObserver.stop();\n    }\n  }, {\n    key: "refresh",\n    value: function refresh() {\n      this.attributeObserver.refresh();\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.attributeObserver.element;\n    }\n  }, {\n    key: "attributeName",\n    get: function get() {\n      return this.attributeObserver.attributeName;\n    }\n  }, {\n    key: "elementMatchedAttribute",\n    value: function elementMatchedAttribute(element) {\n      this.tokensMatched(this.readTokensForElement(element));\n    }\n  }, {\n    key: "elementAttributeValueChanged",\n    value: function elementAttributeValueChanged(element) {\n      var _this$refreshTokensFo = this.refreshTokensForElement(element),\n        _this$refreshTokensFo2 = _slicedToArray(_this$refreshTokensFo, 2),\n        unmatchedTokens = _this$refreshTokensFo2[0],\n        matchedTokens = _this$refreshTokensFo2[1];\n      this.tokensUnmatched(unmatchedTokens);\n      this.tokensMatched(matchedTokens);\n    }\n  }, {\n    key: "elementUnmatchedAttribute",\n    value: function elementUnmatchedAttribute(element) {\n      this.tokensUnmatched(this.tokensByElement.getValuesForKey(element));\n    }\n  }, {\n    key: "tokensMatched",\n    value: function tokensMatched(tokens) {\n      var _this5 = this;\n      tokens.forEach(function (token) {\n        return _this5.tokenMatched(token);\n      });\n    }\n  }, {\n    key: "tokensUnmatched",\n    value: function tokensUnmatched(tokens) {\n      var _this6 = this;\n      tokens.forEach(function (token) {\n        return _this6.tokenUnmatched(token);\n      });\n    }\n  }, {\n    key: "tokenMatched",\n    value: function tokenMatched(token) {\n      this.delegate.tokenMatched(token);\n      this.tokensByElement.add(token.element, token);\n    }\n  }, {\n    key: "tokenUnmatched",\n    value: function tokenUnmatched(token) {\n      this.delegate.tokenUnmatched(token);\n      this.tokensByElement["delete"](token.element, token);\n    }\n  }, {\n    key: "refreshTokensForElement",\n    value: function refreshTokensForElement(element) {\n      var previousTokens = this.tokensByElement.getValuesForKey(element);\n      var currentTokens = this.readTokensForElement(element);\n      var firstDifferingIndex = zip(previousTokens, currentTokens).findIndex(function (_ref8) {\n        var _ref9 = _slicedToArray(_ref8, 2),\n          previousToken = _ref9[0],\n          currentToken = _ref9[1];\n        return !tokensAreEqual(previousToken, currentToken);\n      });\n      if (firstDifferingIndex == -1) {\n        return [[], []];\n      } else {\n        return [previousTokens.slice(firstDifferingIndex), currentTokens.slice(firstDifferingIndex)];\n      }\n    }\n  }, {\n    key: "readTokensForElement",\n    value: function readTokensForElement(element) {\n      var attributeName = this.attributeName;\n      var tokenString = element.getAttribute(attributeName) || "";\n      return parseTokenString(tokenString, element, attributeName);\n    }\n  }]);\n}();\nfunction parseTokenString(tokenString, element, attributeName) {\n  return tokenString.trim().split(/\\s+/).filter(function (content) {\n    return content.length;\n  }).map(function (content, index) {\n    return {\n      element: element,\n      attributeName: attributeName,\n      content: content,\n      index: index\n    };\n  });\n}\nfunction zip(left, right) {\n  var length = Math.max(left.length, right.length);\n  return Array.from({\n    length: length\n  }, function (_, index) {\n    return [left[index], right[index]];\n  });\n}\nfunction tokensAreEqual(left, right) {\n  return left && right && left.index == right.index && left.content == right.content;\n}\nvar ValueListObserver = /*#__PURE__*/function () {\n  function ValueListObserver(element, attributeName, delegate) {\n    _classCallCheck(this, ValueListObserver);\n    this.tokenListObserver = new TokenListObserver(element, attributeName, this);\n    this.delegate = delegate;\n    this.parseResultsByToken = new WeakMap();\n    this.valuesByTokenByElement = new WeakMap();\n  }\n  return _createClass(ValueListObserver, [{\n    key: "started",\n    get: function get() {\n      return this.tokenListObserver.started;\n    }\n  }, {\n    key: "start",\n    value: function start() {\n      this.tokenListObserver.start();\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      this.tokenListObserver.stop();\n    }\n  }, {\n    key: "refresh",\n    value: function refresh() {\n      this.tokenListObserver.refresh();\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.tokenListObserver.element;\n    }\n  }, {\n    key: "attributeName",\n    get: function get() {\n      return this.tokenListObserver.attributeName;\n    }\n  }, {\n    key: "tokenMatched",\n    value: function tokenMatched(token) {\n      var element = token.element;\n      var _this$fetchParseResul = this.fetchParseResultForToken(token),\n        value = _this$fetchParseResul.value;\n      if (value) {\n        this.fetchValuesByTokenForElement(element).set(token, value);\n        this.delegate.elementMatchedValue(element, value);\n      }\n    }\n  }, {\n    key: "tokenUnmatched",\n    value: function tokenUnmatched(token) {\n      var element = token.element;\n      var _this$fetchParseResul2 = this.fetchParseResultForToken(token),\n        value = _this$fetchParseResul2.value;\n      if (value) {\n        this.fetchValuesByTokenForElement(element)["delete"](token);\n        this.delegate.elementUnmatchedValue(element, value);\n      }\n    }\n  }, {\n    key: "fetchParseResultForToken",\n    value: function fetchParseResultForToken(token) {\n      var parseResult = this.parseResultsByToken.get(token);\n      if (!parseResult) {\n        parseResult = this.parseToken(token);\n        this.parseResultsByToken.set(token, parseResult);\n      }\n      return parseResult;\n    }\n  }, {\n    key: "fetchValuesByTokenForElement",\n    value: function fetchValuesByTokenForElement(element) {\n      var valuesByToken = this.valuesByTokenByElement.get(element);\n      if (!valuesByToken) {\n        valuesByToken = new Map();\n        this.valuesByTokenByElement.set(element, valuesByToken);\n      }\n      return valuesByToken;\n    }\n  }, {\n    key: "parseToken",\n    value: function parseToken(token) {\n      try {\n        var value = this.delegate.parseValueForToken(token);\n        return {\n          value: value\n        };\n      } catch (error) {\n        return {\n          error: error\n        };\n      }\n    }\n  }]);\n}();\nvar BindingObserver = /*#__PURE__*/function () {\n  function BindingObserver(context, delegate) {\n    _classCallCheck(this, BindingObserver);\n    this.context = context;\n    this.delegate = delegate;\n    this.bindingsByAction = new Map();\n  }\n  return _createClass(BindingObserver, [{\n    key: "start",\n    value: function start() {\n      if (!this.valueListObserver) {\n        this.valueListObserver = new ValueListObserver(this.element, this.actionAttribute, this);\n        this.valueListObserver.start();\n      }\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      if (this.valueListObserver) {\n        this.valueListObserver.stop();\n        delete this.valueListObserver;\n        this.disconnectAllActions();\n      }\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.context.element;\n    }\n  }, {\n    key: "identifier",\n    get: function get() {\n      return this.context.identifier;\n    }\n  }, {\n    key: "actionAttribute",\n    get: function get() {\n      return this.schema.actionAttribute;\n    }\n  }, {\n    key: "schema",\n    get: function get() {\n      return this.context.schema;\n    }\n  }, {\n    key: "bindings",\n    get: function get() {\n      return Array.from(this.bindingsByAction.values());\n    }\n  }, {\n    key: "connectAction",\n    value: function connectAction(action) {\n      var binding = new Binding(this.context, action);\n      this.bindingsByAction.set(action, binding);\n      this.delegate.bindingConnected(binding);\n    }\n  }, {\n    key: "disconnectAction",\n    value: function disconnectAction(action) {\n      var binding = this.bindingsByAction.get(action);\n      if (binding) {\n        this.bindingsByAction["delete"](action);\n        this.delegate.bindingDisconnected(binding);\n      }\n    }\n  }, {\n    key: "disconnectAllActions",\n    value: function disconnectAllActions() {\n      var _this7 = this;\n      this.bindings.forEach(function (binding) {\n        return _this7.delegate.bindingDisconnected(binding, true);\n      });\n      this.bindingsByAction.clear();\n    }\n  }, {\n    key: "parseValueForToken",\n    value: function parseValueForToken(token) {\n      var action = Action.forToken(token, this.schema);\n      if (action.identifier == this.identifier) {\n        return action;\n      }\n    }\n  }, {\n    key: "elementMatchedValue",\n    value: function elementMatchedValue(element, action) {\n      this.connectAction(action);\n    }\n  }, {\n    key: "elementUnmatchedValue",\n    value: function elementUnmatchedValue(element, action) {\n      this.disconnectAction(action);\n    }\n  }]);\n}();\nvar ValueObserver = /*#__PURE__*/function () {\n  function ValueObserver(context, receiver) {\n    _classCallCheck(this, ValueObserver);\n    this.context = context;\n    this.receiver = receiver;\n    this.stringMapObserver = new StringMapObserver(this.element, this);\n    this.valueDescriptorMap = this.controller.valueDescriptorMap;\n  }\n  return _createClass(ValueObserver, [{\n    key: "start",\n    value: function start() {\n      this.stringMapObserver.start();\n      this.invokeChangedCallbacksForDefaultValues();\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      this.stringMapObserver.stop();\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.context.element;\n    }\n  }, {\n    key: "controller",\n    get: function get() {\n      return this.context.controller;\n    }\n  }, {\n    key: "getStringMapKeyForAttribute",\n    value: function getStringMapKeyForAttribute(attributeName) {\n      if (attributeName in this.valueDescriptorMap) {\n        return this.valueDescriptorMap[attributeName].name;\n      }\n    }\n  }, {\n    key: "stringMapKeyAdded",\n    value: function stringMapKeyAdded(key, attributeName) {\n      var descriptor = this.valueDescriptorMap[attributeName];\n      if (!this.hasValue(key)) {\n        this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), descriptor.writer(descriptor.defaultValue));\n      }\n    }\n  }, {\n    key: "stringMapValueChanged",\n    value: function stringMapValueChanged(value, name, oldValue) {\n      var descriptor = this.valueDescriptorNameMap[name];\n      if (value === null) return;\n      if (oldValue === null) {\n        oldValue = descriptor.writer(descriptor.defaultValue);\n      }\n      this.invokeChangedCallback(name, value, oldValue);\n    }\n  }, {\n    key: "stringMapKeyRemoved",\n    value: function stringMapKeyRemoved(key, attributeName, oldValue) {\n      var descriptor = this.valueDescriptorNameMap[key];\n      if (this.hasValue(key)) {\n        this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), oldValue);\n      } else {\n        this.invokeChangedCallback(key, descriptor.writer(descriptor.defaultValue), oldValue);\n      }\n    }\n  }, {\n    key: "invokeChangedCallbacksForDefaultValues",\n    value: function invokeChangedCallbacksForDefaultValues() {\n      var _iterator7 = _createForOfIteratorHelper(this.valueDescriptors),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _step7$value = _step7.value,\n            key = _step7$value.key,\n            name = _step7$value.name,\n            defaultValue = _step7$value.defaultValue,\n            writer = _step7$value.writer;\n          if (defaultValue != undefined && !this.controller.data.has(key)) {\n            this.invokeChangedCallback(name, writer(defaultValue), undefined);\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }, {\n    key: "invokeChangedCallback",\n    value: function invokeChangedCallback(name, rawValue, rawOldValue) {\n      var changedMethodName = "".concat(name, "Changed");\n      var changedMethod = this.receiver[changedMethodName];\n      if (typeof changedMethod == "function") {\n        var descriptor = this.valueDescriptorNameMap[name];\n        try {\n          var value = descriptor.reader(rawValue);\n          var oldValue = rawOldValue;\n          if (rawOldValue) {\n            oldValue = descriptor.reader(rawOldValue);\n          }\n          changedMethod.call(this.receiver, value, oldValue);\n        } catch (error) {\n          if (error instanceof TypeError) {\n            error.message = "Stimulus Value \\"".concat(this.context.identifier, ".").concat(descriptor.name, "\\" - ").concat(error.message);\n          }\n          throw error;\n        }\n      }\n    }\n  }, {\n    key: "valueDescriptors",\n    get: function get() {\n      var valueDescriptorMap = this.valueDescriptorMap;\n      return Object.keys(valueDescriptorMap).map(function (key) {\n        return valueDescriptorMap[key];\n      });\n    }\n  }, {\n    key: "valueDescriptorNameMap",\n    get: function get() {\n      var _this8 = this;\n      var descriptors = {};\n      Object.keys(this.valueDescriptorMap).forEach(function (key) {\n        var descriptor = _this8.valueDescriptorMap[key];\n        descriptors[descriptor.name] = descriptor;\n      });\n      return descriptors;\n    }\n  }, {\n    key: "hasValue",\n    value: function hasValue(attributeName) {\n      var descriptor = this.valueDescriptorNameMap[attributeName];\n      var hasMethodName = "has".concat(capitalize(descriptor.name));\n      return this.receiver[hasMethodName];\n    }\n  }]);\n}();\nvar TargetObserver = /*#__PURE__*/function () {\n  function TargetObserver(context, delegate) {\n    _classCallCheck(this, TargetObserver);\n    this.context = context;\n    this.delegate = delegate;\n    this.targetsByName = new Multimap();\n  }\n  return _createClass(TargetObserver, [{\n    key: "start",\n    value: function start() {\n      if (!this.tokenListObserver) {\n        this.tokenListObserver = new TokenListObserver(this.element, this.attributeName, this);\n        this.tokenListObserver.start();\n      }\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      if (this.tokenListObserver) {\n        this.disconnectAllTargets();\n        this.tokenListObserver.stop();\n        delete this.tokenListObserver;\n      }\n    }\n  }, {\n    key: "tokenMatched",\n    value: function tokenMatched(_ref10) {\n      var element = _ref10.element,\n        name = _ref10.content;\n      if (this.scope.containsElement(element)) {\n        this.connectTarget(element, name);\n      }\n    }\n  }, {\n    key: "tokenUnmatched",\n    value: function tokenUnmatched(_ref11) {\n      var element = _ref11.element,\n        name = _ref11.content;\n      this.disconnectTarget(element, name);\n    }\n  }, {\n    key: "connectTarget",\n    value: function connectTarget(element, name) {\n      var _this9 = this;\n      var _a;\n      if (!this.targetsByName.has(name, element)) {\n        this.targetsByName.add(name, element);\n        (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(function () {\n          return _this9.delegate.targetConnected(element, name);\n        });\n      }\n    }\n  }, {\n    key: "disconnectTarget",\n    value: function disconnectTarget(element, name) {\n      var _this10 = this;\n      var _a;\n      if (this.targetsByName.has(name, element)) {\n        this.targetsByName["delete"](name, element);\n        (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(function () {\n          return _this10.delegate.targetDisconnected(element, name);\n        });\n      }\n    }\n  }, {\n    key: "disconnectAllTargets",\n    value: function disconnectAllTargets() {\n      var _iterator8 = _createForOfIteratorHelper(this.targetsByName.keys),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var name = _step8.value;\n          var _iterator9 = _createForOfIteratorHelper(this.targetsByName.getValuesForKey(name)),\n            _step9;\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var element = _step9.value;\n              this.disconnectTarget(element, name);\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n  }, {\n    key: "attributeName",\n    get: function get() {\n      return "data-".concat(this.context.identifier, "-target");\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.context.element;\n    }\n  }, {\n    key: "scope",\n    get: function get() {\n      return this.context.scope;\n    }\n  }]);\n}();\nfunction readInheritableStaticArrayValues(constructor, propertyName) {\n  var ancestors = getAncestorsForConstructor(constructor);\n  return Array.from(ancestors.reduce(function (values, constructor) {\n    getOwnStaticArrayValues(constructor, propertyName).forEach(function (name) {\n      return values.add(name);\n    });\n    return values;\n  }, new Set()));\n}\nfunction readInheritableStaticObjectPairs(constructor, propertyName) {\n  var ancestors = getAncestorsForConstructor(constructor);\n  return ancestors.reduce(function (pairs, constructor) {\n    pairs.push.apply(pairs, _toConsumableArray(getOwnStaticObjectPairs(constructor, propertyName)));\n    return pairs;\n  }, []);\n}\nfunction getAncestorsForConstructor(constructor) {\n  var ancestors = [];\n  while (constructor) {\n    ancestors.push(constructor);\n    constructor = Object.getPrototypeOf(constructor);\n  }\n  return ancestors.reverse();\n}\nfunction getOwnStaticArrayValues(constructor, propertyName) {\n  var definition = constructor[propertyName];\n  return Array.isArray(definition) ? definition : [];\n}\nfunction getOwnStaticObjectPairs(constructor, propertyName) {\n  var definition = constructor[propertyName];\n  return definition ? Object.keys(definition).map(function (key) {\n    return [key, definition[key]];\n  }) : [];\n}\nvar OutletObserver = /*#__PURE__*/function () {\n  function OutletObserver(context, delegate) {\n    _classCallCheck(this, OutletObserver);\n    this.started = false;\n    this.context = context;\n    this.delegate = delegate;\n    this.outletsByName = new Multimap();\n    this.outletElementsByName = new Multimap();\n    this.selectorObserverMap = new Map();\n    this.attributeObserverMap = new Map();\n  }\n  return _createClass(OutletObserver, [{\n    key: "start",\n    value: function start() {\n      var _this11 = this;\n      if (!this.started) {\n        this.outletDefinitions.forEach(function (outletName) {\n          _this11.setupSelectorObserverForOutlet(outletName);\n          _this11.setupAttributeObserverForOutlet(outletName);\n        });\n        this.started = true;\n        this.dependentContexts.forEach(function (context) {\n          return context.refresh();\n        });\n      }\n    }\n  }, {\n    key: "refresh",\n    value: function refresh() {\n      this.selectorObserverMap.forEach(function (observer) {\n        return observer.refresh();\n      });\n      this.attributeObserverMap.forEach(function (observer) {\n        return observer.refresh();\n      });\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      if (this.started) {\n        this.started = false;\n        this.disconnectAllOutlets();\n        this.stopSelectorObservers();\n        this.stopAttributeObservers();\n      }\n    }\n  }, {\n    key: "stopSelectorObservers",\n    value: function stopSelectorObservers() {\n      if (this.selectorObserverMap.size > 0) {\n        this.selectorObserverMap.forEach(function (observer) {\n          return observer.stop();\n        });\n        this.selectorObserverMap.clear();\n      }\n    }\n  }, {\n    key: "stopAttributeObservers",\n    value: function stopAttributeObservers() {\n      if (this.attributeObserverMap.size > 0) {\n        this.attributeObserverMap.forEach(function (observer) {\n          return observer.stop();\n        });\n        this.attributeObserverMap.clear();\n      }\n    }\n  }, {\n    key: "selectorMatched",\n    value: function selectorMatched(element, _selector, _ref12) {\n      var outletName = _ref12.outletName;\n      var outlet = this.getOutlet(element, outletName);\n      if (outlet) {\n        this.connectOutlet(outlet, element, outletName);\n      }\n    }\n  }, {\n    key: "selectorUnmatched",\n    value: function selectorUnmatched(element, _selector, _ref13) {\n      var outletName = _ref13.outletName;\n      var outlet = this.getOutletFromMap(element, outletName);\n      if (outlet) {\n        this.disconnectOutlet(outlet, element, outletName);\n      }\n    }\n  }, {\n    key: "selectorMatchElement",\n    value: function selectorMatchElement(element, _ref14) {\n      var outletName = _ref14.outletName;\n      var selector = this.selector(outletName);\n      var hasOutlet = this.hasOutlet(element, outletName);\n      var hasOutletController = element.matches("[".concat(this.schema.controllerAttribute, "~=").concat(outletName, "]"));\n      if (selector) {\n        return hasOutlet && hasOutletController && element.matches(selector);\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: "elementMatchedAttribute",\n    value: function elementMatchedAttribute(_element, attributeName) {\n      var outletName = this.getOutletNameFromOutletAttributeName(attributeName);\n      if (outletName) {\n        this.updateSelectorObserverForOutlet(outletName);\n      }\n    }\n  }, {\n    key: "elementAttributeValueChanged",\n    value: function elementAttributeValueChanged(_element, attributeName) {\n      var outletName = this.getOutletNameFromOutletAttributeName(attributeName);\n      if (outletName) {\n        this.updateSelectorObserverForOutlet(outletName);\n      }\n    }\n  }, {\n    key: "elementUnmatchedAttribute",\n    value: function elementUnmatchedAttribute(_element, attributeName) {\n      var outletName = this.getOutletNameFromOutletAttributeName(attributeName);\n      if (outletName) {\n        this.updateSelectorObserverForOutlet(outletName);\n      }\n    }\n  }, {\n    key: "connectOutlet",\n    value: function connectOutlet(outlet, element, outletName) {\n      var _this12 = this;\n      var _a;\n      if (!this.outletElementsByName.has(outletName, element)) {\n        this.outletsByName.add(outletName, outlet);\n        this.outletElementsByName.add(outletName, element);\n        (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(function () {\n          return _this12.delegate.outletConnected(outlet, element, outletName);\n        });\n      }\n    }\n  }, {\n    key: "disconnectOutlet",\n    value: function disconnectOutlet(outlet, element, outletName) {\n      var _this13 = this;\n      var _a;\n      if (this.outletElementsByName.has(outletName, element)) {\n        this.outletsByName["delete"](outletName, outlet);\n        this.outletElementsByName["delete"](outletName, element);\n        (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(function () {\n          return _this13.delegate.outletDisconnected(outlet, element, outletName);\n        });\n      }\n    }\n  }, {\n    key: "disconnectAllOutlets",\n    value: function disconnectAllOutlets() {\n      var _iterator10 = _createForOfIteratorHelper(this.outletElementsByName.keys),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var outletName = _step10.value;\n          var _iterator11 = _createForOfIteratorHelper(this.outletElementsByName.getValuesForKey(outletName)),\n            _step11;\n          try {\n            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n              var element = _step11.value;\n              var _iterator12 = _createForOfIteratorHelper(this.outletsByName.getValuesForKey(outletName)),\n                _step12;\n              try {\n                for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n                  var outlet = _step12.value;\n                  this.disconnectOutlet(outlet, element, outletName);\n                }\n              } catch (err) {\n                _iterator12.e(err);\n              } finally {\n                _iterator12.f();\n              }\n            }\n          } catch (err) {\n            _iterator11.e(err);\n          } finally {\n            _iterator11.f();\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n    }\n  }, {\n    key: "updateSelectorObserverForOutlet",\n    value: function updateSelectorObserverForOutlet(outletName) {\n      var observer = this.selectorObserverMap.get(outletName);\n      if (observer) {\n        observer.selector = this.selector(outletName);\n      }\n    }\n  }, {\n    key: "setupSelectorObserverForOutlet",\n    value: function setupSelectorObserverForOutlet(outletName) {\n      var selector = this.selector(outletName);\n      var selectorObserver = new SelectorObserver(document.body, selector, this, {\n        outletName: outletName\n      });\n      this.selectorObserverMap.set(outletName, selectorObserver);\n      selectorObserver.start();\n    }\n  }, {\n    key: "setupAttributeObserverForOutlet",\n    value: function setupAttributeObserverForOutlet(outletName) {\n      var attributeName = this.attributeNameForOutletName(outletName);\n      var attributeObserver = new AttributeObserver(this.scope.element, attributeName, this);\n      this.attributeObserverMap.set(outletName, attributeObserver);\n      attributeObserver.start();\n    }\n  }, {\n    key: "selector",\n    value: function selector(outletName) {\n      return this.scope.outlets.getSelectorForOutletName(outletName);\n    }\n  }, {\n    key: "attributeNameForOutletName",\n    value: function attributeNameForOutletName(outletName) {\n      return this.scope.schema.outletAttributeForScope(this.identifier, outletName);\n    }\n  }, {\n    key: "getOutletNameFromOutletAttributeName",\n    value: function getOutletNameFromOutletAttributeName(attributeName) {\n      var _this14 = this;\n      return this.outletDefinitions.find(function (outletName) {\n        return _this14.attributeNameForOutletName(outletName) === attributeName;\n      });\n    }\n  }, {\n    key: "outletDependencies",\n    get: function get() {\n      var dependencies = new Multimap();\n      this.router.modules.forEach(function (module) {\n        var constructor = module.definition.controllerConstructor;\n        var outlets = readInheritableStaticArrayValues(constructor, "outlets");\n        outlets.forEach(function (outlet) {\n          return dependencies.add(outlet, module.identifier);\n        });\n      });\n      return dependencies;\n    }\n  }, {\n    key: "outletDefinitions",\n    get: function get() {\n      return this.outletDependencies.getKeysForValue(this.identifier);\n    }\n  }, {\n    key: "dependentControllerIdentifiers",\n    get: function get() {\n      return this.outletDependencies.getValuesForKey(this.identifier);\n    }\n  }, {\n    key: "dependentContexts",\n    get: function get() {\n      var identifiers = this.dependentControllerIdentifiers;\n      return this.router.contexts.filter(function (context) {\n        return identifiers.includes(context.identifier);\n      });\n    }\n  }, {\n    key: "hasOutlet",\n    value: function hasOutlet(element, outletName) {\n      return !!this.getOutlet(element, outletName) || !!this.getOutletFromMap(element, outletName);\n    }\n  }, {\n    key: "getOutlet",\n    value: function getOutlet(element, outletName) {\n      return this.application.getControllerForElementAndIdentifier(element, outletName);\n    }\n  }, {\n    key: "getOutletFromMap",\n    value: function getOutletFromMap(element, outletName) {\n      return this.outletsByName.getValuesForKey(outletName).find(function (outlet) {\n        return outlet.element === element;\n      });\n    }\n  }, {\n    key: "scope",\n    get: function get() {\n      return this.context.scope;\n    }\n  }, {\n    key: "schema",\n    get: function get() {\n      return this.context.schema;\n    }\n  }, {\n    key: "identifier",\n    get: function get() {\n      return this.context.identifier;\n    }\n  }, {\n    key: "application",\n    get: function get() {\n      return this.context.application;\n    }\n  }, {\n    key: "router",\n    get: function get() {\n      return this.application.router;\n    }\n  }]);\n}();\nvar Context = /*#__PURE__*/function () {\n  function Context(module, scope) {\n    var _this15 = this;\n    _classCallCheck(this, Context);\n    this.logDebugActivity = function (functionName) {\n      var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var identifier = _this15.identifier,\n        controller = _this15.controller,\n        element = _this15.element;\n      detail = Object.assign({\n        identifier: identifier,\n        controller: controller,\n        element: element\n      }, detail);\n      _this15.application.logDebugActivity(_this15.identifier, functionName, detail);\n    };\n    this.module = module;\n    this.scope = scope;\n    this.controller = new module.controllerConstructor(this);\n    this.bindingObserver = new BindingObserver(this, this.dispatcher);\n    this.valueObserver = new ValueObserver(this, this.controller);\n    this.targetObserver = new TargetObserver(this, this);\n    this.outletObserver = new OutletObserver(this, this);\n    try {\n      this.controller.initialize();\n      this.logDebugActivity("initialize");\n    } catch (error) {\n      this.handleError(error, "initializing controller");\n    }\n  }\n  return _createClass(Context, [{\n    key: "connect",\n    value: function connect() {\n      this.bindingObserver.start();\n      this.valueObserver.start();\n      this.targetObserver.start();\n      this.outletObserver.start();\n      try {\n        this.controller.connect();\n        this.logDebugActivity("connect");\n      } catch (error) {\n        this.handleError(error, "connecting controller");\n      }\n    }\n  }, {\n    key: "refresh",\n    value: function refresh() {\n      this.outletObserver.refresh();\n    }\n  }, {\n    key: "disconnect",\n    value: function disconnect() {\n      try {\n        this.controller.disconnect();\n        this.logDebugActivity("disconnect");\n      } catch (error) {\n        this.handleError(error, "disconnecting controller");\n      }\n      this.outletObserver.stop();\n      this.targetObserver.stop();\n      this.valueObserver.stop();\n      this.bindingObserver.stop();\n    }\n  }, {\n    key: "application",\n    get: function get() {\n      return this.module.application;\n    }\n  }, {\n    key: "identifier",\n    get: function get() {\n      return this.module.identifier;\n    }\n  }, {\n    key: "schema",\n    get: function get() {\n      return this.application.schema;\n    }\n  }, {\n    key: "dispatcher",\n    get: function get() {\n      return this.application.dispatcher;\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.scope.element;\n    }\n  }, {\n    key: "parentElement",\n    get: function get() {\n      return this.element.parentElement;\n    }\n  }, {\n    key: "handleError",\n    value: function handleError(error, message) {\n      var detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var identifier = this.identifier,\n        controller = this.controller,\n        element = this.element;\n      detail = Object.assign({\n        identifier: identifier,\n        controller: controller,\n        element: element\n      }, detail);\n      this.application.handleError(error, "Error ".concat(message), detail);\n    }\n  }, {\n    key: "targetConnected",\n    value: function targetConnected(element, name) {\n      this.invokeControllerMethod("".concat(name, "TargetConnected"), element);\n    }\n  }, {\n    key: "targetDisconnected",\n    value: function targetDisconnected(element, name) {\n      this.invokeControllerMethod("".concat(name, "TargetDisconnected"), element);\n    }\n  }, {\n    key: "outletConnected",\n    value: function outletConnected(outlet, element, name) {\n      this.invokeControllerMethod("".concat(namespaceCamelize(name), "OutletConnected"), outlet, element);\n    }\n  }, {\n    key: "outletDisconnected",\n    value: function outletDisconnected(outlet, element, name) {\n      this.invokeControllerMethod("".concat(namespaceCamelize(name), "OutletDisconnected"), outlet, element);\n    }\n  }, {\n    key: "invokeControllerMethod",\n    value: function invokeControllerMethod(methodName) {\n      var controller = this.controller;\n      if (typeof controller[methodName] == "function") {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n        controller[methodName].apply(controller, args);\n      }\n    }\n  }]);\n}();\nfunction bless(constructor) {\n  return shadow(constructor, getBlessedProperties(constructor));\n}\nfunction shadow(constructor, properties) {\n  var shadowConstructor = extend(constructor);\n  var shadowProperties = getShadowProperties(constructor.prototype, properties);\n  Object.defineProperties(shadowConstructor.prototype, shadowProperties);\n  return shadowConstructor;\n}\nfunction getBlessedProperties(constructor) {\n  var blessings = readInheritableStaticArrayValues(constructor, "blessings");\n  return blessings.reduce(function (blessedProperties, blessing) {\n    var properties = blessing(constructor);\n    for (var key in properties) {\n      var descriptor = blessedProperties[key] || {};\n      blessedProperties[key] = Object.assign(descriptor, properties[key]);\n    }\n    return blessedProperties;\n  }, {});\n}\nfunction getShadowProperties(prototype, properties) {\n  return getOwnKeys(properties).reduce(function (shadowProperties, key) {\n    var descriptor = getShadowedDescriptor(prototype, properties, key);\n    if (descriptor) {\n      Object.assign(shadowProperties, _defineProperty({}, key, descriptor));\n    }\n    return shadowProperties;\n  }, {});\n}\nfunction getShadowedDescriptor(prototype, properties, key) {\n  var shadowingDescriptor = Object.getOwnPropertyDescriptor(prototype, key);\n  var shadowedByValue = shadowingDescriptor && "value" in shadowingDescriptor;\n  if (!shadowedByValue) {\n    var descriptor = Object.getOwnPropertyDescriptor(properties, key).value;\n    if (shadowingDescriptor) {\n      descriptor.get = shadowingDescriptor.get || descriptor.get;\n      descriptor.set = shadowingDescriptor.set || descriptor.set;\n    }\n    return descriptor;\n  }\n}\nvar getOwnKeys = function () {\n  if (typeof Object.getOwnPropertySymbols == "function") {\n    return function (object) {\n      return [].concat(_toConsumableArray(Object.getOwnPropertyNames(object)), _toConsumableArray(Object.getOwnPropertySymbols(object)));\n    };\n  } else {\n    return Object.getOwnPropertyNames;\n  }\n}();\nvar extend = function () {\n  function extendWithReflect(constructor) {\n    function extended() {\n      return Reflect.construct(constructor, arguments, this instanceof extended ? this.constructor : void 0);\n    }\n    extended.prototype = Object.create(constructor.prototype, {\n      constructor: {\n        value: extended\n      }\n    });\n    Reflect.setPrototypeOf(extended, constructor);\n    return extended;\n  }\n  function testReflectExtension() {\n    var a = function a() {\n      this.a.call(this);\n    };\n    var b = extendWithReflect(a);\n    b.prototype.a = function () {};\n    return new b();\n  }\n  try {\n    testReflectExtension();\n    return extendWithReflect;\n  } catch (error) {\n    return function (constructor) {\n      return /*#__PURE__*/function (_constructor) {\n        function extended() {\n          _classCallCheck(this, extended);\n          return _callSuper(this, extended, arguments);\n        }\n        _inherits(extended, _constructor);\n        return _createClass(extended);\n      }(constructor);\n    };\n  }\n}();\nfunction blessDefinition(definition) {\n  return {\n    identifier: definition.identifier,\n    controllerConstructor: bless(definition.controllerConstructor)\n  };\n}\nvar Module = /*#__PURE__*/function () {\n  function Module(application, definition) {\n    _classCallCheck(this, Module);\n    this.application = application;\n    this.definition = blessDefinition(definition);\n    this.contextsByScope = new WeakMap();\n    this.connectedContexts = new Set();\n  }\n  return _createClass(Module, [{\n    key: "identifier",\n    get: function get() {\n      return this.definition.identifier;\n    }\n  }, {\n    key: "controllerConstructor",\n    get: function get() {\n      return this.definition.controllerConstructor;\n    }\n  }, {\n    key: "contexts",\n    get: function get() {\n      return Array.from(this.connectedContexts);\n    }\n  }, {\n    key: "connectContextForScope",\n    value: function connectContextForScope(scope) {\n      var context = this.fetchContextForScope(scope);\n      this.connectedContexts.add(context);\n      context.connect();\n    }\n  }, {\n    key: "disconnectContextForScope",\n    value: function disconnectContextForScope(scope) {\n      var context = this.contextsByScope.get(scope);\n      if (context) {\n        this.connectedContexts["delete"](context);\n        context.disconnect();\n      }\n    }\n  }, {\n    key: "fetchContextForScope",\n    value: function fetchContextForScope(scope) {\n      var context = this.contextsByScope.get(scope);\n      if (!context) {\n        context = new Context(this, scope);\n        this.contextsByScope.set(scope, context);\n      }\n      return context;\n    }\n  }]);\n}();\nvar ClassMap = /*#__PURE__*/function () {\n  function ClassMap(scope) {\n    _classCallCheck(this, ClassMap);\n    this.scope = scope;\n  }\n  return _createClass(ClassMap, [{\n    key: "has",\n    value: function has(name) {\n      return this.data.has(this.getDataKey(name));\n    }\n  }, {\n    key: "get",\n    value: function get(name) {\n      return this.getAll(name)[0];\n    }\n  }, {\n    key: "getAll",\n    value: function getAll(name) {\n      var tokenString = this.data.get(this.getDataKey(name)) || "";\n      return tokenize(tokenString);\n    }\n  }, {\n    key: "getAttributeName",\n    value: function getAttributeName(name) {\n      return this.data.getAttributeNameForKey(this.getDataKey(name));\n    }\n  }, {\n    key: "getDataKey",\n    value: function getDataKey(name) {\n      return "".concat(name, "-class");\n    }\n  }, {\n    key: "data",\n    get: function get() {\n      return this.scope.data;\n    }\n  }]);\n}();\nvar DataMap = /*#__PURE__*/function () {\n  function DataMap(scope) {\n    _classCallCheck(this, DataMap);\n    this.scope = scope;\n  }\n  return _createClass(DataMap, [{\n    key: "element",\n    get: function get() {\n      return this.scope.element;\n    }\n  }, {\n    key: "identifier",\n    get: function get() {\n      return this.scope.identifier;\n    }\n  }, {\n    key: "get",\n    value: function get(key) {\n      var name = this.getAttributeNameForKey(key);\n      return this.element.getAttribute(name);\n    }\n  }, {\n    key: "set",\n    value: function set(key, value) {\n      var name = this.getAttributeNameForKey(key);\n      this.element.setAttribute(name, value);\n      return this.get(key);\n    }\n  }, {\n    key: "has",\n    value: function has(key) {\n      var name = this.getAttributeNameForKey(key);\n      return this.element.hasAttribute(name);\n    }\n  }, {\n    key: "delete",\n    value: function _delete(key) {\n      if (this.has(key)) {\n        var name = this.getAttributeNameForKey(key);\n        this.element.removeAttribute(name);\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: "getAttributeNameForKey",\n    value: function getAttributeNameForKey(key) {\n      return "data-".concat(this.identifier, "-").concat(dasherize(key));\n    }\n  }]);\n}();\nvar Guide = /*#__PURE__*/function () {\n  function Guide(logger) {\n    _classCallCheck(this, Guide);\n    this.warnedKeysByObject = new WeakMap();\n    this.logger = logger;\n  }\n  return _createClass(Guide, [{\n    key: "warn",\n    value: function warn(object, key, message) {\n      var warnedKeys = this.warnedKeysByObject.get(object);\n      if (!warnedKeys) {\n        warnedKeys = new Set();\n        this.warnedKeysByObject.set(object, warnedKeys);\n      }\n      if (!warnedKeys.has(key)) {\n        warnedKeys.add(key);\n        this.logger.warn(message, object);\n      }\n    }\n  }]);\n}();\nfunction attributeValueContainsToken(attributeName, token) {\n  return "[".concat(attributeName, "~=\\"").concat(token, "\\"]");\n}\nvar TargetSet = /*#__PURE__*/function () {\n  function TargetSet(scope) {\n    _classCallCheck(this, TargetSet);\n    this.scope = scope;\n  }\n  return _createClass(TargetSet, [{\n    key: "element",\n    get: function get() {\n      return this.scope.element;\n    }\n  }, {\n    key: "identifier",\n    get: function get() {\n      return this.scope.identifier;\n    }\n  }, {\n    key: "schema",\n    get: function get() {\n      return this.scope.schema;\n    }\n  }, {\n    key: "has",\n    value: function has(targetName) {\n      return this.find(targetName) != null;\n    }\n  }, {\n    key: "find",\n    value: function find() {\n      var _this16 = this;\n      for (var _len2 = arguments.length, targetNames = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n        targetNames[_key3] = arguments[_key3];\n      }\n      return targetNames.reduce(function (target, targetName) {\n        return target || _this16.findTarget(targetName) || _this16.findLegacyTarget(targetName);\n      }, undefined);\n    }\n  }, {\n    key: "findAll",\n    value: function findAll() {\n      var _this17 = this;\n      for (var _len3 = arguments.length, targetNames = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {\n        targetNames[_key4] = arguments[_key4];\n      }\n      return targetNames.reduce(function (targets, targetName) {\n        return [].concat(_toConsumableArray(targets), _toConsumableArray(_this17.findAllTargets(targetName)), _toConsumableArray(_this17.findAllLegacyTargets(targetName)));\n      }, []);\n    }\n  }, {\n    key: "findTarget",\n    value: function findTarget(targetName) {\n      var selector = this.getSelectorForTargetName(targetName);\n      return this.scope.findElement(selector);\n    }\n  }, {\n    key: "findAllTargets",\n    value: function findAllTargets(targetName) {\n      var selector = this.getSelectorForTargetName(targetName);\n      return this.scope.findAllElements(selector);\n    }\n  }, {\n    key: "getSelectorForTargetName",\n    value: function getSelectorForTargetName(targetName) {\n      var attributeName = this.schema.targetAttributeForScope(this.identifier);\n      return attributeValueContainsToken(attributeName, targetName);\n    }\n  }, {\n    key: "findLegacyTarget",\n    value: function findLegacyTarget(targetName) {\n      var selector = this.getLegacySelectorForTargetName(targetName);\n      return this.deprecate(this.scope.findElement(selector), targetName);\n    }\n  }, {\n    key: "findAllLegacyTargets",\n    value: function findAllLegacyTargets(targetName) {\n      var _this18 = this;\n      var selector = this.getLegacySelectorForTargetName(targetName);\n      return this.scope.findAllElements(selector).map(function (element) {\n        return _this18.deprecate(element, targetName);\n      });\n    }\n  }, {\n    key: "getLegacySelectorForTargetName",\n    value: function getLegacySelectorForTargetName(targetName) {\n      var targetDescriptor = "".concat(this.identifier, ".").concat(targetName);\n      return attributeValueContainsToken(this.schema.targetAttribute, targetDescriptor);\n    }\n  }, {\n    key: "deprecate",\n    value: function deprecate(element, targetName) {\n      if (element) {\n        var identifier = this.identifier;\n        var attributeName = this.schema.targetAttribute;\n        var revisedAttributeName = this.schema.targetAttributeForScope(identifier);\n        this.guide.warn(element, "target:".concat(targetName), "Please replace ".concat(attributeName, "=\\"").concat(identifier, ".").concat(targetName, "\\" with ").concat(revisedAttributeName, "=\\"").concat(targetName, "\\". ") + "The ".concat(attributeName, " attribute is deprecated and will be removed in a future version of Stimulus."));\n      }\n      return element;\n    }\n  }, {\n    key: "guide",\n    get: function get() {\n      return this.scope.guide;\n    }\n  }]);\n}();\nvar OutletSet = /*#__PURE__*/function () {\n  function OutletSet(scope, controllerElement) {\n    _classCallCheck(this, OutletSet);\n    this.scope = scope;\n    this.controllerElement = controllerElement;\n  }\n  return _createClass(OutletSet, [{\n    key: "element",\n    get: function get() {\n      return this.scope.element;\n    }\n  }, {\n    key: "identifier",\n    get: function get() {\n      return this.scope.identifier;\n    }\n  }, {\n    key: "schema",\n    get: function get() {\n      return this.scope.schema;\n    }\n  }, {\n    key: "has",\n    value: function has(outletName) {\n      return this.find(outletName) != null;\n    }\n  }, {\n    key: "find",\n    value: function find() {\n      var _this19 = this;\n      for (var _len4 = arguments.length, outletNames = new Array(_len4), _key5 = 0; _key5 < _len4; _key5++) {\n        outletNames[_key5] = arguments[_key5];\n      }\n      return outletNames.reduce(function (outlet, outletName) {\n        return outlet || _this19.findOutlet(outletName);\n      }, undefined);\n    }\n  }, {\n    key: "findAll",\n    value: function findAll() {\n      var _this20 = this;\n      for (var _len5 = arguments.length, outletNames = new Array(_len5), _key6 = 0; _key6 < _len5; _key6++) {\n        outletNames[_key6] = arguments[_key6];\n      }\n      return outletNames.reduce(function (outlets, outletName) {\n        return [].concat(_toConsumableArray(outlets), _toConsumableArray(_this20.findAllOutlets(outletName)));\n      }, []);\n    }\n  }, {\n    key: "getSelectorForOutletName",\n    value: function getSelectorForOutletName(outletName) {\n      var attributeName = this.schema.outletAttributeForScope(this.identifier, outletName);\n      return this.controllerElement.getAttribute(attributeName);\n    }\n  }, {\n    key: "findOutlet",\n    value: function findOutlet(outletName) {\n      var selector = this.getSelectorForOutletName(outletName);\n      if (selector) return this.findElement(selector, outletName);\n    }\n  }, {\n    key: "findAllOutlets",\n    value: function findAllOutlets(outletName) {\n      var selector = this.getSelectorForOutletName(outletName);\n      return selector ? this.findAllElements(selector, outletName) : [];\n    }\n  }, {\n    key: "findElement",\n    value: function findElement(selector, outletName) {\n      var _this21 = this;\n      var elements = this.scope.queryElements(selector);\n      return elements.filter(function (element) {\n        return _this21.matchesElement(element, selector, outletName);\n      })[0];\n    }\n  }, {\n    key: "findAllElements",\n    value: function findAllElements(selector, outletName) {\n      var _this22 = this;\n      var elements = this.scope.queryElements(selector);\n      return elements.filter(function (element) {\n        return _this22.matchesElement(element, selector, outletName);\n      });\n    }\n  }, {\n    key: "matchesElement",\n    value: function matchesElement(element, selector, outletName) {\n      var controllerAttribute = element.getAttribute(this.scope.schema.controllerAttribute) || "";\n      return element.matches(selector) && controllerAttribute.split(" ").includes(outletName);\n    }\n  }]);\n}();\nvar Scope = /*#__PURE__*/function () {\n  function Scope(schema, element, identifier, logger) {\n    var _this23 = this;\n    _classCallCheck(this, Scope);\n    this.targets = new TargetSet(this);\n    this.classes = new ClassMap(this);\n    this.data = new DataMap(this);\n    this.containsElement = function (element) {\n      return element.closest(_this23.controllerSelector) === _this23.element;\n    };\n    this.schema = schema;\n    this.element = element;\n    this.identifier = identifier;\n    this.guide = new Guide(logger);\n    this.outlets = new OutletSet(this.documentScope, element);\n  }\n  return _createClass(Scope, [{\n    key: "findElement",\n    value: function findElement(selector) {\n      return this.element.matches(selector) ? this.element : this.queryElements(selector).find(this.containsElement);\n    }\n  }, {\n    key: "findAllElements",\n    value: function findAllElements(selector) {\n      return [].concat(_toConsumableArray(this.element.matches(selector) ? [this.element] : []), _toConsumableArray(this.queryElements(selector).filter(this.containsElement)));\n    }\n  }, {\n    key: "queryElements",\n    value: function queryElements(selector) {\n      return Array.from(this.element.querySelectorAll(selector));\n    }\n  }, {\n    key: "controllerSelector",\n    get: function get() {\n      return attributeValueContainsToken(this.schema.controllerAttribute, this.identifier);\n    }\n  }, {\n    key: "isDocumentScope",\n    get: function get() {\n      return this.element === document.documentElement;\n    }\n  }, {\n    key: "documentScope",\n    get: function get() {\n      return this.isDocumentScope ? this : new Scope(this.schema, document.documentElement, this.identifier, this.guide.logger);\n    }\n  }]);\n}();\nvar ScopeObserver = /*#__PURE__*/function () {\n  function ScopeObserver(element, schema, delegate) {\n    _classCallCheck(this, ScopeObserver);\n    this.element = element;\n    this.schema = schema;\n    this.delegate = delegate;\n    this.valueListObserver = new ValueListObserver(this.element, this.controllerAttribute, this);\n    this.scopesByIdentifierByElement = new WeakMap();\n    this.scopeReferenceCounts = new WeakMap();\n  }\n  return _createClass(ScopeObserver, [{\n    key: "start",\n    value: function start() {\n      this.valueListObserver.start();\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      this.valueListObserver.stop();\n    }\n  }, {\n    key: "controllerAttribute",\n    get: function get() {\n      return this.schema.controllerAttribute;\n    }\n  }, {\n    key: "parseValueForToken",\n    value: function parseValueForToken(token) {\n      var element = token.element,\n        identifier = token.content;\n      return this.parseValueForElementAndIdentifier(element, identifier);\n    }\n  }, {\n    key: "parseValueForElementAndIdentifier",\n    value: function parseValueForElementAndIdentifier(element, identifier) {\n      var scopesByIdentifier = this.fetchScopesByIdentifierForElement(element);\n      var scope = scopesByIdentifier.get(identifier);\n      if (!scope) {\n        scope = this.delegate.createScopeForElementAndIdentifier(element, identifier);\n        scopesByIdentifier.set(identifier, scope);\n      }\n      return scope;\n    }\n  }, {\n    key: "elementMatchedValue",\n    value: function elementMatchedValue(element, value) {\n      var referenceCount = (this.scopeReferenceCounts.get(value) || 0) + 1;\n      this.scopeReferenceCounts.set(value, referenceCount);\n      if (referenceCount == 1) {\n        this.delegate.scopeConnected(value);\n      }\n    }\n  }, {\n    key: "elementUnmatchedValue",\n    value: function elementUnmatchedValue(element, value) {\n      var referenceCount = this.scopeReferenceCounts.get(value);\n      if (referenceCount) {\n        this.scopeReferenceCounts.set(value, referenceCount - 1);\n        if (referenceCount == 1) {\n          this.delegate.scopeDisconnected(value);\n        }\n      }\n    }\n  }, {\n    key: "fetchScopesByIdentifierForElement",\n    value: function fetchScopesByIdentifierForElement(element) {\n      var scopesByIdentifier = this.scopesByIdentifierByElement.get(element);\n      if (!scopesByIdentifier) {\n        scopesByIdentifier = new Map();\n        this.scopesByIdentifierByElement.set(element, scopesByIdentifier);\n      }\n      return scopesByIdentifier;\n    }\n  }]);\n}();\nvar Router = /*#__PURE__*/function () {\n  function Router(application) {\n    _classCallCheck(this, Router);\n    this.application = application;\n    this.scopeObserver = new ScopeObserver(this.element, this.schema, this);\n    this.scopesByIdentifier = new Multimap();\n    this.modulesByIdentifier = new Map();\n  }\n  return _createClass(Router, [{\n    key: "element",\n    get: function get() {\n      return this.application.element;\n    }\n  }, {\n    key: "schema",\n    get: function get() {\n      return this.application.schema;\n    }\n  }, {\n    key: "logger",\n    get: function get() {\n      return this.application.logger;\n    }\n  }, {\n    key: "controllerAttribute",\n    get: function get() {\n      return this.schema.controllerAttribute;\n    }\n  }, {\n    key: "modules",\n    get: function get() {\n      return Array.from(this.modulesByIdentifier.values());\n    }\n  }, {\n    key: "contexts",\n    get: function get() {\n      return this.modules.reduce(function (contexts, module) {\n        return contexts.concat(module.contexts);\n      }, []);\n    }\n  }, {\n    key: "start",\n    value: function start() {\n      this.scopeObserver.start();\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      this.scopeObserver.stop();\n    }\n  }, {\n    key: "loadDefinition",\n    value: function loadDefinition(definition) {\n      this.unloadIdentifier(definition.identifier);\n      var module = new Module(this.application, definition);\n      this.connectModule(module);\n      var afterLoad = definition.controllerConstructor.afterLoad;\n      if (afterLoad) {\n        afterLoad.call(definition.controllerConstructor, definition.identifier, this.application);\n      }\n    }\n  }, {\n    key: "unloadIdentifier",\n    value: function unloadIdentifier(identifier) {\n      var module = this.modulesByIdentifier.get(identifier);\n      if (module) {\n        this.disconnectModule(module);\n      }\n    }\n  }, {\n    key: "getContextForElementAndIdentifier",\n    value: function getContextForElementAndIdentifier(element, identifier) {\n      var module = this.modulesByIdentifier.get(identifier);\n      if (module) {\n        return module.contexts.find(function (context) {\n          return context.element == element;\n        });\n      }\n    }\n  }, {\n    key: "proposeToConnectScopeForElementAndIdentifier",\n    value: function proposeToConnectScopeForElementAndIdentifier(element, identifier) {\n      var scope = this.scopeObserver.parseValueForElementAndIdentifier(element, identifier);\n      if (scope) {\n        this.scopeObserver.elementMatchedValue(scope.element, scope);\n      } else {\n        console.error("Couldn\'t find or create scope for identifier: \\"".concat(identifier, "\\" and element:"), element);\n      }\n    }\n  }, {\n    key: "handleError",\n    value: function handleError(error, message, detail) {\n      this.application.handleError(error, message, detail);\n    }\n  }, {\n    key: "createScopeForElementAndIdentifier",\n    value: function createScopeForElementAndIdentifier(element, identifier) {\n      return new Scope(this.schema, element, identifier, this.logger);\n    }\n  }, {\n    key: "scopeConnected",\n    value: function scopeConnected(scope) {\n      this.scopesByIdentifier.add(scope.identifier, scope);\n      var module = this.modulesByIdentifier.get(scope.identifier);\n      if (module) {\n        module.connectContextForScope(scope);\n      }\n    }\n  }, {\n    key: "scopeDisconnected",\n    value: function scopeDisconnected(scope) {\n      this.scopesByIdentifier["delete"](scope.identifier, scope);\n      var module = this.modulesByIdentifier.get(scope.identifier);\n      if (module) {\n        module.disconnectContextForScope(scope);\n      }\n    }\n  }, {\n    key: "connectModule",\n    value: function connectModule(module) {\n      this.modulesByIdentifier.set(module.identifier, module);\n      var scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);\n      scopes.forEach(function (scope) {\n        return module.connectContextForScope(scope);\n      });\n    }\n  }, {\n    key: "disconnectModule",\n    value: function disconnectModule(module) {\n      this.modulesByIdentifier["delete"](module.identifier);\n      var scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);\n      scopes.forEach(function (scope) {\n        return module.disconnectContextForScope(scope);\n      });\n    }\n  }]);\n}();\nvar defaultSchema = {\n  controllerAttribute: "data-controller",\n  actionAttribute: "data-action",\n  targetAttribute: "data-target",\n  targetAttributeForScope: function targetAttributeForScope(identifier) {\n    return "data-".concat(identifier, "-target");\n  },\n  outletAttributeForScope: function outletAttributeForScope(identifier, outlet) {\n    return "data-".concat(identifier, "-").concat(outlet, "-outlet");\n  },\n  keyMappings: Object.assign(Object.assign({\n    enter: "Enter",\n    tab: "Tab",\n    esc: "Escape",\n    space: " ",\n    up: "ArrowUp",\n    down: "ArrowDown",\n    left: "ArrowLeft",\n    right: "ArrowRight",\n    home: "Home",\n    end: "End",\n    page_up: "PageUp",\n    page_down: "PageDown"\n  }, objectFromEntries("abcdefghijklmnopqrstuvwxyz".split("").map(function (c) {\n    return [c, c];\n  }))), objectFromEntries("0123456789".split("").map(function (n) {\n    return [n, n];\n  })))\n};\nfunction objectFromEntries(array) {\n  return array.reduce(function (memo, _ref15) {\n    var _ref16 = _slicedToArray(_ref15, 2),\n      k = _ref16[0],\n      v = _ref16[1];\n    return Object.assign(Object.assign({}, memo), _defineProperty({}, k, v));\n  }, {});\n}\nvar Application = /*#__PURE__*/function () {\n  function Application() {\n    var _this24 = this;\n    var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.documentElement;\n    var schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultSchema;\n    _classCallCheck(this, Application);\n    this.logger = console;\n    this.debug = false;\n    this.logDebugActivity = function (identifier, functionName) {\n      var detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (_this24.debug) {\n        _this24.logFormattedMessage(identifier, functionName, detail);\n      }\n    };\n    this.element = element;\n    this.schema = schema;\n    this.dispatcher = new Dispatcher(this);\n    this.router = new Router(this);\n    this.actionDescriptorFilters = Object.assign({}, defaultActionDescriptorFilters);\n  }\n  return _createClass(Application, [{\n    key: "start",\n    value: function () {\n      var _start = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return domReady();\n            case 2:\n              this.logDebugActivity("application", "starting");\n              this.dispatcher.start();\n              this.router.start();\n              this.logDebugActivity("application", "start");\n            case 6:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function start() {\n        return _start.apply(this, arguments);\n      }\n      return start;\n    }()\n  }, {\n    key: "stop",\n    value: function stop() {\n      this.logDebugActivity("application", "stopping");\n      this.dispatcher.stop();\n      this.router.stop();\n      this.logDebugActivity("application", "stop");\n    }\n  }, {\n    key: "register",\n    value: function register(identifier, controllerConstructor) {\n      this.load({\n        identifier: identifier,\n        controllerConstructor: controllerConstructor\n      });\n    }\n  }, {\n    key: "registerActionOption",\n    value: function registerActionOption(name, filter) {\n      this.actionDescriptorFilters[name] = filter;\n    }\n  }, {\n    key: "load",\n    value: function load(head) {\n      var _this25 = this;\n      for (var _len6 = arguments.length, rest = new Array(_len6 > 1 ? _len6 - 1 : 0), _key7 = 1; _key7 < _len6; _key7++) {\n        rest[_key7 - 1] = arguments[_key7];\n      }\n      var definitions = Array.isArray(head) ? head : [head].concat(rest);\n      definitions.forEach(function (definition) {\n        if (definition.controllerConstructor.shouldLoad) {\n          _this25.router.loadDefinition(definition);\n        }\n      });\n    }\n  }, {\n    key: "unload",\n    value: function unload(head) {\n      var _this26 = this;\n      for (var _len7 = arguments.length, rest = new Array(_len7 > 1 ? _len7 - 1 : 0), _key8 = 1; _key8 < _len7; _key8++) {\n        rest[_key8 - 1] = arguments[_key8];\n      }\n      var identifiers = Array.isArray(head) ? head : [head].concat(rest);\n      identifiers.forEach(function (identifier) {\n        return _this26.router.unloadIdentifier(identifier);\n      });\n    }\n  }, {\n    key: "controllers",\n    get: function get() {\n      return this.router.contexts.map(function (context) {\n        return context.controller;\n      });\n    }\n  }, {\n    key: "getControllerForElementAndIdentifier",\n    value: function getControllerForElementAndIdentifier(element, identifier) {\n      var context = this.router.getContextForElementAndIdentifier(element, identifier);\n      return context ? context.controller : null;\n    }\n  }, {\n    key: "handleError",\n    value: function handleError(error, message, detail) {\n      var _a;\n      this.logger.error("%s\\n\\n%o\\n\\n%o", message, error, detail);\n      (_a = window.onerror) === null || _a === void 0 ? void 0 : _a.call(window, message, "", 0, 0, error);\n    }\n  }, {\n    key: "logFormattedMessage",\n    value: function logFormattedMessage(identifier, functionName) {\n      var detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      detail = Object.assign({\n        application: this\n      }, detail);\n      this.logger.groupCollapsed("".concat(identifier, " #").concat(functionName));\n      this.logger.log("details:", Object.assign({}, detail));\n      this.logger.groupEnd();\n    }\n  }], [{\n    key: "start",\n    value: function start(element, schema) {\n      var application = new this(element, schema);\n      application.start();\n      return application;\n    }\n  }]);\n}();\nfunction domReady() {\n  return new Promise(function (resolve) {\n    if (document.readyState == "loading") {\n      document.addEventListener("DOMContentLoaded", function () {\n        return resolve();\n      });\n    } else {\n      resolve();\n    }\n  });\n}\nfunction ClassPropertiesBlessing(constructor) {\n  var classes = readInheritableStaticArrayValues(constructor, "classes");\n  return classes.reduce(function (properties, classDefinition) {\n    return Object.assign(properties, propertiesForClassDefinition(classDefinition));\n  }, {});\n}\nfunction propertiesForClassDefinition(key) {\n  return _defineProperty(_defineProperty(_defineProperty({}, "".concat(key, "Class"), {\n    get: function get() {\n      var classes = this.classes;\n      if (classes.has(key)) {\n        return classes.get(key);\n      } else {\n        var attribute = classes.getAttributeName(key);\n        throw new Error("Missing attribute \\"".concat(attribute, "\\""));\n      }\n    }\n  }), "".concat(key, "Classes"), {\n    get: function get() {\n      return this.classes.getAll(key);\n    }\n  }), "has".concat(capitalize(key), "Class"), {\n    get: function get() {\n      return this.classes.has(key);\n    }\n  });\n}\nfunction OutletPropertiesBlessing(constructor) {\n  var outlets = readInheritableStaticArrayValues(constructor, "outlets");\n  return outlets.reduce(function (properties, outletDefinition) {\n    return Object.assign(properties, propertiesForOutletDefinition(outletDefinition));\n  }, {});\n}\nfunction getOutletController(controller, element, identifier) {\n  return controller.application.getControllerForElementAndIdentifier(element, identifier);\n}\nfunction getControllerAndEnsureConnectedScope(controller, element, outletName) {\n  var outletController = getOutletController(controller, element, outletName);\n  if (outletController) return outletController;\n  controller.application.router.proposeToConnectScopeForElementAndIdentifier(element, outletName);\n  outletController = getOutletController(controller, element, outletName);\n  if (outletController) return outletController;\n}\nfunction propertiesForOutletDefinition(name) {\n  var camelizedName = namespaceCamelize(name);\n  return _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(camelizedName, "Outlet"), {\n    get: function get() {\n      var outletElement = this.outlets.find(name);\n      var selector = this.outlets.getSelectorForOutletName(name);\n      if (outletElement) {\n        var outletController = getControllerAndEnsureConnectedScope(this, outletElement, name);\n        if (outletController) return outletController;\n        throw new Error("The provided outlet element is missing an outlet controller \\"".concat(name, "\\" instance for host controller \\"").concat(this.identifier, "\\""));\n      }\n      throw new Error("Missing outlet element \\"".concat(name, "\\" for host controller \\"").concat(this.identifier, "\\". Stimulus couldn\'t find a matching outlet element using selector \\"").concat(selector, "\\"."));\n    }\n  }), "".concat(camelizedName, "Outlets"), {\n    get: function get() {\n      var _this27 = this;\n      var outlets = this.outlets.findAll(name);\n      if (outlets.length > 0) {\n        return outlets.map(function (outletElement) {\n          var outletController = getControllerAndEnsureConnectedScope(_this27, outletElement, name);\n          if (outletController) return outletController;\n          console.warn("The provided outlet element is missing an outlet controller \\"".concat(name, "\\" instance for host controller \\"").concat(_this27.identifier, "\\""), outletElement);\n        }).filter(function (controller) {\n          return controller;\n        });\n      }\n      return [];\n    }\n  }), "".concat(camelizedName, "OutletElement"), {\n    get: function get() {\n      var outletElement = this.outlets.find(name);\n      var selector = this.outlets.getSelectorForOutletName(name);\n      if (outletElement) {\n        return outletElement;\n      } else {\n        throw new Error("Missing outlet element \\"".concat(name, "\\" for host controller \\"").concat(this.identifier, "\\". Stimulus couldn\'t find a matching outlet element using selector \\"").concat(selector, "\\"."));\n      }\n    }\n  }), "".concat(camelizedName, "OutletElements"), {\n    get: function get() {\n      return this.outlets.findAll(name);\n    }\n  }), "has".concat(capitalize(camelizedName), "Outlet"), {\n    get: function get() {\n      return this.outlets.has(name);\n    }\n  });\n}\nfunction TargetPropertiesBlessing(constructor) {\n  var targets = readInheritableStaticArrayValues(constructor, "targets");\n  return targets.reduce(function (properties, targetDefinition) {\n    return Object.assign(properties, propertiesForTargetDefinition(targetDefinition));\n  }, {});\n}\nfunction propertiesForTargetDefinition(name) {\n  return _defineProperty(_defineProperty(_defineProperty({}, "".concat(name, "Target"), {\n    get: function get() {\n      var target = this.targets.find(name);\n      if (target) {\n        return target;\n      } else {\n        throw new Error("Missing target element \\"".concat(name, "\\" for \\"").concat(this.identifier, "\\" controller"));\n      }\n    }\n  }), "".concat(name, "Targets"), {\n    get: function get() {\n      return this.targets.findAll(name);\n    }\n  }), "has".concat(capitalize(name), "Target"), {\n    get: function get() {\n      return this.targets.has(name);\n    }\n  });\n}\nfunction ValuePropertiesBlessing(constructor) {\n  var valueDefinitionPairs = readInheritableStaticObjectPairs(constructor, "values");\n  var propertyDescriptorMap = {\n    valueDescriptorMap: {\n      get: function get() {\n        var _this28 = this;\n        return valueDefinitionPairs.reduce(function (result, valueDefinitionPair) {\n          var valueDescriptor = parseValueDefinitionPair(valueDefinitionPair, _this28.identifier);\n          var attributeName = _this28.data.getAttributeNameForKey(valueDescriptor.key);\n          return Object.assign(result, _defineProperty({}, attributeName, valueDescriptor));\n        }, {});\n      }\n    }\n  };\n  return valueDefinitionPairs.reduce(function (properties, valueDefinitionPair) {\n    return Object.assign(properties, propertiesForValueDefinitionPair(valueDefinitionPair));\n  }, propertyDescriptorMap);\n}\nfunction propertiesForValueDefinitionPair(valueDefinitionPair, controller) {\n  var definition = parseValueDefinitionPair(valueDefinitionPair, controller);\n  var key = definition.key,\n    name = definition.name,\n    read = definition.reader,\n    write = definition.writer;\n  return _defineProperty(_defineProperty({}, name, {\n    get: function get() {\n      var value = this.data.get(key);\n      if (value !== null) {\n        return read(value);\n      } else {\n        return definition.defaultValue;\n      }\n    },\n    set: function set(value) {\n      if (value === undefined) {\n        this.data["delete"](key);\n      } else {\n        this.data.set(key, write(value));\n      }\n    }\n  }), "has".concat(capitalize(name)), {\n    get: function get() {\n      return this.data.has(key) || definition.hasCustomDefaultValue;\n    }\n  });\n}\nfunction parseValueDefinitionPair(_ref21, controller) {\n  var _ref22 = _slicedToArray(_ref21, 2),\n    token = _ref22[0],\n    typeDefinition = _ref22[1];\n  return valueDescriptorForTokenAndTypeDefinition({\n    controller: controller,\n    token: token,\n    typeDefinition: typeDefinition\n  });\n}\nfunction parseValueTypeConstant(constant) {\n  switch (constant) {\n    case Array:\n      return "array";\n    case Boolean:\n      return "boolean";\n    case Number:\n      return "number";\n    case Object:\n      return "object";\n    case String:\n      return "string";\n  }\n}\nfunction parseValueTypeDefault(defaultValue) {\n  switch (_typeof(defaultValue)) {\n    case "boolean":\n      return "boolean";\n    case "number":\n      return "number";\n    case "string":\n      return "string";\n  }\n  if (Array.isArray(defaultValue)) return "array";\n  if (Object.prototype.toString.call(defaultValue) === "[object Object]") return "object";\n}\nfunction parseValueTypeObject(payload) {\n  var controller = payload.controller,\n    token = payload.token,\n    typeObject = payload.typeObject;\n  var hasType = isSomething(typeObject.type);\n  var hasDefault = isSomething(typeObject["default"]);\n  var fullObject = hasType && hasDefault;\n  var onlyType = hasType && !hasDefault;\n  var onlyDefault = !hasType && hasDefault;\n  var typeFromObject = parseValueTypeConstant(typeObject.type);\n  var typeFromDefaultValue = parseValueTypeDefault(payload.typeObject["default"]);\n  if (onlyType) return typeFromObject;\n  if (onlyDefault) return typeFromDefaultValue;\n  if (typeFromObject !== typeFromDefaultValue) {\n    var propertyPath = controller ? "".concat(controller, ".").concat(token) : token;\n    throw new Error("The specified default value for the Stimulus Value \\"".concat(propertyPath, "\\" must match the defined type \\"").concat(typeFromObject, "\\". The provided default value of \\"").concat(typeObject["default"], "\\" is of type \\"").concat(typeFromDefaultValue, "\\"."));\n  }\n  if (fullObject) return typeFromObject;\n}\nfunction parseValueTypeDefinition(payload) {\n  var controller = payload.controller,\n    token = payload.token,\n    typeDefinition = payload.typeDefinition;\n  var typeObject = {\n    controller: controller,\n    token: token,\n    typeObject: typeDefinition\n  };\n  var typeFromObject = parseValueTypeObject(typeObject);\n  var typeFromDefaultValue = parseValueTypeDefault(typeDefinition);\n  var typeFromConstant = parseValueTypeConstant(typeDefinition);\n  var type = typeFromObject || typeFromDefaultValue || typeFromConstant;\n  if (type) return type;\n  var propertyPath = controller ? "".concat(controller, ".").concat(typeDefinition) : token;\n  throw new Error("Unknown value type \\"".concat(propertyPath, "\\" for \\"").concat(token, "\\" value"));\n}\nfunction defaultValueForDefinition(typeDefinition) {\n  var constant = parseValueTypeConstant(typeDefinition);\n  if (constant) return defaultValuesByType[constant];\n  var hasDefault = hasProperty(typeDefinition, "default");\n  var hasType = hasProperty(typeDefinition, "type");\n  var typeObject = typeDefinition;\n  if (hasDefault) return typeObject["default"];\n  if (hasType) {\n    var type = typeObject.type;\n    var constantFromType = parseValueTypeConstant(type);\n    if (constantFromType) return defaultValuesByType[constantFromType];\n  }\n  return typeDefinition;\n}\nfunction valueDescriptorForTokenAndTypeDefinition(payload) {\n  var token = payload.token,\n    typeDefinition = payload.typeDefinition;\n  var key = "".concat(dasherize(token), "-value");\n  var type = parseValueTypeDefinition(payload);\n  return {\n    type: type,\n    key: key,\n    name: camelize(key),\n    get defaultValue() {\n      return defaultValueForDefinition(typeDefinition);\n    },\n    get hasCustomDefaultValue() {\n      return parseValueTypeDefault(typeDefinition) !== undefined;\n    },\n    reader: readers[type],\n    writer: writers[type] || writers["default"]\n  };\n}\nvar defaultValuesByType = {\n  get array() {\n    return [];\n  },\n  "boolean": false,\n  number: 0,\n  get object() {\n    return {};\n  },\n  string: ""\n};\nvar readers = {\n  array: function array(value) {\n    var array = JSON.parse(value);\n    if (!Array.isArray(array)) {\n      throw new TypeError("expected value of type \\"array\\" but instead got value \\"".concat(value, "\\" of type \\"").concat(parseValueTypeDefault(array), "\\""));\n    }\n    return array;\n  },\n  "boolean": function boolean(value) {\n    return !(value == "0" || String(value).toLowerCase() == "false");\n  },\n  number: function number(value) {\n    return Number(value.replace(/_/g, ""));\n  },\n  object: function object(value) {\n    var object = JSON.parse(value);\n    if (object === null || _typeof(object) != "object" || Array.isArray(object)) {\n      throw new TypeError("expected value of type \\"object\\" but instead got value \\"".concat(value, "\\" of type \\"").concat(parseValueTypeDefault(object), "\\""));\n    }\n    return object;\n  },\n  string: function string(value) {\n    return value;\n  }\n};\nvar writers = {\n  "default": writeString,\n  array: writeJSON,\n  object: writeJSON\n};\nfunction writeJSON(value) {\n  return JSON.stringify(value);\n}\nfunction writeString(value) {\n  return "".concat(value);\n}\nvar Controller = /*#__PURE__*/function () {\n  function Controller(context) {\n    _classCallCheck(this, Controller);\n    this.context = context;\n  }\n  return _createClass(Controller, [{\n    key: "application",\n    get: function get() {\n      return this.context.application;\n    }\n  }, {\n    key: "scope",\n    get: function get() {\n      return this.context.scope;\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.scope.element;\n    }\n  }, {\n    key: "identifier",\n    get: function get() {\n      return this.scope.identifier;\n    }\n  }, {\n    key: "targets",\n    get: function get() {\n      return this.scope.targets;\n    }\n  }, {\n    key: "outlets",\n    get: function get() {\n      return this.scope.outlets;\n    }\n  }, {\n    key: "classes",\n    get: function get() {\n      return this.scope.classes;\n    }\n  }, {\n    key: "data",\n    get: function get() {\n      return this.scope.data;\n    }\n  }, {\n    key: "initialize",\n    value: function initialize() {}\n  }, {\n    key: "connect",\n    value: function connect() {}\n  }, {\n    key: "disconnect",\n    value: function disconnect() {}\n  }, {\n    key: "dispatch",\n    value: function dispatch(eventName) {\n      var _ref23 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref23$target = _ref23.target,\n        target = _ref23$target === void 0 ? this.element : _ref23$target,\n        _ref23$detail = _ref23.detail,\n        detail = _ref23$detail === void 0 ? {} : _ref23$detail,\n        _ref23$prefix = _ref23.prefix,\n        prefix = _ref23$prefix === void 0 ? this.identifier : _ref23$prefix,\n        _ref23$bubbles = _ref23.bubbles,\n        bubbles = _ref23$bubbles === void 0 ? true : _ref23$bubbles,\n        _ref23$cancelable = _ref23.cancelable,\n        cancelable = _ref23$cancelable === void 0 ? true : _ref23$cancelable;\n      var type = prefix ? "".concat(prefix, ":").concat(eventName) : eventName;\n      var event = new CustomEvent(type, {\n        detail: detail,\n        bubbles: bubbles,\n        cancelable: cancelable\n      });\n      target.dispatchEvent(event);\n      return event;\n    }\n  }], [{\n    key: "shouldLoad",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: "afterLoad",\n    value: function afterLoad(_identifier, _application) {\n      return;\n    }\n  }]);\n}();\nController.blessings = [ClassPropertiesBlessing, TargetPropertiesBlessing, ValuePropertiesBlessing, OutletPropertiesBlessing];\nController.targets = [];\nController.outlets = [];\nController.values = {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///761\n')},879:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(231);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(683);\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(820);\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(792);\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(156);\n/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(761);\n/* harmony import */ var pubsub_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(366);\n/* harmony import */ var pubsub_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(pubsub_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_camelcase__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(814);\n/* harmony import */ var lodash_camelcase__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_camelcase__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\nfunction _callSuper(t, o, e) {\n  return o = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)(o), (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)(t).constructor) : o.apply(t, e));\n}\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {\n    return !!t;\n  })();\n}\n\n\n\nvar ApplicationController = /*#__PURE__*/function (_Controller) {\n  function ApplicationController() {\n    var _this;\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .A)(this, ApplicationController);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, ApplicationController, [].concat(args));\n    _this.__timeouts = [];\n    _this.__events = [];\n    _this.__subscriptions = [];\n    _this.element[_this.controllerName] = _this;\n    return _this;\n  }\n\n  /**\n   * Don\'t forget to call `super.disconnect()` if you override the disconnect hook.\n   */\n  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .A)(ApplicationController, _Controller);\n  return (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .A)(ApplicationController, [{\n    key: "disconnect",\n    value: function disconnect() {\n      this.clearAllTimeouts();\n      this.__events.forEach(function (_ref) {\n        var receiver = _ref.receiver,\n          event = _ref.event,\n          callback = _ref.callback;\n        receiver.removeEventListener(event, callback);\n      });\n      this.__subscriptions.forEach(function (subscription) {\n        (0,pubsub_js__WEBPACK_IMPORTED_MODULE_3__.unsubscribe)(subscription);\n      });\n      this.element[this.controllerName] = null;\n    }\n\n    /**\n     * The controller name in camel came\n     */\n  }, {\n    key: "camelCaseIdentifier",\n    get: function get() {\n      return lodash_camelcase__WEBPACK_IMPORTED_MODULE_4___default()(this.identifier);\n    }\n\n    /**\n     * The controller name formatted as {name}Controller.\n     */\n  }, {\n    key: "controllerName",\n    get: function get() {\n      return "".concat(this.camelCaseIdentifier, "Controller");\n    }\n\n    /**\n     * Executes a callback function after some delay.\\\n     * Same as window.setTimeout, but timeouts are cancelled automatically on disconnect.\n     * - Don\'t forget to call `super.disconnect()` if you override the disconnect hook.\n     *\n     * @param {function} callback\n     * @param {number} [delay=0]\n     */\n  }, {\n    key: "later",\n    value: function later(callback) {\n      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.__timeouts.push(setTimeout(callback, delay));\n    }\n\n    /**\n     * Clears all registered timeouts without waiting for controller disconnect.\n     */\n  }, {\n    key: "clearAllTimeouts",\n    value: function clearAllTimeouts() {\n      this.__timeouts.forEach(function (id) {\n        return clearTimeout(id);\n      });\n      this.__timeouts = [];\n    }\n\n    /**\n     * Binds the given callback to the receiver\'s event.\\\n     * Same as HTMLElement.addEventListener, but listeners are removed automatically on disconnect.\n     * - Don\'t forget to call `super.disconnect()` if you override the disconnect hook.\n     * - If events is a space-separated list of events, each events gets bound.\n     *\n     * @param {HTMLElement} receiver\n     * @param {string} events\n     * @param {function} callback\n     * @param {boolean | AddEventListenerOptions} [options]\n     */\n  }, {\n    key: "bind",\n    value: function bind(receiver, events, callback, options) {\n      var _this2 = this;\n      var listeners = events.split(\' \').map(function (event) {\n        var data = {\n          receiver: receiver,\n          event: event,\n          callback: callback\n        };\n        receiver.addEventListener(event, callback, options);\n        _this2.__events.push(data);\n        return data;\n      });\n      if (listeners.length === 1) {\n        return listeners[0];\n      }\n      return listeners;\n    }\n\n    /**\n     * Unbinds all listeners of the given event types.\n     *\n     * @param {string[]} events\n     */\n  }, {\n    key: "unbind",\n    value: function unbind() {\n      for (var _len2 = arguments.length, events = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        events[_key2] = arguments[_key2];\n      }\n      var matchingEvents = this.__events.filter(function (_ref2) {\n        var event = _ref2.event;\n        return events.includes(event);\n      });\n      var rest = this.__events.filter(function (_ref3) {\n        var event = _ref3.event;\n        return !events.includes(event);\n      });\n      matchingEvents.forEach(function (_ref4) {\n        var receiver = _ref4.receiver,\n          event = _ref4.event,\n          callback = _ref4.callback;\n        receiver.removeEventListener(event, callback);\n      });\n      this.__events = rest;\n    }\n\n    /**\n     * Unbinds all given listeners.\n     *\n     * @param {Object[]} listeners\n     */\n  }, {\n    key: "unbindListeners",\n    value: function unbindListeners() {\n      var _this3 = this;\n      for (var _len3 = arguments.length, listeners = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        listeners[_key3] = arguments[_key3];\n      }\n      listeners.forEach(function (listener) {\n        var receiver = listener.receiver,\n          event = listener.event,\n          callback = listener.callback;\n        receiver.removeEventListener(event, callback);\n        _this3.__events.pop(listener);\n      });\n    }\n\n    /**\n     * Publishes a PubSubJS event. Helper function.\n     *\n     * @param {string} message Message descriptor\n     * @param {*} data User data\n     */\n  }, {\n    key: "publish",\n    value: function publish(message, data) {\n      return (0,pubsub_js__WEBPACK_IMPORTED_MODULE_3__.publish)(message, data);\n    }\n\n    /**\n     * Subscribes to a PubSub event.\\\n     * Same as the native PubSubJS subscribe function, but unsubscribes automatically on disconnect.\n     * - Don\'t forget to call `super.disconnect()` if you override the disconnect hook.\n     *\n     * @param {string} message\n     * @param {SubscriptionCallback} func\n     */\n  }, {\n    key: "subscribe",\n    value: function subscribe(message, func) {\n      var subscription = (0,pubsub_js__WEBPACK_IMPORTED_MODULE_3__.subscribe)(message, func);\n      this.__subscriptions.push(pubsub_js__WEBPACK_IMPORTED_MODULE_3__.subscribe);\n      return subscription;\n    }\n\n    /**\n     * Unsubscribes from a PubSub event.\n     *\n     * @param {Subscription} subscription\n     */\n  }, {\n    key: "unsubscribe",\n    value: function unsubscribe(subscription) {\n      (0,pubsub_js__WEBPACK_IMPORTED_MODULE_3__.unsubscribe)(subscription);\n      this.__subscriptions = this.__subscriptions.filter(function (sub) {\n        return sub !== subscription;\n      });\n    }\n  }]);\n}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_2__/* .Controller */ .xI);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ApplicationController);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///879\n')},435:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ _default)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(231);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(683);\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(820);\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(792);\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(156);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(141);\n/* harmony import */ var _common_application_controller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(879);\n\n\n\n\n\n\nfunction _callSuper(t, o, e) {\n  return o = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)(o), (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)(t).constructor) : o.apply(t, e));\n}\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {\n    return !!t;\n  })();\n}\n\nvar _default = /*#__PURE__*/function (_ApplicationControlle) {\n  function _default() {\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A)(this, _default);\n    return _callSuper(this, _default, arguments);\n  }\n  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A)(_default, _ApplicationControlle);\n  return (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .A)(_default, [{\n    key: "ajaxURL",\n    get: function get() {\n      var _window;\n      return (_window = window) === null || _window === void 0 || (_window = _window.__mvpf) === null || _window === void 0 || (_window = _window.adminAjax) === null || _window === void 0 ? void 0 : _window.url;\n    }\n  }, {\n    key: "formData",\n    get: function get() {\n      return new FormData(this.element);\n    }\n  }, {\n    key: "formParams",\n    get: function get() {\n      return new URLSearchParams(this.formData);\n    }\n  }, {\n    key: "status",\n    get: function get() {\n      return this.data.get(\'status\');\n    },\n    set: function set(value) {\n      if (value) {\n        this.data.set(\'status\', value);\n      } else {\n        this.data["delete"](\'status\');\n      }\n    }\n  }, {\n    key: "setStatusMessage",\n    value: function setStatusMessage(status) {\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'\';\n      this.statusMessageTargets.forEach(function (target) {\n        var defaultSuccessMessage = target.dataset.defaultSuccessMessage;\n        target.dataset.status = status;\n        if (status === \'success\') {\n          target.innerHTML = defaultSuccessMessage || message;\n        } else {\n          target.innerHTML = message;\n        }\n      });\n    }\n  }, {\n    key: "dispatch",\n    value: function dispatch(name) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var event = new Event("mvpf:".concat(name));\n      event.detail = data;\n      this.element.dispatchEvent(event);\n    }\n  }, {\n    key: "sendForm",\n    value: function sendForm() {\n      var _this = this;\n      if (this.status !== \'sending\') {\n        this.setStatusMessage(\'sending\');\n        this.status = \'sending\';\n        fetch(this.ajaxURL, {\n          method: \'POST\',\n          credentials: \'same-origin\',\n          headers: new Headers({\n            \'Content-Type\': \'application/x-www-form-urlencoded\',\n            \'X-Mvpf-Method\': \'AJAX\'\n          }),\n          body: this.formParams\n        }).then(function (response) {\n          if (response.ok) {\n            return response.json();\n          }\n\n          // TODO: Translate this message\n          throw new Error(\'Error while submitting form\');\n        }).then(function (json) {\n          var success = json.success,\n            message = json.message;\n          _this.setStatusMessage(success ? \'success\' : \'error\', message);\n          _this.dispatch(\'ajax-submitted\', {\n            success: success,\n            message: message\n          });\n        })["catch"](function (error) {\n          _this.setStatusMessage(\'error\', error);\n          _this.dispatch(\'ajax-submitted\', {\n            success: false,\n            error: error\n          });\n        })["finally"](function () {\n          _this.status = null;\n        });\n      }\n    }\n  }, {\n    key: "handleSubmit",\n    value: function handleSubmit(event) {\n      event.preventDefault();\n      this.sendForm();\n    }\n  }]);\n}(_common_application_controller__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A);\n(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .A)(_default, "targets", [\'statusMessage\']);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///435\n')},36:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ _default)\n});\n\n;// ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\n\n;// ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js\n\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\n\n;// ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js\nfunction _iterableToArray(r) {\n  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);\n}\n\n;// ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\n\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if ("string" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\n\n;// ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js\nfunction _nonIterableSpread() {\n  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n\n;// ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\n\n\n\n\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(231);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(683);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js + 1 modules\nvar possibleConstructorReturn = __webpack_require__(820);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nvar getPrototypeOf = __webpack_require__(792);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js + 1 modules\nvar inherits = __webpack_require__(156);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(141);\n// EXTERNAL MODULE: ./js/common/application-controller.js\nvar application_controller = __webpack_require__(879);\n;// ./js/front/controllers/mashvp-forms/recaptcha-controller.js\n\n\n\n\n\n\n\nfunction _callSuper(t, o, e) {\n  return o = (0,getPrototypeOf/* default */.A)(o), (0,possibleConstructorReturn/* default */.A)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0,getPrototypeOf/* default */.A)(t).constructor) : o.apply(t, e));\n}\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {\n    return !!t;\n  })();\n}\nfunction _classPrivateFieldInitSpec(e, t, a) {\n  _checkPrivateRedeclaration(e, t), t.set(e, a);\n}\nfunction _checkPrivateRedeclaration(e, t) {\n  if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object");\n}\nfunction _classPrivateFieldSet(s, a, r) {\n  return s.set(_assertClassBrand(s, a), r), r;\n}\nfunction _classPrivateFieldGet(s, a) {\n  return s.get(_assertClassBrand(s, a));\n}\nfunction _assertClassBrand(e, t, n) {\n  if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n  throw new TypeError("Private element is not present on this object");\n}\n\nvar _submitButtons = /*#__PURE__*/new WeakMap();\nvar _default = /*#__PURE__*/function (_ApplicationControlle) {\n  function _default() {\n    var _this;\n    (0,classCallCheck/* default */.A)(this, _default);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, _default, [].concat(args));\n    _classPrivateFieldInitSpec(_this, _submitButtons, void 0);\n    return _this;\n  }\n  (0,inherits/* default */.A)(_default, _ApplicationControlle);\n  return (0,createClass/* default */.A)(_default, [{\n    key: "connect",\n    value: function connect() {\n      var _this2 = this;\n      window[this.callbackName] = function (token) {\n        _this2.callbackHandler(token);\n      };\n      this.recaptchaTarget.dataset.callback = this.callbackName;\n      this.submitButtons.forEach(function (button) {\n        _this2.bind(button, \'click\', function (event) {\n          return _this2.handleBeforeSubmit(event);\n        });\n      });\n      this.bind(this.element, \'mvpf:ajax-submitted\', function () {\n        var _window = window,\n          grecaptcha = _window.grecaptcha;\n        delete _this2.element.dataset.token;\n        if (grecaptcha) {\n          grecaptcha.reset();\n        }\n      });\n    }\n  }, {\n    key: "formID",\n    get: function get() {\n      return this.element.dataset.formId;\n    }\n  }, {\n    key: "callbackName",\n    get: function get() {\n      return "mvpf__recaptcha_callback__".concat(this.formID);\n    }\n  }, {\n    key: "submitButtons",\n    get: function get() {\n      return _classPrivateFieldGet(_submitButtons, this) || _classPrivateFieldSet(_submitButtons, this, _toConsumableArray(this.element.querySelectorAll(\'[type="submit"]\')));\n    }\n  }, {\n    key: "handleBeforeSubmit",\n    value: function handleBeforeSubmit(event) {\n      var _window2 = window,\n        grecaptcha = _window2.grecaptcha;\n      if (grecaptcha && !this.element.dataset.token) {\n        event.preventDefault();\n        grecaptcha.execute();\n      }\n    }\n  }, {\n    key: "callbackHandler",\n    value: function callbackHandler(token) {\n      this.element.dataset.token = token;\n\n      // Manually resubmit\n      if (this.submitButtons && this.submitButtons.length > 0) {\n        this.submitButtons[this.submitButtons.length - 1].click();\n      }\n    }\n  }]);\n}(application_controller/* default */.A);\n(0,defineProperty/* default */.A)(_default, "targets", [\'recaptcha\']);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///36\n')},694:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/regenerator-runtime/runtime.js\nvar runtime = __webpack_require__(30);\n// EXTERNAL MODULE: ./node_modules/@hotwired/stimulus/dist/stimulus.js\nvar stimulus = __webpack_require__(761);\n;// ./node_modules/@hotwired/stimulus-webpack-helpers/dist/stimulus-webpack-helpers.js\n/*\nStimulus Webpack Helpers 1.0.0\nCopyright © 2021 Basecamp, LLC\n */\nfunction definitionsFromContext(context) {\n  return context.keys().map(function (key) {\n    return definitionForModuleWithContextAndKey(context, key);\n  }).filter(function (value) {\n    return value;\n  });\n}\nfunction definitionForModuleWithContextAndKey(context, key) {\n  var identifier = identifierForContextKey(key);\n  if (identifier) {\n    return definitionForModuleAndIdentifier(context(key), identifier);\n  }\n}\nfunction definitionForModuleAndIdentifier(module, identifier) {\n  var controllerConstructor = module["default"];\n  if (typeof controllerConstructor == "function") {\n    return {\n      identifier: identifier,\n      controllerConstructor: controllerConstructor\n    };\n  }\n}\nfunction identifierForContextKey(key) {\n  var logicalName = (key.match(/^(?:\\.\\/)?(.+)(?:[_-]controller\\..+?)$/) || [])[1];\n  if (logicalName) {\n    return logicalName.replace(/_/g, "-").replace(/\\//g, "--");\n  }\n}\n\n;// ./js/front/index.js\n/* eslint-disable no-undef */\n\n\n\n\nvar initStimulus = function initStimulus() {\n  var application = stimulus/* Application */.lg.start();\n  var context = __webpack_require__(227);\n  application.load(definitionsFromContext(context));\n};\ninitStimulus();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0Esc0JBQXNCQSxDQUFDQyxPQUFPLEVBQUU7RUFDckMsT0FBT0EsT0FBTyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUNoQkMsR0FBRyxDQUFDLFVBQUNDLEdBQUc7SUFBQSxPQUFLQyxvQ0FBb0MsQ0FBQ0osT0FBTyxFQUFFRyxHQUFHLENBQUM7RUFBQSxFQUFDLENBQ2hFRSxNQUFNLENBQUMsVUFBQ0MsS0FBSztJQUFBLE9BQUtBLEtBQUs7RUFBQSxFQUFDO0FBQ2pDO0FBQ0EsU0FBU0Ysb0NBQW9DQSxDQUFDSixPQUFPLEVBQUVHLEdBQUcsRUFBRTtFQUN4RCxJQUFNSSxVQUFVLEdBQUdDLHVCQUF1QixDQUFDTCxHQUFHLENBQUM7RUFDL0MsSUFBSUksVUFBVSxFQUFFO0lBQ1osT0FBT0UsZ0NBQWdDLENBQUNULE9BQU8sQ0FBQ0csR0FBRyxDQUFDLEVBQUVJLFVBQVUsQ0FBQztFQUNyRTtBQUNKO0FBQ0EsU0FBU0UsZ0NBQWdDQSxDQUFDQyxNQUFNLEVBQUVILFVBQVUsRUFBRTtFQUMxRCxJQUFNSSxxQkFBcUIsR0FBR0QsTUFBTSxXQUFRO0VBQzVDLElBQUksT0FBT0MscUJBQXFCLElBQUksVUFBVSxFQUFFO0lBQzVDLE9BQU87TUFBRUosVUFBVSxFQUFWQSxVQUFVO01BQUVJLHFCQUFxQixFQUFyQkE7SUFBc0IsQ0FBQztFQUNoRDtBQUNKO0FBQ0EsU0FBU0gsdUJBQXVCQSxDQUFDTCxHQUFHLEVBQUU7RUFDbEMsSUFBTVMsV0FBVyxHQUFHLENBQUNULEdBQUcsQ0FBQ1UsS0FBSyxDQUFDLHdDQUF3QyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztFQUNsRixJQUFJRCxXQUFXLEVBQUU7SUFDYixPQUFPQSxXQUFXLENBQUNFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUNBLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDO0VBQzlEO0FBQ0o7OztBQzFCQTs7QUFFNkI7QUFFb0I7QUFDMkI7QUFFNUUsSUFBTUUsWUFBWSxHQUFHLFNBQWZBLFlBQVlBLENBQUEsRUFBUztFQUN6QixJQUFNQyxXQUFXLEdBQUdGLDRCQUFXLENBQUNHLEtBQUssQ0FBQyxDQUFDO0VBRXZDLElBQU1sQixPQUFPLEdBQUdtQix3QkFJZjtFQUVERixXQUFXLENBQUNHLElBQUksQ0FBQ3JCLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBRURnQixZQUFZLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL21hc2h2cC1mb3Jtcy8uL25vZGVfbW9kdWxlcy9AaG90d2lyZWQvc3RpbXVsdXMtd2VicGFjay1oZWxwZXJzL2Rpc3Qvc3RpbXVsdXMtd2VicGFjay1oZWxwZXJzLmpzP2UzNDUiLCJ3ZWJwYWNrOi8vbWFzaHZwLWZvcm1zLy4vanMvZnJvbnQvaW5kZXguanM/YzE4MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuU3RpbXVsdXMgV2VicGFjayBIZWxwZXJzIDEuMC4wXG5Db3B5cmlnaHQgwqkgMjAyMSBCYXNlY2FtcCwgTExDXG4gKi9cbmZ1bmN0aW9uIGRlZmluaXRpb25zRnJvbUNvbnRleHQoY29udGV4dCkge1xuICAgIHJldHVybiBjb250ZXh0LmtleXMoKVxuICAgICAgICAubWFwKChrZXkpID0+IGRlZmluaXRpb25Gb3JNb2R1bGVXaXRoQ29udGV4dEFuZEtleShjb250ZXh0LCBrZXkpKVxuICAgICAgICAuZmlsdGVyKCh2YWx1ZSkgPT4gdmFsdWUpO1xufVxuZnVuY3Rpb24gZGVmaW5pdGlvbkZvck1vZHVsZVdpdGhDb250ZXh0QW5kS2V5KGNvbnRleHQsIGtleSkge1xuICAgIGNvbnN0IGlkZW50aWZpZXIgPSBpZGVudGlmaWVyRm9yQ29udGV4dEtleShrZXkpO1xuICAgIGlmIChpZGVudGlmaWVyKSB7XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uRm9yTW9kdWxlQW5kSWRlbnRpZmllcihjb250ZXh0KGtleSksIGlkZW50aWZpZXIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlZmluaXRpb25Gb3JNb2R1bGVBbmRJZGVudGlmaWVyKG1vZHVsZSwgaWRlbnRpZmllcikge1xuICAgIGNvbnN0IGNvbnRyb2xsZXJDb25zdHJ1Y3RvciA9IG1vZHVsZS5kZWZhdWx0O1xuICAgIGlmICh0eXBlb2YgY29udHJvbGxlckNvbnN0cnVjdG9yID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4geyBpZGVudGlmaWVyLCBjb250cm9sbGVyQ29uc3RydWN0b3IgfTtcbiAgICB9XG59XG5mdW5jdGlvbiBpZGVudGlmaWVyRm9yQ29udGV4dEtleShrZXkpIHtcbiAgICBjb25zdCBsb2dpY2FsTmFtZSA9IChrZXkubWF0Y2goL14oPzpcXC5cXC8pPyguKykoPzpbXy1dY29udHJvbGxlclxcLi4rPykkLykgfHwgW10pWzFdO1xuICAgIGlmIChsb2dpY2FsTmFtZSkge1xuICAgICAgICByZXR1cm4gbG9naWNhbE5hbWUucmVwbGFjZSgvXy9nLCBcIi1cIikucmVwbGFjZSgvXFwvL2csIFwiLS1cIik7XG4gICAgfVxufVxuXG5leHBvcnQgeyBkZWZpbml0aW9uRm9yTW9kdWxlQW5kSWRlbnRpZmllciwgZGVmaW5pdGlvbkZvck1vZHVsZVdpdGhDb250ZXh0QW5kS2V5LCBkZWZpbml0aW9uc0Zyb21Db250ZXh0LCBpZGVudGlmaWVyRm9yQ29udGV4dEtleSB9O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cblxuaW1wb3J0ICdyZWdlbmVyYXRvci1ydW50aW1lJztcblxuaW1wb3J0IHsgQXBwbGljYXRpb24gfSBmcm9tICdAaG90d2lyZWQvc3RpbXVsdXMnO1xuaW1wb3J0IHsgZGVmaW5pdGlvbnNGcm9tQ29udGV4dCB9IGZyb20gJ0Bob3R3aXJlZC9zdGltdWx1cy13ZWJwYWNrLWhlbHBlcnMnO1xuXG5jb25zdCBpbml0U3RpbXVsdXMgPSAoKSA9PiB7XG4gIGNvbnN0IGFwcGxpY2F0aW9uID0gQXBwbGljYXRpb24uc3RhcnQoKTtcblxuICBjb25zdCBjb250ZXh0ID0gcmVxdWlyZS5jb250ZXh0KFxuICAgICcuL2NvbnRyb2xsZXJzJyxcbiAgICB0cnVlLFxuICAgIC8oPzwhXFwuZGlzYWJsZWQpXFwuanMkL1xuICApO1xuXG4gIGFwcGxpY2F0aW9uLmxvYWQoZGVmaW5pdGlvbnNGcm9tQ29udGV4dChjb250ZXh0KSk7XG59O1xuXG5pbml0U3RpbXVsdXMoKTtcbiJdLCJuYW1lcyI6WyJkZWZpbml0aW9uc0Zyb21Db250ZXh0IiwiY29udGV4dCIsImtleXMiLCJtYXAiLCJrZXkiLCJkZWZpbml0aW9uRm9yTW9kdWxlV2l0aENvbnRleHRBbmRLZXkiLCJmaWx0ZXIiLCJ2YWx1ZSIsImlkZW50aWZpZXIiLCJpZGVudGlmaWVyRm9yQ29udGV4dEtleSIsImRlZmluaXRpb25Gb3JNb2R1bGVBbmRJZGVudGlmaWVyIiwibW9kdWxlIiwiY29udHJvbGxlckNvbnN0cnVjdG9yIiwibG9naWNhbE5hbWUiLCJtYXRjaCIsInJlcGxhY2UiLCJBcHBsaWNhdGlvbiIsImluaXRTdGltdWx1cyIsImFwcGxpY2F0aW9uIiwic3RhcnQiLCJyZXF1aXJlIiwibG9hZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///694\n')},814:(module,__unused_webpack_exports,__webpack_require__)=>{eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n/** Used to match Latin Unicode letters (excluding mathematical operators). */\nvar reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = \"\\\\ud800-\\\\udfff\",\n  rsComboMarksRange = \"\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23\",\n  rsComboSymbolsRange = \"\\\\u20d0-\\\\u20f0\",\n  rsDingbatRange = \"\\\\u2700-\\\\u27bf\",\n  rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n  rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n  rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n  rsPunctuationRange = \"\\\\u2000-\\\\u206f\",\n  rsSpaceRange = \" \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000\",\n  rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n  rsVarRange = \"\\\\ufe0e\\\\ufe0f\",\n  rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\",\n  rsAstral = '[' + rsAstralRange + ']',\n  rsBreak = '[' + rsBreakRange + ']',\n  rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n  rsDigits = '\\\\d+',\n  rsDingbat = '[' + rsDingbatRange + ']',\n  rsLower = '[' + rsLowerRange + ']',\n  rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n  rsFitz = \"\\\\ud83c[\\\\udffb-\\\\udfff]\",\n  rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n  rsNonAstral = '[^' + rsAstralRange + ']',\n  rsRegional = \"(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}\",\n  rsSurrPair = \"[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]\",\n  rsUpper = '[' + rsUpperRange + ']',\n  rsZWJ = \"\\\\u200d\";\n\n/** Used to compose unicode regexes. */\nvar rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',\n  rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',\n  rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n  rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n  reOptMod = rsModifier + '?',\n  rsOptVar = '[' + rsVarRange + ']?',\n  rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n  rsSeq = rsOptVar + reOptMod + rsOptJoin,\n  rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n  rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match apostrophes. */\nvar reApos = RegExp(rsApos, 'g');\n\n/**\n * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n */\nvar reComboMark = RegExp(rsCombo, 'g');\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')', rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr, rsUpper + '+' + rsOptUpperContr, rsDigits, rsEmoji].join('|'), 'g');\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n\n/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n/** Used to map Latin Unicode letters to basic Latin letters. */\nvar deburredLetters = {\n  // Latin-1 Supplement block.\n  '\\xc0': 'A',\n  '\\xc1': 'A',\n  '\\xc2': 'A',\n  '\\xc3': 'A',\n  '\\xc4': 'A',\n  '\\xc5': 'A',\n  '\\xe0': 'a',\n  '\\xe1': 'a',\n  '\\xe2': 'a',\n  '\\xe3': 'a',\n  '\\xe4': 'a',\n  '\\xe5': 'a',\n  '\\xc7': 'C',\n  '\\xe7': 'c',\n  '\\xd0': 'D',\n  '\\xf0': 'd',\n  '\\xc8': 'E',\n  '\\xc9': 'E',\n  '\\xca': 'E',\n  '\\xcb': 'E',\n  '\\xe8': 'e',\n  '\\xe9': 'e',\n  '\\xea': 'e',\n  '\\xeb': 'e',\n  '\\xcc': 'I',\n  '\\xcd': 'I',\n  '\\xce': 'I',\n  '\\xcf': 'I',\n  '\\xec': 'i',\n  '\\xed': 'i',\n  '\\xee': 'i',\n  '\\xef': 'i',\n  '\\xd1': 'N',\n  '\\xf1': 'n',\n  '\\xd2': 'O',\n  '\\xd3': 'O',\n  '\\xd4': 'O',\n  '\\xd5': 'O',\n  '\\xd6': 'O',\n  '\\xd8': 'O',\n  '\\xf2': 'o',\n  '\\xf3': 'o',\n  '\\xf4': 'o',\n  '\\xf5': 'o',\n  '\\xf6': 'o',\n  '\\xf8': 'o',\n  '\\xd9': 'U',\n  '\\xda': 'U',\n  '\\xdb': 'U',\n  '\\xdc': 'U',\n  '\\xf9': 'u',\n  '\\xfa': 'u',\n  '\\xfb': 'u',\n  '\\xfc': 'u',\n  '\\xdd': 'Y',\n  '\\xfd': 'y',\n  '\\xff': 'y',\n  '\\xc6': 'Ae',\n  '\\xe6': 'ae',\n  '\\xde': 'Th',\n  '\\xfe': 'th',\n  '\\xdf': 'ss',\n  // Latin Extended-A block.\n  \"\\u0100\": 'A',\n  \"\\u0102\": 'A',\n  \"\\u0104\": 'A',\n  \"\\u0101\": 'a',\n  \"\\u0103\": 'a',\n  \"\\u0105\": 'a',\n  \"\\u0106\": 'C',\n  \"\\u0108\": 'C',\n  \"\\u010A\": 'C',\n  \"\\u010C\": 'C',\n  \"\\u0107\": 'c',\n  \"\\u0109\": 'c',\n  \"\\u010B\": 'c',\n  \"\\u010D\": 'c',\n  \"\\u010E\": 'D',\n  \"\\u0110\": 'D',\n  \"\\u010F\": 'd',\n  \"\\u0111\": 'd',\n  \"\\u0112\": 'E',\n  \"\\u0114\": 'E',\n  \"\\u0116\": 'E',\n  \"\\u0118\": 'E',\n  \"\\u011A\": 'E',\n  \"\\u0113\": 'e',\n  \"\\u0115\": 'e',\n  \"\\u0117\": 'e',\n  \"\\u0119\": 'e',\n  \"\\u011B\": 'e',\n  \"\\u011C\": 'G',\n  \"\\u011E\": 'G',\n  \"\\u0120\": 'G',\n  \"\\u0122\": 'G',\n  \"\\u011D\": 'g',\n  \"\\u011F\": 'g',\n  \"\\u0121\": 'g',\n  \"\\u0123\": 'g',\n  \"\\u0124\": 'H',\n  \"\\u0126\": 'H',\n  \"\\u0125\": 'h',\n  \"\\u0127\": 'h',\n  \"\\u0128\": 'I',\n  \"\\u012A\": 'I',\n  \"\\u012C\": 'I',\n  \"\\u012E\": 'I',\n  \"\\u0130\": 'I',\n  \"\\u0129\": 'i',\n  \"\\u012B\": 'i',\n  \"\\u012D\": 'i',\n  \"\\u012F\": 'i',\n  \"\\u0131\": 'i',\n  \"\\u0134\": 'J',\n  \"\\u0135\": 'j',\n  \"\\u0136\": 'K',\n  \"\\u0137\": 'k',\n  \"\\u0138\": 'k',\n  \"\\u0139\": 'L',\n  \"\\u013B\": 'L',\n  \"\\u013D\": 'L',\n  \"\\u013F\": 'L',\n  \"\\u0141\": 'L',\n  \"\\u013A\": 'l',\n  \"\\u013C\": 'l',\n  \"\\u013E\": 'l',\n  \"\\u0140\": 'l',\n  \"\\u0142\": 'l',\n  \"\\u0143\": 'N',\n  \"\\u0145\": 'N',\n  \"\\u0147\": 'N',\n  \"\\u014A\": 'N',\n  \"\\u0144\": 'n',\n  \"\\u0146\": 'n',\n  \"\\u0148\": 'n',\n  \"\\u014B\": 'n',\n  \"\\u014C\": 'O',\n  \"\\u014E\": 'O',\n  \"\\u0150\": 'O',\n  \"\\u014D\": 'o',\n  \"\\u014F\": 'o',\n  \"\\u0151\": 'o',\n  \"\\u0154\": 'R',\n  \"\\u0156\": 'R',\n  \"\\u0158\": 'R',\n  \"\\u0155\": 'r',\n  \"\\u0157\": 'r',\n  \"\\u0159\": 'r',\n  \"\\u015A\": 'S',\n  \"\\u015C\": 'S',\n  \"\\u015E\": 'S',\n  \"\\u0160\": 'S',\n  \"\\u015B\": 's',\n  \"\\u015D\": 's',\n  \"\\u015F\": 's',\n  \"\\u0161\": 's',\n  \"\\u0162\": 'T',\n  \"\\u0164\": 'T',\n  \"\\u0166\": 'T',\n  \"\\u0163\": 't',\n  \"\\u0165\": 't',\n  \"\\u0167\": 't',\n  \"\\u0168\": 'U',\n  \"\\u016A\": 'U',\n  \"\\u016C\": 'U',\n  \"\\u016E\": 'U',\n  \"\\u0170\": 'U',\n  \"\\u0172\": 'U',\n  \"\\u0169\": 'u',\n  \"\\u016B\": 'u',\n  \"\\u016D\": 'u',\n  \"\\u016F\": 'u',\n  \"\\u0171\": 'u',\n  \"\\u0173\": 'u',\n  \"\\u0174\": 'W',\n  \"\\u0175\": 'w',\n  \"\\u0176\": 'Y',\n  \"\\u0177\": 'y',\n  \"\\u0178\": 'Y',\n  \"\\u0179\": 'Z',\n  \"\\u017B\": 'Z',\n  \"\\u017D\": 'Z',\n  \"\\u017A\": 'z',\n  \"\\u017C\": 'z',\n  \"\\u017E\": 'z',\n  \"\\u0132\": 'IJ',\n  \"\\u0133\": 'ij',\n  \"\\u0152\": 'Oe',\n  \"\\u0153\": 'oe',\n  \"\\u0149\": \"'n\",\n  \"\\u017F\": 'ss'\n};\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = (typeof __webpack_require__.g === \"undefined\" ? \"undefined\" : _typeof(__webpack_require__.g)) == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;\n\n/** Detect free variable `self`. */\nvar freeSelf = (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n    length = array ? array.length : 0;\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\n/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function (key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n * letters to basic Latin letters.\n *\n * @private\n * @param {string} letter The matched letter to deburr.\n * @returns {string} Returns the deburred letter.\n */\nvar deburrLetter = basePropertyOf(deburredLetters);\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);\n}\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar _Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = _Symbol ? _Symbol.prototype : undefined,\n  symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n    length = array.length;\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : end - start >>> 0;\n  start >>>= 0;\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return !start && end >= length ? array : baseSlice(array, start, end);\n}\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function (string) {\n    string = toString(string);\n    var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;\n    var chr = strSymbols ? strSymbols[0] : string.charAt(0);\n    var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);\n    return chr[methodName]() + trailing;\n  };\n}\n\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function (string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && _typeof(value) == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return _typeof(value) == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the camel cased string.\n * @example\n *\n * _.camelCase('Foo Bar');\n * // => 'fooBar'\n *\n * _.camelCase('--foo-bar--');\n * // => 'fooBar'\n *\n * _.camelCase('__FOO_BAR__');\n * // => 'fooBar'\n */\nvar camelCase = createCompounder(function (result, word, index) {\n  word = word.toLowerCase();\n  return result + (index ? capitalize(word) : word);\n});\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\n/**\n * Deburrs `string` by converting\n * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n * letters to basic Latin letters and removing\n * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to deburr.\n * @returns {string} Returns the deburred string.\n * @example\n *\n * _.deburr('déjà vu');\n * // => 'deja vu'\n */\nfunction deburr(string) {\n  string = toString(string);\n  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n}\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\nmodule.exports = camelCase;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///814\n")},366:function(module,exports,__webpack_require__){eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/**\n * Copyright (c) 2010,2011,2012,2013,2014 Morgan Roderick http://roderick.dk\n * License: MIT - http://mrgnrdrck.mit-license.org\n *\n * https://github.com/mroderick/PubSubJS\n */\n\n(function (root, factory) {\n  'use strict';\n\n  var PubSub = {};\n  if (root.PubSub) {\n    PubSub = root.PubSub;\n    console.warn(\"PubSub already loaded, using existing version\");\n  } else {\n    root.PubSub = PubSub;\n    factory(PubSub);\n  }\n  // CommonJS and Node.js module support\n  if (( false ? 0 : _typeof(exports)) === 'object') {\n    if (module !== undefined && module.exports) {\n      exports = module.exports = PubSub; // Node.js specific `module.exports`\n    }\n    exports.PubSub = PubSub; // CommonJS module 1.1.1 spec\n    module.exports = exports = PubSub; // CommonJS\n  }\n  // AMD support\n  /* eslint-disable no-undef */else if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return PubSub;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    /* eslint-enable no-undef */\n  }\n})((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === 'object' && window || this, function (PubSub) {\n  'use strict';\n\n  var messages = {},\n    lastUid = -1,\n    ALL_SUBSCRIBING_MSG = '*';\n  function hasKeys(obj) {\n    var key;\n    for (key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Returns a function that throws the passed exception, for use as argument for setTimeout\n   * @alias throwException\n   * @function\n   * @param { Object } ex An Error object\n   */\n  function throwException(ex) {\n    return function reThrowException() {\n      throw ex;\n    };\n  }\n  function callSubscriberWithDelayedExceptions(subscriber, message, data) {\n    try {\n      subscriber(message, data);\n    } catch (ex) {\n      setTimeout(throwException(ex), 0);\n    }\n  }\n  function callSubscriberWithImmediateExceptions(subscriber, message, data) {\n    subscriber(message, data);\n  }\n  function deliverMessage(originalMessage, matchedMessage, data, immediateExceptions) {\n    var subscribers = messages[matchedMessage],\n      callSubscriber = immediateExceptions ? callSubscriberWithImmediateExceptions : callSubscriberWithDelayedExceptions,\n      s;\n    if (!Object.prototype.hasOwnProperty.call(messages, matchedMessage)) {\n      return;\n    }\n    for (s in subscribers) {\n      if (Object.prototype.hasOwnProperty.call(subscribers, s)) {\n        callSubscriber(subscribers[s], originalMessage, data);\n      }\n    }\n  }\n  function createDeliveryFunction(message, data, immediateExceptions) {\n    return function deliverNamespaced() {\n      var topic = String(message),\n        position = topic.lastIndexOf('.');\n\n      // deliver the message as it is now\n      deliverMessage(message, message, data, immediateExceptions);\n\n      // trim the hierarchy and deliver message to each level\n      while (position !== -1) {\n        topic = topic.substr(0, position);\n        position = topic.lastIndexOf('.');\n        deliverMessage(message, topic, data, immediateExceptions);\n      }\n      deliverMessage(message, ALL_SUBSCRIBING_MSG, data, immediateExceptions);\n    };\n  }\n  function hasDirectSubscribersFor(message) {\n    var topic = String(message),\n      found = Boolean(Object.prototype.hasOwnProperty.call(messages, topic) && hasKeys(messages[topic]));\n    return found;\n  }\n  function messageHasSubscribers(message) {\n    var topic = String(message),\n      found = hasDirectSubscribersFor(topic) || hasDirectSubscribersFor(ALL_SUBSCRIBING_MSG),\n      position = topic.lastIndexOf('.');\n    while (!found && position !== -1) {\n      topic = topic.substr(0, position);\n      position = topic.lastIndexOf('.');\n      found = hasDirectSubscribersFor(topic);\n    }\n    return found;\n  }\n  function publish(message, data, sync, immediateExceptions) {\n    message = _typeof(message) === 'symbol' ? message.toString() : message;\n    var deliver = createDeliveryFunction(message, data, immediateExceptions),\n      hasSubscribers = messageHasSubscribers(message);\n    if (!hasSubscribers) {\n      return false;\n    }\n    if (sync === true) {\n      deliver();\n    } else {\n      setTimeout(deliver, 0);\n    }\n    return true;\n  }\n\n  /**\n   * Publishes the message, passing the data to it's subscribers\n   * @function\n   * @alias publish\n   * @param { String } message The message to publish\n   * @param {} data The data to pass to subscribers\n   * @return { Boolean }\n   */\n  PubSub.publish = function (message, data) {\n    return publish(message, data, false, PubSub.immediateExceptions);\n  };\n\n  /**\n   * Publishes the message synchronously, passing the data to it's subscribers\n   * @function\n   * @alias publishSync\n   * @param { String } message The message to publish\n   * @param {} data The data to pass to subscribers\n   * @return { Boolean }\n   */\n  PubSub.publishSync = function (message, data) {\n    return publish(message, data, true, PubSub.immediateExceptions);\n  };\n\n  /**\n   * Subscribes the passed function to the passed message. Every returned token is unique and should be stored if you need to unsubscribe\n   * @function\n   * @alias subscribe\n   * @param { String } message The message to subscribe to\n   * @param { Function } func The function to call when a new message is published\n   * @return { String }\n   */\n  PubSub.subscribe = function (message, func) {\n    if (typeof func !== 'function') {\n      return false;\n    }\n    message = _typeof(message) === 'symbol' ? message.toString() : message;\n\n    // message is not registered yet\n    if (!Object.prototype.hasOwnProperty.call(messages, message)) {\n      messages[message] = {};\n    }\n\n    // forcing token as String, to allow for future expansions without breaking usage\n    // and allow for easy use as key names for the 'messages' object\n    var token = 'uid_' + String(++lastUid);\n    messages[message][token] = func;\n\n    // return token for unsubscribing\n    return token;\n  };\n  PubSub.subscribeAll = function (func) {\n    return PubSub.subscribe(ALL_SUBSCRIBING_MSG, func);\n  };\n\n  /**\n   * Subscribes the passed function to the passed message once\n   * @function\n   * @alias subscribeOnce\n   * @param { String } message The message to subscribe to\n   * @param { Function } func The function to call when a new message is published\n   * @return { PubSub }\n   */\n  PubSub.subscribeOnce = function (message, func) {\n    var token = PubSub.subscribe(message, function () {\n      // before func apply, unsubscribe message\n      PubSub.unsubscribe(token);\n      func.apply(this, arguments);\n    });\n    return PubSub;\n  };\n\n  /**\n   * Clears all subscriptions\n   * @function\n   * @public\n   * @alias clearAllSubscriptions\n   */\n  PubSub.clearAllSubscriptions = function clearAllSubscriptions() {\n    messages = {};\n  };\n\n  /**\n   * Clear subscriptions by the topic\n   * @function\n   * @public\n   * @alias clearAllSubscriptions\n   * @return { int }\n   */\n  PubSub.clearSubscriptions = function clearSubscriptions(topic) {\n    var m;\n    for (m in messages) {\n      if (Object.prototype.hasOwnProperty.call(messages, m) && m.indexOf(topic) === 0) {\n        delete messages[m];\n      }\n    }\n  };\n\n  /**\n     Count subscriptions by the topic\n   * @function\n   * @public\n   * @alias countSubscriptions\n   * @return { Array }\n  */\n  PubSub.countSubscriptions = function countSubscriptions(topic) {\n    var m;\n    // eslint-disable-next-line no-unused-vars\n    var token;\n    var count = 0;\n    for (m in messages) {\n      if (Object.prototype.hasOwnProperty.call(messages, m) && m.indexOf(topic) === 0) {\n        for (token in messages[m]) {\n          count++;\n        }\n        break;\n      }\n    }\n    return count;\n  };\n\n  /**\n     Gets subscriptions by the topic\n   * @function\n   * @public\n   * @alias getSubscriptions\n  */\n  PubSub.getSubscriptions = function getSubscriptions(topic) {\n    var m;\n    var list = [];\n    for (m in messages) {\n      if (Object.prototype.hasOwnProperty.call(messages, m) && m.indexOf(topic) === 0) {\n        list.push(m);\n      }\n    }\n    return list;\n  };\n\n  /**\n   * Removes subscriptions\n   *\n   * - When passed a token, removes a specific subscription.\n   *\n  * - When passed a function, removes all subscriptions for that function\n   *\n  * - When passed a topic, removes all subscriptions for that topic (hierarchy)\n   * @function\n   * @public\n   * @alias subscribeOnce\n   * @param { String | Function } value A token, function or topic to unsubscribe from\n   * @example // Unsubscribing with a token\n   * var token = PubSub.subscribe('mytopic', myFunc);\n   * PubSub.unsubscribe(token);\n   * @example // Unsubscribing with a function\n   * PubSub.unsubscribe(myFunc);\n   * @example // Unsubscribing from a topic\n   * PubSub.unsubscribe('mytopic');\n   */\n  PubSub.unsubscribe = function (value) {\n    var descendantTopicExists = function descendantTopicExists(topic) {\n        var m;\n        for (m in messages) {\n          if (Object.prototype.hasOwnProperty.call(messages, m) && m.indexOf(topic) === 0) {\n            // a descendant of the topic exists:\n            return true;\n          }\n        }\n        return false;\n      },\n      isTopic = typeof value === 'string' && (Object.prototype.hasOwnProperty.call(messages, value) || descendantTopicExists(value)),\n      isToken = !isTopic && typeof value === 'string',\n      isFunction = typeof value === 'function',\n      result = false,\n      m,\n      message,\n      t;\n    if (isTopic) {\n      PubSub.clearSubscriptions(value);\n      return;\n    }\n    for (m in messages) {\n      if (Object.prototype.hasOwnProperty.call(messages, m)) {\n        message = messages[m];\n        if (isToken && message[value]) {\n          delete message[value];\n          result = value;\n          // tokens are unique, so we can just stop here\n          break;\n        }\n        if (isFunction) {\n          for (t in message) {\n            if (Object.prototype.hasOwnProperty.call(message, t) && message[t] === value) {\n              delete message[t];\n              result = true;\n            }\n          }\n        }\n      }\n    }\n    return result;\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///366\n")},30:(module,__unused_webpack_exports,__webpack_require__)=>{eval('/* module decorator */ module = __webpack_require__.nmd(module);\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = function (exports) {\n  "use strict";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var defineProperty = Object.defineProperty || function (obj, key, desc) {\n    obj[key] = desc.value;\n  };\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === "function" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || "@@iterator";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";\n  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, "");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    defineProperty(generator, "_invoke", {\n      value: makeInvokeMethod(innerFn, self, context)\n    });\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there\'s no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don\'t have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: "normal",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: "throw",\n        arg: err\n      };\n    }\n  }\n  var GenStateSuspendedStart = "suspendedStart";\n  var GenStateSuspendedYield = "suspendedYield";\n  var GenStateExecuting = "executing";\n  var GenStateCompleted = "completed";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don\'t natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  defineProperty(Gp, "constructor", {\n    value: GeneratorFunctionPrototype,\n    configurable: true\n  });\n  defineProperty(GeneratorFunctionPrototype, "constructor", {\n    value: GeneratorFunction,\n    configurable: true\n  });\n  GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    ["next", "throw", "return"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n  exports.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === "function" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction ||\n    // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;\n  };\n  exports.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, "GeneratorFunction");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, "__await")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === "throw") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {\n          return PromiseImpl.resolve(value.__await).then(function (value) {\n            invoke("next", value, resolve, reject);\n          }, function (err) {\n            invoke("throw", err, resolve, reject);\n          });\n        }\n        return PromiseImpl.resolve(value).then(function (unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke("throw", error, resolve, reject);\n        });\n      }\n    }\n    var previousPromise;\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n      return previousPromise =\n      // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,\n      // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    defineProperty(this, "_invoke", {\n      value: enqueue\n    });\n  }\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error("Generator is already running");\n      }\n      if (state === GenStateCompleted) {\n        if (method === "throw") {\n          throw arg;\n        }\n\n        // Be forgiving, per GeneratorResume behavior specified since ES2015:\n        // ES2015 spec, step 3: https://262.ecma-international.org/6.0/#sec-generatorresume\n        // Latest spec, step 2: https://tc39.es/ecma262/#sec-generatorresume\n        return doneResult();\n      }\n      context.method = method;\n      context.arg = arg;\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n        if (context.method === "next") {\n          // Setting context._sent for legacy support of Babel\'s\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n        } else if (context.method === "throw") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n          context.dispatchException(context.arg);\n        } else if (context.method === "return") {\n          context.abrupt("return", context.arg);\n        }\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === "normal") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === "throw") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = "throw";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method;\n    var method = delegate.iterator[methodName];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method, or a missing .next method, always terminate the\n      // yield* loop.\n      context.delegate = null;\n\n      // Note: ["return"] must be used for ES3 parsing compatibility.\n      if (methodName === "throw" && delegate.iterator["return"]) {\n        // If the delegate iterator has a return method, give it a\n        // chance to clean up.\n        context.method = "return";\n        context.arg = undefined;\n        maybeInvokeDelegate(delegate, context);\n        if (context.method === "throw") {\n          // If maybeInvokeDelegate(context) changed context.method from\n          // "return" to "throw", let that override the TypeError below.\n          return ContinueSentinel;\n        }\n      }\n      if (methodName !== "return") {\n        context.method = "throw";\n        context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method");\n      }\n      return ContinueSentinel;\n    }\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (record.type === "throw") {\n      context.method = "throw";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n    var info = record.arg;\n    if (!info) {\n      context.method = "throw";\n      context.arg = new TypeError("iterator result is not an object");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was "throw" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was "next", forget context.arg since it has been\n      // "consumed" by the delegate iterator. If context.method was\n      // "return", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== "return") {\n        context.method = "next";\n        context.arg = undefined;\n      }\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n  define(Gp, toStringTagSymbol, "Generator");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers\' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn\'t happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function () {\n    return this;\n  });\n  define(Gp, "toString", function () {\n    return "[object Generator]";\n  });\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n    this.tryEntries.push(entry);\n  }\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = "normal";\n    delete record.arg;\n    entry.completion = record;\n  }\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: "root"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n  exports.keys = function (val) {\n    var object = Object(val);\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n  function values(iterable) {\n    if (iterable != null) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n      if (typeof iterable.next === "function") {\n        return iterable;\n      }\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n          next = function next() {\n            while (++i < iterable.length) {\n              if (hasOwn.call(iterable, i)) {\n                next.value = iterable[i];\n                next.done = false;\n                return next;\n              }\n            }\n            next.value = undefined;\n            next.done = true;\n            return next;\n          };\n        return next.next = next;\n      }\n    }\n    throw new TypeError(_typeof(iterable) + " is not iterable");\n  }\n  exports.values = values;\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n  Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel\'s\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = "next";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function stop() {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === "throw") {\n        throw rootRecord.arg;\n      }\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) {\n        throw exception;\n      }\n      var context = this;\n      function handle(loc, caught) {\n        record.type = "throw";\n        record.arg = exception;\n        context.next = loc;\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = "next";\n          context.arg = undefined;\n        }\n        return !!caught;\n      }\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n        if (entry.tryLoc === "root") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle("end");\n        }\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, "catchLoc");\n          var hasFinally = hasOwn.call(entry, "finallyLoc");\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error("try statement without catch or finally");\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n      if (finallyEntry) {\n        this.method = "next";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n      return this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (record.type === "throw") {\n        throw record.arg;\n      }\n      if (record.type === "break" || record.type === "continue") {\n        this.next = record.arg;\n      } else if (record.type === "return") {\n        this.rval = this.arg = record.arg;\n        this.method = "return";\n        this.next = "end";\n      } else if (record.type === "normal" && afterLoc) {\n        this.next = afterLoc;\n      }\n      return ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    "catch": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === "throw") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error("illegal catch attempt");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n      if (this.method === "next") {\n        // Deliberately forget the last sent value so that we don\'t\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n}(\n// If this script is executing as a CommonJS module, use module.exports\n// as the regeneratorRuntime namespace. Otherwise create a new empty\n// object. Either way, the resulting object will be used to initialize\n// the regeneratorRuntime variable at the top of this file.\n( false ? 0 : _typeof(module)) === "object" ? module.exports : {});\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you\'ve misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you\'re not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if ((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === "object") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function("r", "regeneratorRuntime = r")(runtime);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n')},231:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ _classCallCheck)\n/* harmony export */ });\nfunction _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMxLmpzIiwibWFwcGluZ3MiOiI7OztBQUFBLFNBQVNBLGVBQWVBLENBQUNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0VBQzdCLElBQUksRUFBRUQsQ0FBQyxZQUFZQyxDQUFDLENBQUMsRUFBRSxNQUFNLElBQUlDLFNBQVMsQ0FBQyxtQ0FBbUMsQ0FBQztBQUNqRiIsInNvdXJjZXMiOlsid2VicGFjazovL21hc2h2cC1mb3Jtcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcz9kNGVjIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7XG4gIGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbn1cbmV4cG9ydCB7IF9jbGFzc0NhbGxDaGVjayBhcyBkZWZhdWx0IH07Il0sIm5hbWVzIjpbIl9jbGFzc0NhbGxDaGVjayIsImEiLCJuIiwiVHlwZUVycm9yIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///231\n')},683:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ _createClass)\n/* harmony export */ });\n/* harmony import */ var _toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(774);\n\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, (0,_toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {\n    writable: !1\n  }), e;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjgzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBK0M7QUFDL0MsU0FBU0MsaUJBQWlCQSxDQUFDQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUMvQixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0QsQ0FBQyxDQUFDRSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO0lBQ2pDLElBQUlFLENBQUMsR0FBR0gsQ0FBQyxDQUFDQyxDQUFDLENBQUM7SUFDWkUsQ0FBQyxDQUFDQyxVQUFVLEdBQUdELENBQUMsQ0FBQ0MsVUFBVSxJQUFJLENBQUMsQ0FBQyxFQUFFRCxDQUFDLENBQUNFLFlBQVksR0FBRyxDQUFDLENBQUMsRUFBRSxPQUFPLElBQUlGLENBQUMsS0FBS0EsQ0FBQyxDQUFDRyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRUMsTUFBTSxDQUFDQyxjQUFjLENBQUNULENBQUMsRUFBRUYsc0VBQWEsQ0FBQ00sQ0FBQyxDQUFDTSxHQUFHLENBQUMsRUFBRU4sQ0FBQyxDQUFDO0VBQzlJO0FBQ0Y7QUFDQSxTQUFTTyxZQUFZQSxDQUFDWCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0VBQzdCLE9BQU9ELENBQUMsSUFBSUYsaUJBQWlCLENBQUNDLENBQUMsQ0FBQ1ksU0FBUyxFQUFFWCxDQUFDLENBQUMsRUFBRUMsQ0FBQyxJQUFJSCxpQkFBaUIsQ0FBQ0MsQ0FBQyxFQUFFRSxDQUFDLENBQUMsRUFBRU0sTUFBTSxDQUFDQyxjQUFjLENBQUNULENBQUMsRUFBRSxXQUFXLEVBQUU7SUFDakhPLFFBQVEsRUFBRSxDQUFDO0VBQ2IsQ0FBQyxDQUFDLEVBQUVQLENBQUM7QUFDUCIsInNvdXJjZXMiOlsid2VicGFjazovL21hc2h2cC1mb3Jtcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcz9iZWUyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0b1Byb3BlcnR5S2V5IGZyb20gXCIuL3RvUHJvcGVydHlLZXkuanNcIjtcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHtcbiAgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7XG4gICAgdmFyIG8gPSByW3RdO1xuICAgIG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCB0b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7XG4gIHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogITFcbiAgfSksIGU7XG59XG5leHBvcnQgeyBfY3JlYXRlQ2xhc3MgYXMgZGVmYXVsdCB9OyJdLCJuYW1lcyI6WyJ0b1Byb3BlcnR5S2V5IiwiX2RlZmluZVByb3BlcnRpZXMiLCJlIiwiciIsInQiLCJsZW5ndGgiLCJvIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b3R5cGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///683\n')},141:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ _defineProperty)\n/* harmony export */ });\n/* harmony import */ var _toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(774);\n\nfunction _defineProperty(e, r, t) {\n  return (r = (0,_toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQxLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBK0M7QUFDL0MsU0FBU0MsZUFBZUEsQ0FBQ0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUNoQyxPQUFPLENBQUNELENBQUMsR0FBR0gsc0VBQWEsQ0FBQ0csQ0FBQyxDQUFDLEtBQUtELENBQUMsR0FBR0csTUFBTSxDQUFDQyxjQUFjLENBQUNKLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0lBQy9ESSxLQUFLLEVBQUVILENBQUM7SUFDUkksVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNkQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0lBQ2hCQyxRQUFRLEVBQUUsQ0FBQztFQUNiLENBQUMsQ0FBQyxHQUFHUixDQUFDLENBQUNDLENBQUMsQ0FBQyxHQUFHQyxDQUFDLEVBQUVGLENBQUM7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanM/YWRlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdG9Qcm9wZXJ0eUtleSBmcm9tIFwiLi90b1Byb3BlcnR5S2V5LmpzXCI7XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkoZSwgciwgdCkge1xuICByZXR1cm4gKHIgPSB0b1Byb3BlcnR5S2V5KHIpKSBpbiBlID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIHtcbiAgICB2YWx1ZTogdCxcbiAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICBjb25maWd1cmFibGU6ICEwLFxuICAgIHdyaXRhYmxlOiAhMFxuICB9KSA6IGVbcl0gPSB0LCBlO1xufVxuZXhwb3J0IHsgX2RlZmluZVByb3BlcnR5IGFzIGRlZmF1bHQgfTsiXSwibmFtZXMiOlsidG9Qcm9wZXJ0eUtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsImUiLCJyIiwidCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///141\n')},792:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ _getPrototypeOf)\n/* harmony export */ });\nfunction _getPrototypeOf(t) {\n  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, _getPrototypeOf(t);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzkyLmpzIiwibWFwcGluZ3MiOiI7OztBQUFBLFNBQVNBLGVBQWVBLENBQUNDLENBQUMsRUFBRTtFQUMxQixPQUFPRCxlQUFlLEdBQUdFLE1BQU0sQ0FBQ0MsY0FBYyxHQUFHRCxNQUFNLENBQUNFLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVSixDQUFDLEVBQUU7SUFDM0YsT0FBT0EsQ0FBQyxDQUFDSyxTQUFTLElBQUlKLE1BQU0sQ0FBQ0UsY0FBYyxDQUFDSCxDQUFDLENBQUM7RUFDaEQsQ0FBQyxFQUFFRCxlQUFlLENBQUNDLENBQUMsQ0FBQztBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL21hc2h2cC1mb3Jtcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZi5qcz83ZTg0Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZih0KSB7XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpO1xuICB9LCBfZ2V0UHJvdG90eXBlT2YodCk7XG59XG5leHBvcnQgeyBfZ2V0UHJvdG90eXBlT2YgYXMgZGVmYXVsdCB9OyJdLCJuYW1lcyI6WyJfZ2V0UHJvdG90eXBlT2YiLCJ0IiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsImJpbmQiLCJfX3Byb3RvX18iLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///792\n")},156:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A: () => (/* binding */ _inherits)\n});\n\n;// ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js\nfunction _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\n\n;// ./node_modules/@babel/runtime/helpers/esm/inherits.js\n\nfunction _inherits(t, e) {\n  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(t, "prototype", {\n    writable: !1\n  }), e && _setPrototypeOf(t, e);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU2LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxTQUFTQSxlQUFlQSxDQUFDQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUM3QixPQUFPRixlQUFlLEdBQUdHLE1BQU0sQ0FBQ0MsY0FBYyxHQUFHRCxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVSixDQUFDLEVBQUVDLENBQUMsRUFBRTtJQUM5RixPQUFPRCxDQUFDLENBQUNLLFNBQVMsR0FBR0osQ0FBQyxFQUFFRCxDQUFDO0VBQzNCLENBQUMsRUFBRUQsZUFBZSxDQUFDQyxDQUFDLEVBQUVDLENBQUMsQ0FBQztBQUMxQjs7O0FDSmlEO0FBQ2pELFNBQVNNLFNBQVNBLENBQUNQLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0VBQ3ZCLElBQUksVUFBVSxJQUFJLE9BQU9BLENBQUMsSUFBSSxJQUFJLEtBQUtBLENBQUMsRUFBRSxNQUFNLElBQUlPLFNBQVMsQ0FBQyxvREFBb0QsQ0FBQztFQUNuSFIsQ0FBQyxDQUFDUyxTQUFTLEdBQUdQLE1BQU0sQ0FBQ1EsTUFBTSxDQUFDVCxDQUFDLElBQUlBLENBQUMsQ0FBQ1EsU0FBUyxFQUFFO0lBQzVDRSxXQUFXLEVBQUU7TUFDWEMsS0FBSyxFQUFFWixDQUFDO01BQ1JhLFFBQVEsRUFBRSxDQUFDLENBQUM7TUFDWkMsWUFBWSxFQUFFLENBQUM7SUFDakI7RUFDRixDQUFDLENBQUMsRUFBRVosTUFBTSxDQUFDYSxjQUFjLENBQUNmLENBQUMsRUFBRSxXQUFXLEVBQUU7SUFDeENhLFFBQVEsRUFBRSxDQUFDO0VBQ2IsQ0FBQyxDQUFDLEVBQUVaLENBQUMsSUFBSUUsZUFBYyxDQUFDSCxDQUFDLEVBQUVDLENBQUMsQ0FBQztBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL21hc2h2cC1mb3Jtcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcz9iMzgwIiwid2VicGFjazovL21hc2h2cC1mb3Jtcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cy5qcz8yNjJlIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0O1xuICB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7XG59XG5leHBvcnQgeyBfc2V0UHJvdG90eXBlT2YgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHtcbiAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiB0LFxuICAgICAgd3JpdGFibGU6ICEwLFxuICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH1cbiAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6ICExXG4gIH0pLCBlICYmIHNldFByb3RvdHlwZU9mKHQsIGUpO1xufVxuZXhwb3J0IHsgX2luaGVyaXRzIGFzIGRlZmF1bHQgfTsiXSwibmFtZXMiOlsiX3NldFByb3RvdHlwZU9mIiwidCIsImUiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsImJpbmQiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiX2luaGVyaXRzIiwiVHlwZUVycm9yIiwicHJvdG90eXBlIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZGVmaW5lUHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///156\n')},820:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A: () => (/* binding */ _possibleConstructorReturn)\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__(234);\n;// ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nfunction _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  return e;\n}\n\n;// ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\n\n\nfunction _possibleConstructorReturn(t, e) {\n  if (e && ("object" == (0,esm_typeof/* default */.A)(e) || "function" == typeof e)) return e;\n  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");\n  return _assertThisInitialized(t);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODIwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLFNBQVNBLHNCQUFzQkEsQ0FBQ0MsQ0FBQyxFQUFFO0VBQ2pDLElBQUksS0FBSyxDQUFDLEtBQUtBLENBQUMsRUFBRSxNQUFNLElBQUlDLGNBQWMsQ0FBQywyREFBMkQsQ0FBQztFQUN2RyxPQUFPRCxDQUFDO0FBQ1Y7OztBQ0hrQztBQUM2QjtBQUMvRCxTQUFTSywwQkFBMEJBLENBQUNDLENBQUMsRUFBRU4sQ0FBQyxFQUFFO0VBQ3hDLElBQUlBLENBQUMsS0FBSyxRQUFRLElBQUlHLDZCQUFPLENBQUNILENBQUMsQ0FBQyxJQUFJLFVBQVUsSUFBSSxPQUFPQSxDQUFDLENBQUMsRUFBRSxPQUFPQSxDQUFDO0VBQ3JFLElBQUksS0FBSyxDQUFDLEtBQUtBLENBQUMsRUFBRSxNQUFNLElBQUlPLFNBQVMsQ0FBQywwREFBMEQsQ0FBQztFQUNqRyxPQUFPSCxzQkFBcUIsQ0FBQ0UsQ0FBQyxDQUFDO0FBQ2pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFzaHZwLWZvcm1zLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcz8yNTdlIiwid2VicGFjazovL21hc2h2cC1mb3Jtcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzPzk5ZGUiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7XG4gIGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgcmV0dXJuIGU7XG59XG5leHBvcnQgeyBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmltcG9ydCBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzXCI7XG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBlKSB7XG4gIGlmIChlICYmIChcIm9iamVjdFwiID09IF90eXBlb2YoZSkgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBlKSkgcmV0dXJuIGU7XG4gIGlmICh2b2lkIDAgIT09IGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtcbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZCh0KTtcbn1cbmV4cG9ydCB7IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGFzIGRlZmF1bHQgfTsiXSwibmFtZXMiOlsiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsImUiLCJSZWZlcmVuY2VFcnJvciIsImRlZmF1bHQiLCJfdHlwZW9mIiwiYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJ0IiwiVHlwZUVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///820\n')},774:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A: () => (/* binding */ toPropertyKey)\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__(234);\n;// ./node_modules/@babel/runtime/helpers/esm/toPrimitive.js\n\nfunction toPrimitive(t, r) {\n  if ("object" != (0,esm_typeof/* default */.A)(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || "default");\n    if ("object" != (0,esm_typeof/* default */.A)(i)) return i;\n    throw new TypeError("@@toPrimitive must return a primitive value.");\n  }\n  return ("string" === r ? String : Number)(t);\n}\n\n;// ./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js\n\n\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, "string");\n  return "symbol" == (0,esm_typeof/* default */.A)(i) ? i : i + "";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzc0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFrQztBQUNsQyxTQUFTQyxXQUFXQSxDQUFDQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUN6QixJQUFJLFFBQVEsSUFBSUgsNkJBQU8sQ0FBQ0UsQ0FBQyxDQUFDLElBQUksQ0FBQ0EsQ0FBQyxFQUFFLE9BQU9BLENBQUM7RUFDMUMsSUFBSUUsQ0FBQyxHQUFHRixDQUFDLENBQUNHLE1BQU0sQ0FBQ0osV0FBVyxDQUFDO0VBQzdCLElBQUksS0FBSyxDQUFDLEtBQUtHLENBQUMsRUFBRTtJQUNoQixJQUFJRSxDQUFDLEdBQUdGLENBQUMsQ0FBQ0csSUFBSSxDQUFDTCxDQUFDLEVBQUVDLENBQUMsSUFBSSxTQUFTLENBQUM7SUFDakMsSUFBSSxRQUFRLElBQUlILDZCQUFPLENBQUNNLENBQUMsQ0FBQyxFQUFFLE9BQU9BLENBQUM7SUFDcEMsTUFBTSxJQUFJRSxTQUFTLENBQUMsOENBQThDLENBQUM7RUFDckU7RUFDQSxPQUFPLENBQUMsUUFBUSxLQUFLTCxDQUFDLEdBQUdNLE1BQU0sR0FBR0MsTUFBTSxFQUFFUixDQUFDLENBQUM7QUFDOUM7OztBQ1ZrQztBQUNTO0FBQzNDLFNBQVNVLGFBQWFBLENBQUNWLENBQUMsRUFBRTtFQUN4QixJQUFJSSxDQUFDLEdBQUdMLFdBQVcsQ0FBQ0MsQ0FBQyxFQUFFLFFBQVEsQ0FBQztFQUNoQyxPQUFPLFFBQVEsSUFBSUYsNkJBQU8sQ0FBQ00sQ0FBQyxDQUFDLEdBQUdBLENBQUMsR0FBR0EsQ0FBQyxHQUFHLEVBQUU7QUFDNUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9QcmltaXRpdmUuanM/YWY1MCIsIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Qcm9wZXJ0eUtleS5qcz9hMzhlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfdHlwZW9mIGZyb20gXCIuL3R5cGVvZi5qc1wiO1xuZnVuY3Rpb24gdG9QcmltaXRpdmUodCwgcikge1xuICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDtcbiAgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG4gIGlmICh2b2lkIDAgIT09IGUpIHtcbiAgICB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTtcbn1cbmV4cG9ydCB7IHRvUHJpbWl0aXZlIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmltcG9ydCB0b1ByaW1pdGl2ZSBmcm9tIFwiLi90b1ByaW1pdGl2ZS5qc1wiO1xuZnVuY3Rpb24gdG9Qcm9wZXJ0eUtleSh0KSB7XG4gIHZhciBpID0gdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7XG4gIHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7XG59XG5leHBvcnQgeyB0b1Byb3BlcnR5S2V5IGFzIGRlZmF1bHQgfTsiXSwibmFtZXMiOlsiX3R5cGVvZiIsInRvUHJpbWl0aXZlIiwidCIsInIiLCJlIiwiU3ltYm9sIiwiaSIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJOdW1iZXIiLCJkZWZhdWx0IiwidG9Qcm9wZXJ0eUtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///774\n')},234:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ _typeof)\n/* harmony export */ });\nfunction _typeof(o) {\n  "@babel/helpers - typeof";\n\n  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;\n  }, _typeof(o);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjM0LmpzIiwibWFwcGluZ3MiOiI7OztBQUFBLFNBQVNBLE9BQU9BLENBQUNDLENBQUMsRUFBRTtFQUNsQix5QkFBeUI7O0VBRXpCLE9BQU9ELE9BQU8sR0FBRyxVQUFVLElBQUksT0FBT0UsTUFBTSxJQUFJLFFBQVEsSUFBSSxPQUFPQSxNQUFNLENBQUNDLFFBQVEsR0FBRyxVQUFVRixDQUFDLEVBQUU7SUFDaEcsT0FBTyxPQUFPQSxDQUFDO0VBQ2pCLENBQUMsR0FBRyxVQUFVQSxDQUFDLEVBQUU7SUFDZixPQUFPQSxDQUFDLElBQUksVUFBVSxJQUFJLE9BQU9DLE1BQU0sSUFBSUQsQ0FBQyxDQUFDRyxXQUFXLEtBQUtGLE1BQU0sSUFBSUQsQ0FBQyxLQUFLQyxNQUFNLENBQUNHLFNBQVMsR0FBRyxRQUFRLEdBQUcsT0FBT0osQ0FBQztFQUNySCxDQUFDLEVBQUVELE9BQU8sQ0FBQ0MsQ0FBQyxDQUFDO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzPzUzY2EiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX3R5cGVvZihvKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvO1xuICB9IDogZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbztcbiAgfSwgX3R5cGVvZihvKTtcbn1cbmV4cG9ydCB7IF90eXBlb2YgYXMgZGVmYXVsdCB9OyJdLCJuYW1lcyI6WyJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///234\n')}},__webpack_module_cache__={};function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.loaded=!0,F.exports}__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q);var __webpack_exports__=__webpack_require__(694)})();