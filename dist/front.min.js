(()=>{var __webpack_modules__={343:(Q,n,B)=>{var F={"./mashvp-forms/ajax-controller.js":642,"./mashvp-forms/recaptcha-controller.js":715};function e(Q){var n=t(Q);return B(n)}function t(Q){if(!B.o(F,Q)){var n=new Error("Cannot find module '"+Q+"'");throw n.code="MODULE_NOT_FOUND",n}return F[Q]}e.keys=function(){return Object.keys(F)},e.resolve=t,Q.exports=e,e.id=343},834:module=>{eval("function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheUxpa2VUb0FycmF5LmpzPzVhNDMiXSwibmFtZXMiOlsiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJsZW5ndGgiLCJpIiwiYXJyMiIsIkFycmF5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsaUJBQVQsQ0FBMkJDLEdBQTNCLEVBQWdDQyxHQUFoQyxFQUFxQztBQUNuQyxNQUFJQSxHQUFHLElBQUksSUFBUCxJQUFlQSxHQUFHLEdBQUdELEdBQUcsQ0FBQ0UsTUFBN0IsRUFBcUNELEdBQUcsR0FBR0QsR0FBRyxDQUFDRSxNQUFWOztBQUVyQyxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLElBQUksR0FBRyxJQUFJQyxLQUFKLENBQVVKLEdBQVYsQ0FBdkIsRUFBdUNFLENBQUMsR0FBR0YsR0FBM0MsRUFBZ0RFLENBQUMsRUFBakQsRUFBcUQ7QUFDbkRDLElBQUFBLElBQUksQ0FBQ0QsQ0FBRCxDQUFKLEdBQVVILEdBQUcsQ0FBQ0csQ0FBRCxDQUFiO0FBQ0Q7O0FBRUQsU0FBT0MsSUFBUDtBQUNEOztBQUVERSxNQUFNLENBQUNDLE9BQVAsR0FBaUJSLGlCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlMaWtlVG9BcnJheTsiXSwiZmlsZSI6IjgzNC5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///834\n")},640:(module,__unused_webpack_exports,__webpack_require__)=>{eval("var arrayLikeToArray = __webpack_require__(834);\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhvdXRIb2xlcy5qcz8yMjM2Il0sIm5hbWVzIjpbImFycmF5TGlrZVRvQXJyYXkiLCJyZXF1aXJlIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsZ0JBQWdCLEdBQUdDLG1CQUFPLENBQUMsR0FBRCxDQUE5Qjs7QUFFQSxTQUFTQyxrQkFBVCxDQUE0QkMsR0FBNUIsRUFBaUM7QUFDL0IsTUFBSUMsS0FBSyxDQUFDQyxPQUFOLENBQWNGLEdBQWQsQ0FBSixFQUF3QixPQUFPSCxnQkFBZ0IsQ0FBQ0csR0FBRCxDQUF2QjtBQUN6Qjs7QUFFREcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCTCxrQkFBakIiLCJmaWxlIjoiNjQwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFycmF5TGlrZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheUxpa2VUb0FycmF5XCIpO1xuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aG91dEhvbGVzOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///640\n")},734:module=>{eval("function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanM/M2M5NiJdLCJuYW1lcyI6WyJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0Esc0JBQVQsQ0FBZ0NDLElBQWhDLEVBQXNDO0FBQ3BDLE1BQUlBLElBQUksS0FBSyxLQUFLLENBQWxCLEVBQXFCO0FBQ25CLFVBQU0sSUFBSUMsY0FBSixDQUFtQiwyREFBbkIsQ0FBTjtBQUNEOztBQUVELFNBQU9ELElBQVA7QUFDRDs7QUFFREUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSixzQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQ7Il0sImZpbGUiOiI3MzQuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///734\n")},853:module=>{eval('function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n\nmodule.exports = _classCallCheck;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcz85NzBiIl0sIm5hbWVzIjpbIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxlQUFULENBQXlCQyxRQUF6QixFQUFtQ0MsV0FBbkMsRUFBZ0Q7QUFDOUMsTUFBSSxFQUFFRCxRQUFRLFlBQVlDLFdBQXRCLENBQUosRUFBd0M7QUFDdEMsVUFBTSxJQUFJQyxTQUFKLENBQWMsbUNBQWQsQ0FBTjtBQUNEO0FBQ0Y7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkwsZUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jbGFzc0NhbGxDaGVjazsiXSwiZmlsZSI6Ijg1My5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///853\n')},385:module=>{eval('function _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = privateMap.get(receiver);\n\n  if (!descriptor) {\n    throw new TypeError("attempted to get private field on non-instance");\n  }\n\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n\n  return descriptor.value;\n}\n\nmodule.exports = _classPrivateFieldGet;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc1ByaXZhdGVGaWVsZEdldC5qcz9iNjY5Il0sIm5hbWVzIjpbIl9jbGFzc1ByaXZhdGVGaWVsZEdldCIsInJlY2VpdmVyIiwicHJpdmF0ZU1hcCIsImRlc2NyaXB0b3IiLCJnZXQiLCJUeXBlRXJyb3IiLCJjYWxsIiwidmFsdWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxxQkFBVCxDQUErQkMsUUFBL0IsRUFBeUNDLFVBQXpDLEVBQXFEO0FBQ25ELE1BQUlDLFVBQVUsR0FBR0QsVUFBVSxDQUFDRSxHQUFYLENBQWVILFFBQWYsQ0FBakI7O0FBRUEsTUFBSSxDQUFDRSxVQUFMLEVBQWlCO0FBQ2YsVUFBTSxJQUFJRSxTQUFKLENBQWMsZ0RBQWQsQ0FBTjtBQUNEOztBQUVELE1BQUlGLFVBQVUsQ0FBQ0MsR0FBZixFQUFvQjtBQUNsQixXQUFPRCxVQUFVLENBQUNDLEdBQVgsQ0FBZUUsSUFBZixDQUFvQkwsUUFBcEIsQ0FBUDtBQUNEOztBQUVELFNBQU9FLFVBQVUsQ0FBQ0ksS0FBbEI7QUFDRDs7QUFFREMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCVCxxQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHByaXZhdGVNYXApIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XG5cbiAgaWYgKCFkZXNjcmlwdG9yKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XG4gIH1cblxuICBpZiAoZGVzY3JpcHRvci5nZXQpIHtcbiAgICByZXR1cm4gZGVzY3JpcHRvci5nZXQuY2FsbChyZWNlaXZlcik7XG4gIH1cblxuICByZXR1cm4gZGVzY3JpcHRvci52YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NQcml2YXRlRmllbGRHZXQ7Il0sImZpbGUiOiIzODUuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///385\n')},278:module=>{eval('function _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = privateMap.get(receiver);\n\n  if (!descriptor) {\n    throw new TypeError("attempted to set private field on non-instance");\n  }\n\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError("attempted to set read only private field");\n    }\n\n    descriptor.value = value;\n  }\n\n  return value;\n}\n\nmodule.exports = _classPrivateFieldSet;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc1ByaXZhdGVGaWVsZFNldC5qcz9mNzYzIl0sIm5hbWVzIjpbIl9jbGFzc1ByaXZhdGVGaWVsZFNldCIsInJlY2VpdmVyIiwicHJpdmF0ZU1hcCIsInZhbHVlIiwiZGVzY3JpcHRvciIsImdldCIsIlR5cGVFcnJvciIsInNldCIsImNhbGwiLCJ3cml0YWJsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLHFCQUFULENBQStCQyxRQUEvQixFQUF5Q0MsVUFBekMsRUFBcURDLEtBQXJELEVBQTREO0FBQzFELE1BQUlDLFVBQVUsR0FBR0YsVUFBVSxDQUFDRyxHQUFYLENBQWVKLFFBQWYsQ0FBakI7O0FBRUEsTUFBSSxDQUFDRyxVQUFMLEVBQWlCO0FBQ2YsVUFBTSxJQUFJRSxTQUFKLENBQWMsZ0RBQWQsQ0FBTjtBQUNEOztBQUVELE1BQUlGLFVBQVUsQ0FBQ0csR0FBZixFQUFvQjtBQUNsQkgsSUFBQUEsVUFBVSxDQUFDRyxHQUFYLENBQWVDLElBQWYsQ0FBb0JQLFFBQXBCLEVBQThCRSxLQUE5QjtBQUNELEdBRkQsTUFFTztBQUNMLFFBQUksQ0FBQ0MsVUFBVSxDQUFDSyxRQUFoQixFQUEwQjtBQUN4QixZQUFNLElBQUlILFNBQUosQ0FBYywwQ0FBZCxDQUFOO0FBQ0Q7O0FBRURGLElBQUFBLFVBQVUsQ0FBQ0QsS0FBWCxHQUFtQkEsS0FBbkI7QUFDRDs7QUFFRCxTQUFPQSxLQUFQO0FBQ0Q7O0FBRURPLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlgscUJBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xuICB2YXIgZGVzY3JpcHRvciA9IHByaXZhdGVNYXAuZ2V0KHJlY2VpdmVyKTtcblxuICBpZiAoIWRlc2NyaXB0b3IpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcbiAgfVxuXG4gIGlmIChkZXNjcmlwdG9yLnNldCkge1xuICAgIGRlc2NyaXB0b3Iuc2V0LmNhbGwocmVjZWl2ZXIsIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWRlc2NyaXB0b3Iud3JpdGFibGUpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHJlYWQgb25seSBwcml2YXRlIGZpZWxkXCIpO1xuICAgIH1cblxuICAgIGRlc2NyaXB0b3IudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NQcml2YXRlRmllbGRTZXQ7Il0sImZpbGUiOiIyNzguanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///278\n')},147:module=>{eval('function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ("value" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcz81YmMzIl0sIm5hbWVzIjpbIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxpQkFBVCxDQUEyQkMsTUFBM0IsRUFBbUNDLEtBQW5DLEVBQTBDO0FBQ3hDLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsS0FBSyxDQUFDRSxNQUExQixFQUFrQ0QsQ0FBQyxFQUFuQyxFQUF1QztBQUNyQyxRQUFJRSxVQUFVLEdBQUdILEtBQUssQ0FBQ0MsQ0FBRCxDQUF0QjtBQUNBRSxJQUFBQSxVQUFVLENBQUNDLFVBQVgsR0FBd0JELFVBQVUsQ0FBQ0MsVUFBWCxJQUF5QixLQUFqRDtBQUNBRCxJQUFBQSxVQUFVLENBQUNFLFlBQVgsR0FBMEIsSUFBMUI7QUFDQSxRQUFJLFdBQVdGLFVBQWYsRUFBMkJBLFVBQVUsQ0FBQ0csUUFBWCxHQUFzQixJQUF0QjtBQUMzQkMsSUFBQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCVCxNQUF0QixFQUE4QkksVUFBVSxDQUFDTSxHQUF6QyxFQUE4Q04sVUFBOUM7QUFDRDtBQUNGOztBQUVELFNBQVNPLFlBQVQsQ0FBc0JDLFdBQXRCLEVBQW1DQyxVQUFuQyxFQUErQ0MsV0FBL0MsRUFBNEQ7QUFDMUQsTUFBSUQsVUFBSixFQUFnQmQsaUJBQWlCLENBQUNhLFdBQVcsQ0FBQ0csU0FBYixFQUF3QkYsVUFBeEIsQ0FBakI7QUFDaEIsTUFBSUMsV0FBSixFQUFpQmYsaUJBQWlCLENBQUNhLFdBQUQsRUFBY0UsV0FBZCxDQUFqQjtBQUNqQixTQUFPRixXQUFQO0FBQ0Q7O0FBRURJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQk4sWUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NyZWF0ZUNsYXNzOyJdLCJmaWxlIjoiMTQ3LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///147\n')},156:module=>{eval("function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcz85NTIzIl0sIm5hbWVzIjpbIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxlQUFULENBQXlCQyxHQUF6QixFQUE4QkMsR0FBOUIsRUFBbUNDLEtBQW5DLEVBQTBDO0FBQ3hDLE1BQUlELEdBQUcsSUFBSUQsR0FBWCxFQUFnQjtBQUNkRyxJQUFBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JKLEdBQXRCLEVBQTJCQyxHQUEzQixFQUFnQztBQUM5QkMsTUFBQUEsS0FBSyxFQUFFQSxLQUR1QjtBQUU5QkcsTUFBQUEsVUFBVSxFQUFFLElBRmtCO0FBRzlCQyxNQUFBQSxZQUFZLEVBQUUsSUFIZ0I7QUFJOUJDLE1BQUFBLFFBQVEsRUFBRTtBQUpvQixLQUFoQztBQU1ELEdBUEQsTUFPTztBQUNMUCxJQUFBQSxHQUFHLENBQUNDLEdBQUQsQ0FBSCxHQUFXQyxLQUFYO0FBQ0Q7O0FBRUQsU0FBT0YsR0FBUDtBQUNEOztBQUVEUSxNQUFNLENBQUNDLE9BQVAsR0FBaUJWLGVBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5OyJdLCJmaWxlIjoiMTU2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///156\n")},470:module=>{eval("function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZi5qcz8zNmM2Il0sIm5hbWVzIjpbIl9nZXRQcm90b3R5cGVPZiIsIm8iLCJtb2R1bGUiLCJleHBvcnRzIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsZUFBVCxDQUF5QkMsQ0FBekIsRUFBNEI7QUFDMUJDLEVBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkgsZUFBZSxHQUFHSSxNQUFNLENBQUNDLGNBQVAsR0FBd0JELE1BQU0sQ0FBQ0UsY0FBL0IsR0FBZ0QsU0FBU04sZUFBVCxDQUF5QkMsQ0FBekIsRUFBNEI7QUFDN0csV0FBT0EsQ0FBQyxDQUFDTSxTQUFGLElBQWVILE1BQU0sQ0FBQ0UsY0FBUCxDQUFzQkwsQ0FBdEIsQ0FBdEI7QUFDRCxHQUZEO0FBR0EsU0FBT0QsZUFBZSxDQUFDQyxDQUFELENBQXRCO0FBQ0Q7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkgsZUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2Y7Il0sImZpbGUiOiI0NzAuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///470\n")},50:(module,__unused_webpack_exports,__webpack_require__)=>{eval('var setPrototypeOf = __webpack_require__(204);\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcz9lZDZkIl0sIm5hbWVzIjpbInNldFByb3RvdHlwZU9mIiwicmVxdWlyZSIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIlR5cGVFcnJvciIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLGNBQWMsR0FBR0MsbUJBQU8sQ0FBQyxHQUFELENBQTVCOztBQUVBLFNBQVNDLFNBQVQsQ0FBbUJDLFFBQW5CLEVBQTZCQyxVQUE3QixFQUF5QztBQUN2QyxNQUFJLE9BQU9BLFVBQVAsS0FBc0IsVUFBdEIsSUFBb0NBLFVBQVUsS0FBSyxJQUF2RCxFQUE2RDtBQUMzRCxVQUFNLElBQUlDLFNBQUosQ0FBYyxvREFBZCxDQUFOO0FBQ0Q7O0FBRURGLFVBQVEsQ0FBQ0csU0FBVCxHQUFxQkMsTUFBTSxDQUFDQyxNQUFQLENBQWNKLFVBQVUsSUFBSUEsVUFBVSxDQUFDRSxTQUF2QyxFQUFrRDtBQUNyRUcsZUFBVyxFQUFFO0FBQ1hDLFdBQUssRUFBRVAsUUFESTtBQUVYUSxjQUFRLEVBQUUsSUFGQztBQUdYQyxrQkFBWSxFQUFFO0FBSEg7QUFEd0QsR0FBbEQsQ0FBckI7QUFPQSxNQUFJUixVQUFKLEVBQWdCSixjQUFjLENBQUNHLFFBQUQsRUFBV0MsVUFBWCxDQUFkO0FBQ2pCOztBQUVEUyxNQUFNLENBQUNDLE9BQVAsR0FBaUJaLFNBQWpCIiwiZmlsZSI6IjUwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2ZcIik7XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHM7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///50\n')},942:module=>{eval('function _iterableToArray(iter) {\n  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXkuanM/MTFiMCJdLCJuYW1lcyI6WyJfaXRlcmFibGVUb0FycmF5IiwiaXRlciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiT2JqZWN0IiwiQXJyYXkiLCJmcm9tIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsZ0JBQVQsQ0FBMEJDLElBQTFCLEVBQWdDO0FBQzlCLE1BQUksT0FBT0MsTUFBUCxLQUFrQixXQUFsQixJQUFpQ0EsTUFBTSxDQUFDQyxRQUFQLElBQW1CQyxNQUFNLENBQUNILElBQUQsQ0FBOUQsRUFBc0UsT0FBT0ksS0FBSyxDQUFDQyxJQUFOLENBQVdMLElBQVgsQ0FBUDtBQUN2RTs7QUFFRE0sTUFBTSxDQUFDQyxPQUFQLEdBQWlCUixnQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheTsiXSwiZmlsZSI6Ijk0Mi5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///942\n')},841:module=>{eval('function _nonIterableSpread() {\n  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n\nmodule.exports = _nonIterableSpread;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVNwcmVhZC5qcz8wNjc2Il0sIm5hbWVzIjpbIl9ub25JdGVyYWJsZVNwcmVhZCIsIlR5cGVFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLGtCQUFULEdBQThCO0FBQzVCLFFBQU0sSUFBSUMsU0FBSixDQUFjLHNJQUFkLENBQU47QUFDRDs7QUFFREMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSCxrQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9ub25JdGVyYWJsZVNwcmVhZDsiXSwiZmlsZSI6Ijg0MS5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///841\n')},56:(module,__unused_webpack_exports,__webpack_require__)=>{eval('var _typeof = __webpack_require__(559);\n\nvar assertThisInitialized = __webpack_require__(734);\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === "object" || typeof call === "function")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzPzZiNTgiXSwibmFtZXMiOlsiX3R5cGVvZiIsInJlcXVpcmUiLCJhc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJjYWxsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsT0FBTyxHQUFHQyxtQkFBTyxDQUFDLEdBQUQsQ0FBckI7O0FBRUEsSUFBSUMscUJBQXFCLEdBQUdELG1CQUFPLENBQUMsR0FBRCxDQUFuQzs7QUFFQSxTQUFTRSwwQkFBVCxDQUFvQ0MsSUFBcEMsRUFBMENDLElBQTFDLEVBQWdEO0FBQzlDLE1BQUlBLElBQUksS0FBS0wsT0FBTyxDQUFDSyxJQUFELENBQVAsS0FBa0IsUUFBbEIsSUFBOEIsT0FBT0EsSUFBUCxLQUFnQixVQUFuRCxDQUFSLEVBQXdFO0FBQ3RFLFdBQU9BLElBQVA7QUFDRDs7QUFFRCxTQUFPSCxxQkFBcUIsQ0FBQ0UsSUFBRCxDQUE1QjtBQUNEOztBQUVERSxNQUFNLENBQUNDLE9BQVAsR0FBaUJKLDBCQUFqQiIsImZpbGUiOiI1Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfdHlwZW9mID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgYXNzZXJ0VGhpc0luaXRpYWxpemVkID0gcmVxdWlyZShcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpO1xuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH1cblxuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///56\n')},204:module=>{eval("function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcz80YTRiIl0sIm5hbWVzIjpbIl9zZXRQcm90b3R5cGVPZiIsIm8iLCJwIiwibW9kdWxlIiwiZXhwb3J0cyIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxlQUFULENBQXlCQyxDQUF6QixFQUE0QkMsQ0FBNUIsRUFBK0I7QUFDN0JDLEVBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkosZUFBZSxHQUFHSyxNQUFNLENBQUNDLGNBQVAsSUFBeUIsU0FBU04sZUFBVCxDQUF5QkMsQ0FBekIsRUFBNEJDLENBQTVCLEVBQStCO0FBQ3pGRCxJQUFBQSxDQUFDLENBQUNNLFNBQUYsR0FBY0wsQ0FBZDtBQUNBLFdBQU9ELENBQVA7QUFDRCxHQUhEOztBQUtBLFNBQU9ELGVBQWUsQ0FBQ0MsQ0FBRCxFQUFJQyxDQUFKLENBQXRCO0FBQ0Q7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkosZUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZjsiXSwiZmlsZSI6IjIwNC5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///204\n")},545:(module,__unused_webpack_exports,__webpack_require__)=>{eval("var arrayWithoutHoles = __webpack_require__(640);\n\nvar iterableToArray = __webpack_require__(942);\n\nvar unsupportedIterableToArray = __webpack_require__(798);\n\nvar nonIterableSpread = __webpack_require__(841);\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qcz80NDhhIl0sIm5hbWVzIjpbImFycmF5V2l0aG91dEhvbGVzIiwicmVxdWlyZSIsIml0ZXJhYmxlVG9BcnJheSIsInVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5Iiwibm9uSXRlcmFibGVTcHJlYWQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxpQkFBaUIsR0FBR0MsbUJBQU8sQ0FBQyxHQUFELENBQS9COztBQUVBLElBQUlDLGVBQWUsR0FBR0QsbUJBQU8sQ0FBQyxHQUFELENBQTdCOztBQUVBLElBQUlFLDBCQUEwQixHQUFHRixtQkFBTyxDQUFDLEdBQUQsQ0FBeEM7O0FBRUEsSUFBSUcsaUJBQWlCLEdBQUdILG1CQUFPLENBQUMsR0FBRCxDQUEvQjs7QUFFQSxTQUFTSSxrQkFBVCxDQUE0QkMsR0FBNUIsRUFBaUM7QUFDL0IsU0FBT04saUJBQWlCLENBQUNNLEdBQUQsQ0FBakIsSUFBMEJKLGVBQWUsQ0FBQ0ksR0FBRCxDQUF6QyxJQUFrREgsMEJBQTBCLENBQUNHLEdBQUQsQ0FBNUUsSUFBcUZGLGlCQUFpQixFQUE3RztBQUNEOztBQUVERyxNQUFNLENBQUNDLE9BQVAsR0FBaUJILGtCQUFqQiIsImZpbGUiOiI1NDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXJyYXlXaXRob3V0SG9sZXMgPSByZXF1aXJlKFwiLi9hcnJheVdpdGhvdXRIb2xlc1wiKTtcblxudmFyIGl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2l0ZXJhYmxlVG9BcnJheVwiKTtcblxudmFyIHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXlcIik7XG5cbnZhciBub25JdGVyYWJsZVNwcmVhZCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlU3ByZWFkXCIpO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdG9Db25zdW1hYmxlQXJyYXk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///545\n")},559:module=>{eval('function _typeof(obj) {\n  "@babel/helpers - typeof";\n\n  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanM/NzAzNyJdLCJuYW1lcyI6WyJfdHlwZW9mIiwib2JqIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLE9BQVQsQ0FBaUJDLEdBQWpCLEVBQXNCO0FBQ3BCOztBQUVBLE1BQUksT0FBT0MsTUFBUCxLQUFrQixVQUFsQixJQUFnQyxPQUFPQSxNQUFNLENBQUNDLFFBQWQsS0FBMkIsUUFBL0QsRUFBeUU7QUFDdkVDLElBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkwsT0FBTyxHQUFHLFNBQVNBLE9BQVQsQ0FBaUJDLEdBQWpCLEVBQXNCO0FBQy9DLGFBQU8sT0FBT0EsR0FBZDtBQUNELEtBRkQ7QUFHRCxHQUpELE1BSU87QUFDTEcsSUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCTCxPQUFPLEdBQUcsU0FBU0EsT0FBVCxDQUFpQkMsR0FBakIsRUFBc0I7QUFDL0MsYUFBT0EsR0FBRyxJQUFJLE9BQU9DLE1BQVAsS0FBa0IsVUFBekIsSUFBdUNELEdBQUcsQ0FBQ0ssV0FBSixLQUFvQkosTUFBM0QsSUFBcUVELEdBQUcsS0FBS0MsTUFBTSxDQUFDSyxTQUFwRixHQUFnRyxRQUFoRyxHQUEyRyxPQUFPTixHQUF6SDtBQUNELEtBRkQ7QUFHRDs7QUFFRCxTQUFPRCxPQUFPLENBQUNDLEdBQUQsQ0FBZDtBQUNEOztBQUVERyxNQUFNLENBQUNDLE9BQVAsR0FBaUJMLE9BQWpCIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mOyJdLCJmaWxlIjoiNTU5LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///559\n')},798:(module,__unused_webpack_exports,__webpack_require__)=>{eval('var arrayLikeToArray = __webpack_require__(834);\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcz82NjEzIl0sIm5hbWVzIjpbImFycmF5TGlrZVRvQXJyYXkiLCJyZXF1aXJlIiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwibyIsIm1pbkxlbiIsIm4iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsIkFycmF5IiwiZnJvbSIsInRlc3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxnQkFBZ0IsR0FBR0MsbUJBQU8sQ0FBQyxHQUFELENBQTlCOztBQUVBLFNBQVNDLDJCQUFULENBQXFDQyxDQUFyQyxFQUF3Q0MsTUFBeEMsRUFBZ0Q7QUFDOUMsTUFBSSxDQUFDRCxDQUFMLEVBQVE7QUFDUixNQUFJLE9BQU9BLENBQVAsS0FBYSxRQUFqQixFQUEyQixPQUFPSCxnQkFBZ0IsQ0FBQ0csQ0FBRCxFQUFJQyxNQUFKLENBQXZCO0FBQzNCLE1BQUlDLENBQUMsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JOLENBQS9CLEVBQWtDTyxLQUFsQyxDQUF3QyxDQUF4QyxFQUEyQyxDQUFDLENBQTVDLENBQVI7QUFDQSxNQUFJTCxDQUFDLEtBQUssUUFBTixJQUFrQkYsQ0FBQyxDQUFDUSxXQUF4QixFQUFxQ04sQ0FBQyxHQUFHRixDQUFDLENBQUNRLFdBQUYsQ0FBY0MsSUFBbEI7QUFDckMsTUFBSVAsQ0FBQyxLQUFLLEtBQU4sSUFBZUEsQ0FBQyxLQUFLLEtBQXpCLEVBQWdDLE9BQU9RLEtBQUssQ0FBQ0MsSUFBTixDQUFXWCxDQUFYLENBQVA7QUFDaEMsTUFBSUUsQ0FBQyxLQUFLLFdBQU4sSUFBcUIsMkNBQTJDVSxJQUEzQyxDQUFnRFYsQ0FBaEQsQ0FBekIsRUFBNkUsT0FBT0wsZ0JBQWdCLENBQUNHLENBQUQsRUFBSUMsTUFBSixDQUF2QjtBQUM5RTs7QUFFRFksTUFBTSxDQUFDQyxPQUFQLEdBQWlCZiwyQkFBakIiLCJmaWxlIjoiNzk4LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFycmF5TGlrZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheUxpa2VUb0FycmF5XCIpO1xuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///798\n')},318:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Mx": () => /* binding */ Application,\n/* harmony export */   "Qr": () => /* binding */ Controller\n/* harmony export */ });\n/* unused harmony exports AttributeObserver, Context, ElementObserver, IndexedMultimap, Multimap, StringMapObserver, TokenListObserver, ValueListObserver, add, defaultSchema, del, fetch, prune */\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\nStimulus 3.0.1\nCopyright © 2021 Basecamp, LLC\n */\nvar EventListener = /*#__PURE__*/function () {\n  function EventListener(eventTarget, eventName, eventOptions) {\n    _classCallCheck(this, EventListener);\n\n    this.eventTarget = eventTarget;\n    this.eventName = eventName;\n    this.eventOptions = eventOptions;\n    this.unorderedBindings = new Set();\n  }\n\n  _createClass(EventListener, [{\n    key: "connect",\n    value: function connect() {\n      this.eventTarget.addEventListener(this.eventName, this, this.eventOptions);\n    }\n  }, {\n    key: "disconnect",\n    value: function disconnect() {\n      this.eventTarget.removeEventListener(this.eventName, this, this.eventOptions);\n    }\n  }, {\n    key: "bindingConnected",\n    value: function bindingConnected(binding) {\n      this.unorderedBindings.add(binding);\n    }\n  }, {\n    key: "bindingDisconnected",\n    value: function bindingDisconnected(binding) {\n      this.unorderedBindings["delete"](binding);\n    }\n  }, {\n    key: "handleEvent",\n    value: function handleEvent(event) {\n      var extendedEvent = extendEvent(event);\n\n      var _iterator = _createForOfIteratorHelper(this.bindings),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var binding = _step.value;\n\n          if (extendedEvent.immediatePropagationStopped) {\n            break;\n          } else {\n            binding.handleEvent(extendedEvent);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: "bindings",\n    get: function get() {\n      return Array.from(this.unorderedBindings).sort(function (left, right) {\n        var leftIndex = left.index,\n            rightIndex = right.index;\n        return leftIndex < rightIndex ? -1 : leftIndex > rightIndex ? 1 : 0;\n      });\n    }\n  }]);\n\n  return EventListener;\n}();\n\nfunction extendEvent(event) {\n  if ("immediatePropagationStopped" in event) {\n    return event;\n  } else {\n    var _stopImmediatePropagation = event.stopImmediatePropagation;\n    return Object.assign(event, {\n      immediatePropagationStopped: false,\n      stopImmediatePropagation: function stopImmediatePropagation() {\n        this.immediatePropagationStopped = true;\n\n        _stopImmediatePropagation.call(this);\n      }\n    });\n  }\n}\n\nvar Dispatcher = /*#__PURE__*/function () {\n  function Dispatcher(application) {\n    _classCallCheck(this, Dispatcher);\n\n    this.application = application;\n    this.eventListenerMaps = new Map();\n    this.started = false;\n  }\n\n  _createClass(Dispatcher, [{\n    key: "start",\n    value: function start() {\n      if (!this.started) {\n        this.started = true;\n        this.eventListeners.forEach(function (eventListener) {\n          return eventListener.connect();\n        });\n      }\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      if (this.started) {\n        this.started = false;\n        this.eventListeners.forEach(function (eventListener) {\n          return eventListener.disconnect();\n        });\n      }\n    }\n  }, {\n    key: "bindingConnected",\n    value: function bindingConnected(binding) {\n      this.fetchEventListenerForBinding(binding).bindingConnected(binding);\n    }\n  }, {\n    key: "bindingDisconnected",\n    value: function bindingDisconnected(binding) {\n      this.fetchEventListenerForBinding(binding).bindingDisconnected(binding);\n    }\n  }, {\n    key: "handleError",\n    value: function handleError(error, message) {\n      var detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.application.handleError(error, "Error ".concat(message), detail);\n    }\n  }, {\n    key: "fetchEventListenerForBinding",\n    value: function fetchEventListenerForBinding(binding) {\n      var eventTarget = binding.eventTarget,\n          eventName = binding.eventName,\n          eventOptions = binding.eventOptions;\n      return this.fetchEventListener(eventTarget, eventName, eventOptions);\n    }\n  }, {\n    key: "fetchEventListener",\n    value: function fetchEventListener(eventTarget, eventName, eventOptions) {\n      var eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);\n      var cacheKey = this.cacheKey(eventName, eventOptions);\n      var eventListener = eventListenerMap.get(cacheKey);\n\n      if (!eventListener) {\n        eventListener = this.createEventListener(eventTarget, eventName, eventOptions);\n        eventListenerMap.set(cacheKey, eventListener);\n      }\n\n      return eventListener;\n    }\n  }, {\n    key: "createEventListener",\n    value: function createEventListener(eventTarget, eventName, eventOptions) {\n      var eventListener = new EventListener(eventTarget, eventName, eventOptions);\n\n      if (this.started) {\n        eventListener.connect();\n      }\n\n      return eventListener;\n    }\n  }, {\n    key: "fetchEventListenerMapForEventTarget",\n    value: function fetchEventListenerMapForEventTarget(eventTarget) {\n      var eventListenerMap = this.eventListenerMaps.get(eventTarget);\n\n      if (!eventListenerMap) {\n        eventListenerMap = new Map();\n        this.eventListenerMaps.set(eventTarget, eventListenerMap);\n      }\n\n      return eventListenerMap;\n    }\n  }, {\n    key: "cacheKey",\n    value: function cacheKey(eventName, eventOptions) {\n      var parts = [eventName];\n      Object.keys(eventOptions).sort().forEach(function (key) {\n        parts.push("".concat(eventOptions[key] ? "" : "!").concat(key));\n      });\n      return parts.join(":");\n    }\n  }, {\n    key: "eventListeners",\n    get: function get() {\n      return Array.from(this.eventListenerMaps.values()).reduce(function (listeners, map) {\n        return listeners.concat(Array.from(map.values()));\n      }, []);\n    }\n  }]);\n\n  return Dispatcher;\n}();\n\nvar descriptorPattern = /^((.+?)(@(window|document))?->)?(.+?)(#([^:]+?))(:(.+))?$/;\n\nfunction parseActionDescriptorString(descriptorString) {\n  var source = descriptorString.trim();\n  var matches = source.match(descriptorPattern) || [];\n  return {\n    eventTarget: parseEventTarget(matches[4]),\n    eventName: matches[2],\n    eventOptions: matches[9] ? parseEventOptions(matches[9]) : {},\n    identifier: matches[5],\n    methodName: matches[7]\n  };\n}\n\nfunction parseEventTarget(eventTargetName) {\n  if (eventTargetName == "window") {\n    return window;\n  } else if (eventTargetName == "document") {\n    return document;\n  }\n}\n\nfunction parseEventOptions(eventOptions) {\n  return eventOptions.split(":").reduce(function (options, token) {\n    return Object.assign(options, _defineProperty({}, token.replace(/^!/, ""), !/^!/.test(token)));\n  }, {});\n}\n\nfunction stringifyEventTarget(eventTarget) {\n  if (eventTarget == window) {\n    return "window";\n  } else if (eventTarget == document) {\n    return "document";\n  }\n}\n\nfunction camelize(value) {\n  return value.replace(/(?:[_-])([a-z0-9])/g, function (_, _char) {\n    return _char.toUpperCase();\n  });\n}\n\nfunction capitalize(value) {\n  return value.charAt(0).toUpperCase() + value.slice(1);\n}\n\nfunction dasherize(value) {\n  return value.replace(/([A-Z])/g, function (_, _char2) {\n    return "-".concat(_char2.toLowerCase());\n  });\n}\n\nfunction tokenize(value) {\n  return value.match(/[^\\s]+/g) || [];\n}\n\nvar Action = /*#__PURE__*/function () {\n  function Action(element, index, descriptor) {\n    _classCallCheck(this, Action);\n\n    this.element = element;\n    this.index = index;\n    this.eventTarget = descriptor.eventTarget || element;\n    this.eventName = descriptor.eventName || getDefaultEventNameForElement(element) || error("missing event name");\n    this.eventOptions = descriptor.eventOptions || {};\n    this.identifier = descriptor.identifier || error("missing identifier");\n    this.methodName = descriptor.methodName || error("missing method name");\n  }\n\n  _createClass(Action, [{\n    key: "toString",\n    value: function toString() {\n      var eventNameSuffix = this.eventTargetName ? "@".concat(this.eventTargetName) : "";\n      return "".concat(this.eventName).concat(eventNameSuffix, "->").concat(this.identifier, "#").concat(this.methodName);\n    }\n  }, {\n    key: "getParamsFromEventTargetAttributes",\n    value: function getParamsFromEventTargetAttributes(eventTarget) {\n      var params = {};\n      var pattern = new RegExp("^data-".concat(this.identifier, "-(.+)-param$"));\n      var attributes = Array.from(eventTarget.attributes);\n      attributes.forEach(function (_ref) {\n        var name = _ref.name,\n            value = _ref.value;\n        var match = name.match(pattern);\n        var key = match && match[1];\n\n        if (key) {\n          Object.assign(params, _defineProperty({}, camelize(key), typecast(value)));\n        }\n      });\n      return params;\n    }\n  }, {\n    key: "params",\n    get: function get() {\n      if (this.eventTarget instanceof Element) {\n        return this.getParamsFromEventTargetAttributes(this.eventTarget);\n      } else {\n        return {};\n      }\n    }\n  }, {\n    key: "eventTargetName",\n    get: function get() {\n      return stringifyEventTarget(this.eventTarget);\n    }\n  }], [{\n    key: "forToken",\n    value: function forToken(token) {\n      return new this(token.element, token.index, parseActionDescriptorString(token.content));\n    }\n  }]);\n\n  return Action;\n}();\n\nvar defaultEventNames = {\n  "a": function a(e) {\n    return "click";\n  },\n  "button": function button(e) {\n    return "click";\n  },\n  "form": function form(e) {\n    return "submit";\n  },\n  "details": function details(e) {\n    return "toggle";\n  },\n  "input": function input(e) {\n    return e.getAttribute("type") == "submit" ? "click" : "input";\n  },\n  "select": function select(e) {\n    return "change";\n  },\n  "textarea": function textarea(e) {\n    return "input";\n  }\n};\n\nfunction getDefaultEventNameForElement(element) {\n  var tagName = element.tagName.toLowerCase();\n\n  if (tagName in defaultEventNames) {\n    return defaultEventNames[tagName](element);\n  }\n}\n\nfunction error(message) {\n  throw new Error(message);\n}\n\nfunction typecast(value) {\n  try {\n    return JSON.parse(value);\n  } catch (o_O) {\n    return value;\n  }\n}\n\nvar Binding = /*#__PURE__*/function () {\n  function Binding(context, action) {\n    _classCallCheck(this, Binding);\n\n    this.context = context;\n    this.action = action;\n  }\n\n  _createClass(Binding, [{\n    key: "handleEvent",\n    value: function handleEvent(event) {\n      if (this.willBeInvokedByEvent(event)) {\n        this.invokeWithEvent(event);\n      }\n    }\n  }, {\n    key: "invokeWithEvent",\n    value: function invokeWithEvent(event) {\n      var target = event.target,\n          currentTarget = event.currentTarget;\n\n      try {\n        var params = this.action.params;\n        var actionEvent = Object.assign(event, {\n          params: params\n        });\n        this.method.call(this.controller, actionEvent);\n        this.context.logDebugActivity(this.methodName, {\n          event: event,\n          target: target,\n          currentTarget: currentTarget,\n          action: this.methodName\n        });\n      } catch (error) {\n        var identifier = this.identifier,\n            controller = this.controller,\n            element = this.element,\n            index = this.index;\n        var detail = {\n          identifier: identifier,\n          controller: controller,\n          element: element,\n          index: index,\n          event: event\n        };\n        this.context.handleError(error, "invoking action \\"".concat(this.action, "\\""), detail);\n      }\n    }\n  }, {\n    key: "willBeInvokedByEvent",\n    value: function willBeInvokedByEvent(event) {\n      var eventTarget = event.target;\n\n      if (this.element === eventTarget) {\n        return true;\n      } else if (eventTarget instanceof Element && this.element.contains(eventTarget)) {\n        return this.scope.containsElement(eventTarget);\n      } else {\n        return this.scope.containsElement(this.action.element);\n      }\n    }\n  }, {\n    key: "index",\n    get: function get() {\n      return this.action.index;\n    }\n  }, {\n    key: "eventTarget",\n    get: function get() {\n      return this.action.eventTarget;\n    }\n  }, {\n    key: "eventOptions",\n    get: function get() {\n      return this.action.eventOptions;\n    }\n  }, {\n    key: "identifier",\n    get: function get() {\n      return this.context.identifier;\n    }\n  }, {\n    key: "eventName",\n    get: function get() {\n      return this.action.eventName;\n    }\n  }, {\n    key: "method",\n    get: function get() {\n      var method = this.controller[this.methodName];\n\n      if (typeof method == "function") {\n        return method;\n      }\n\n      throw new Error("Action \\"".concat(this.action, "\\" references undefined method \\"").concat(this.methodName, "\\""));\n    }\n  }, {\n    key: "controller",\n    get: function get() {\n      return this.context.controller;\n    }\n  }, {\n    key: "methodName",\n    get: function get() {\n      return this.action.methodName;\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.scope.element;\n    }\n  }, {\n    key: "scope",\n    get: function get() {\n      return this.context.scope;\n    }\n  }]);\n\n  return Binding;\n}();\n\nvar ElementObserver = /*#__PURE__*/function () {\n  function ElementObserver(element, delegate) {\n    var _this = this;\n\n    _classCallCheck(this, ElementObserver);\n\n    this.mutationObserverInit = {\n      attributes: true,\n      childList: true,\n      subtree: true\n    };\n    this.element = element;\n    this.started = false;\n    this.delegate = delegate;\n    this.elements = new Set();\n    this.mutationObserver = new MutationObserver(function (mutations) {\n      return _this.processMutations(mutations);\n    });\n  }\n\n  _createClass(ElementObserver, [{\n    key: "start",\n    value: function start() {\n      if (!this.started) {\n        this.started = true;\n        this.mutationObserver.observe(this.element, this.mutationObserverInit);\n        this.refresh();\n      }\n    }\n  }, {\n    key: "pause",\n    value: function pause(callback) {\n      if (this.started) {\n        this.mutationObserver.disconnect();\n        this.started = false;\n      }\n\n      callback();\n\n      if (!this.started) {\n        this.mutationObserver.observe(this.element, this.mutationObserverInit);\n        this.started = true;\n      }\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      if (this.started) {\n        this.mutationObserver.takeRecords();\n        this.mutationObserver.disconnect();\n        this.started = false;\n      }\n    }\n  }, {\n    key: "refresh",\n    value: function refresh() {\n      if (this.started) {\n        var matches = new Set(this.matchElementsInTree());\n\n        for (var _i = 0, _Array$from = Array.from(this.elements); _i < _Array$from.length; _i++) {\n          var element = _Array$from[_i];\n\n          if (!matches.has(element)) {\n            this.removeElement(element);\n          }\n        }\n\n        for (var _i2 = 0, _Array$from2 = Array.from(matches); _i2 < _Array$from2.length; _i2++) {\n          var _element = _Array$from2[_i2];\n          this.addElement(_element);\n        }\n      }\n    }\n  }, {\n    key: "processMutations",\n    value: function processMutations(mutations) {\n      if (this.started) {\n        var _iterator2 = _createForOfIteratorHelper(mutations),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var mutation = _step2.value;\n            this.processMutation(mutation);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  }, {\n    key: "processMutation",\n    value: function processMutation(mutation) {\n      if (mutation.type == "attributes") {\n        this.processAttributeChange(mutation.target, mutation.attributeName);\n      } else if (mutation.type == "childList") {\n        this.processRemovedNodes(mutation.removedNodes);\n        this.processAddedNodes(mutation.addedNodes);\n      }\n    }\n  }, {\n    key: "processAttributeChange",\n    value: function processAttributeChange(node, attributeName) {\n      var element = node;\n\n      if (this.elements.has(element)) {\n        if (this.delegate.elementAttributeChanged && this.matchElement(element)) {\n          this.delegate.elementAttributeChanged(element, attributeName);\n        } else {\n          this.removeElement(element);\n        }\n      } else if (this.matchElement(element)) {\n        this.addElement(element);\n      }\n    }\n  }, {\n    key: "processRemovedNodes",\n    value: function processRemovedNodes(nodes) {\n      for (var _i3 = 0, _Array$from3 = Array.from(nodes); _i3 < _Array$from3.length; _i3++) {\n        var node = _Array$from3[_i3];\n        var element = this.elementFromNode(node);\n\n        if (element) {\n          this.processTree(element, this.removeElement);\n        }\n      }\n    }\n  }, {\n    key: "processAddedNodes",\n    value: function processAddedNodes(nodes) {\n      for (var _i4 = 0, _Array$from4 = Array.from(nodes); _i4 < _Array$from4.length; _i4++) {\n        var node = _Array$from4[_i4];\n        var element = this.elementFromNode(node);\n\n        if (element && this.elementIsActive(element)) {\n          this.processTree(element, this.addElement);\n        }\n      }\n    }\n  }, {\n    key: "matchElement",\n    value: function matchElement(element) {\n      return this.delegate.matchElement(element);\n    }\n  }, {\n    key: "matchElementsInTree",\n    value: function matchElementsInTree() {\n      var tree = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.element;\n      return this.delegate.matchElementsInTree(tree);\n    }\n  }, {\n    key: "processTree",\n    value: function processTree(tree, processor) {\n      var _iterator3 = _createForOfIteratorHelper(this.matchElementsInTree(tree)),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var element = _step3.value;\n          processor.call(this, element);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: "elementFromNode",\n    value: function elementFromNode(node) {\n      if (node.nodeType == Node.ELEMENT_NODE) {\n        return node;\n      }\n    }\n  }, {\n    key: "elementIsActive",\n    value: function elementIsActive(element) {\n      if (element.isConnected != this.element.isConnected) {\n        return false;\n      } else {\n        return this.element.contains(element);\n      }\n    }\n  }, {\n    key: "addElement",\n    value: function addElement(element) {\n      if (!this.elements.has(element)) {\n        if (this.elementIsActive(element)) {\n          this.elements.add(element);\n\n          if (this.delegate.elementMatched) {\n            this.delegate.elementMatched(element);\n          }\n        }\n      }\n    }\n  }, {\n    key: "removeElement",\n    value: function removeElement(element) {\n      if (this.elements.has(element)) {\n        this.elements["delete"](element);\n\n        if (this.delegate.elementUnmatched) {\n          this.delegate.elementUnmatched(element);\n        }\n      }\n    }\n  }]);\n\n  return ElementObserver;\n}();\n\nvar AttributeObserver = /*#__PURE__*/function () {\n  function AttributeObserver(element, attributeName, delegate) {\n    _classCallCheck(this, AttributeObserver);\n\n    this.attributeName = attributeName;\n    this.delegate = delegate;\n    this.elementObserver = new ElementObserver(element, this);\n  }\n\n  _createClass(AttributeObserver, [{\n    key: "start",\n    value: function start() {\n      this.elementObserver.start();\n    }\n  }, {\n    key: "pause",\n    value: function pause(callback) {\n      this.elementObserver.pause(callback);\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      this.elementObserver.stop();\n    }\n  }, {\n    key: "refresh",\n    value: function refresh() {\n      this.elementObserver.refresh();\n    }\n  }, {\n    key: "matchElement",\n    value: function matchElement(element) {\n      return element.hasAttribute(this.attributeName);\n    }\n  }, {\n    key: "matchElementsInTree",\n    value: function matchElementsInTree(tree) {\n      var match = this.matchElement(tree) ? [tree] : [];\n      var matches = Array.from(tree.querySelectorAll(this.selector));\n      return match.concat(matches);\n    }\n  }, {\n    key: "elementMatched",\n    value: function elementMatched(element) {\n      if (this.delegate.elementMatchedAttribute) {\n        this.delegate.elementMatchedAttribute(element, this.attributeName);\n      }\n    }\n  }, {\n    key: "elementUnmatched",\n    value: function elementUnmatched(element) {\n      if (this.delegate.elementUnmatchedAttribute) {\n        this.delegate.elementUnmatchedAttribute(element, this.attributeName);\n      }\n    }\n  }, {\n    key: "elementAttributeChanged",\n    value: function elementAttributeChanged(element, attributeName) {\n      if (this.delegate.elementAttributeValueChanged && this.attributeName == attributeName) {\n        this.delegate.elementAttributeValueChanged(element, attributeName);\n      }\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.elementObserver.element;\n    }\n  }, {\n    key: "selector",\n    get: function get() {\n      return "[".concat(this.attributeName, "]");\n    }\n  }, {\n    key: "started",\n    get: function get() {\n      return this.elementObserver.started;\n    }\n  }]);\n\n  return AttributeObserver;\n}();\n\nvar StringMapObserver = /*#__PURE__*/function () {\n  function StringMapObserver(element, delegate) {\n    var _this2 = this;\n\n    _classCallCheck(this, StringMapObserver);\n\n    this.element = element;\n    this.delegate = delegate;\n    this.started = false;\n    this.stringMap = new Map();\n    this.mutationObserver = new MutationObserver(function (mutations) {\n      return _this2.processMutations(mutations);\n    });\n  }\n\n  _createClass(StringMapObserver, [{\n    key: "start",\n    value: function start() {\n      if (!this.started) {\n        this.started = true;\n        this.mutationObserver.observe(this.element, {\n          attributes: true,\n          attributeOldValue: true\n        });\n        this.refresh();\n      }\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      if (this.started) {\n        this.mutationObserver.takeRecords();\n        this.mutationObserver.disconnect();\n        this.started = false;\n      }\n    }\n  }, {\n    key: "refresh",\n    value: function refresh() {\n      if (this.started) {\n        var _iterator4 = _createForOfIteratorHelper(this.knownAttributeNames),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var attributeName = _step4.value;\n            this.refreshAttribute(attributeName, null);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n    }\n  }, {\n    key: "processMutations",\n    value: function processMutations(mutations) {\n      if (this.started) {\n        var _iterator5 = _createForOfIteratorHelper(mutations),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var mutation = _step5.value;\n            this.processMutation(mutation);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    }\n  }, {\n    key: "processMutation",\n    value: function processMutation(mutation) {\n      var attributeName = mutation.attributeName;\n\n      if (attributeName) {\n        this.refreshAttribute(attributeName, mutation.oldValue);\n      }\n    }\n  }, {\n    key: "refreshAttribute",\n    value: function refreshAttribute(attributeName, oldValue) {\n      var key = this.delegate.getStringMapKeyForAttribute(attributeName);\n\n      if (key != null) {\n        if (!this.stringMap.has(attributeName)) {\n          this.stringMapKeyAdded(key, attributeName);\n        }\n\n        var value = this.element.getAttribute(attributeName);\n\n        if (this.stringMap.get(attributeName) != value) {\n          this.stringMapValueChanged(value, key, oldValue);\n        }\n\n        if (value == null) {\n          var _oldValue = this.stringMap.get(attributeName);\n\n          this.stringMap["delete"](attributeName);\n          if (_oldValue) this.stringMapKeyRemoved(key, attributeName, _oldValue);\n        } else {\n          this.stringMap.set(attributeName, value);\n        }\n      }\n    }\n  }, {\n    key: "stringMapKeyAdded",\n    value: function stringMapKeyAdded(key, attributeName) {\n      if (this.delegate.stringMapKeyAdded) {\n        this.delegate.stringMapKeyAdded(key, attributeName);\n      }\n    }\n  }, {\n    key: "stringMapValueChanged",\n    value: function stringMapValueChanged(value, key, oldValue) {\n      if (this.delegate.stringMapValueChanged) {\n        this.delegate.stringMapValueChanged(value, key, oldValue);\n      }\n    }\n  }, {\n    key: "stringMapKeyRemoved",\n    value: function stringMapKeyRemoved(key, attributeName, oldValue) {\n      if (this.delegate.stringMapKeyRemoved) {\n        this.delegate.stringMapKeyRemoved(key, attributeName, oldValue);\n      }\n    }\n  }, {\n    key: "knownAttributeNames",\n    get: function get() {\n      return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)));\n    }\n  }, {\n    key: "currentAttributeNames",\n    get: function get() {\n      return Array.from(this.element.attributes).map(function (attribute) {\n        return attribute.name;\n      });\n    }\n  }, {\n    key: "recordedAttributeNames",\n    get: function get() {\n      return Array.from(this.stringMap.keys());\n    }\n  }]);\n\n  return StringMapObserver;\n}();\n\nfunction _add(map, key, value) {\n  fetch(map, key).add(value);\n}\n\nfunction del(map, key, value) {\n  fetch(map, key)["delete"](value);\n  prune(map, key);\n}\n\nfunction fetch(map, key) {\n  var values = map.get(key);\n\n  if (!values) {\n    values = new Set();\n    map.set(key, values);\n  }\n\n  return values;\n}\n\nfunction prune(map, key) {\n  var values = map.get(key);\n\n  if (values != null && values.size == 0) {\n    map["delete"](key);\n  }\n}\n\nvar Multimap = /*#__PURE__*/function () {\n  function Multimap() {\n    _classCallCheck(this, Multimap);\n\n    this.valuesByKey = new Map();\n  }\n\n  _createClass(Multimap, [{\n    key: "add",\n    value: function add(key, value) {\n      _add(this.valuesByKey, key, value);\n    }\n  }, {\n    key: "delete",\n    value: function _delete(key, value) {\n      del(this.valuesByKey, key, value);\n    }\n  }, {\n    key: "has",\n    value: function has(key, value) {\n      var values = this.valuesByKey.get(key);\n      return values != null && values.has(value);\n    }\n  }, {\n    key: "hasKey",\n    value: function hasKey(key) {\n      return this.valuesByKey.has(key);\n    }\n  }, {\n    key: "hasValue",\n    value: function hasValue(value) {\n      var sets = Array.from(this.valuesByKey.values());\n      return sets.some(function (set) {\n        return set.has(value);\n      });\n    }\n  }, {\n    key: "getValuesForKey",\n    value: function getValuesForKey(key) {\n      var values = this.valuesByKey.get(key);\n      return values ? Array.from(values) : [];\n    }\n  }, {\n    key: "getKeysForValue",\n    value: function getKeysForValue(value) {\n      return Array.from(this.valuesByKey).filter(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n            key = _ref3[0],\n            values = _ref3[1];\n\n        return values.has(value);\n      }).map(function (_ref4) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n            key = _ref5[0],\n            values = _ref5[1];\n\n        return key;\n      });\n    }\n  }, {\n    key: "keys",\n    get: function get() {\n      return Array.from(this.valuesByKey.keys());\n    }\n  }, {\n    key: "values",\n    get: function get() {\n      var sets = Array.from(this.valuesByKey.values());\n      return sets.reduce(function (values, set) {\n        return values.concat(Array.from(set));\n      }, []);\n    }\n  }, {\n    key: "size",\n    get: function get() {\n      var sets = Array.from(this.valuesByKey.values());\n      return sets.reduce(function (size, set) {\n        return size + set.size;\n      }, 0);\n    }\n  }]);\n\n  return Multimap;\n}();\n\nvar IndexedMultimap = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Multimap) {\n  _inherits(IndexedMultimap, _Multimap);\n\n  var _super = _createSuper(IndexedMultimap);\n\n  function IndexedMultimap() {\n    var _this3;\n\n    _classCallCheck(this, IndexedMultimap);\n\n    _this3 = _super.call(this);\n    _this3.keysByValue = new Map();\n    return _this3;\n  }\n\n  _createClass(IndexedMultimap, [{\n    key: "add",\n    value: function add(key, value) {\n      _get(_getPrototypeOf(IndexedMultimap.prototype), "add", this).call(this, key, value);\n\n      _add(this.keysByValue, value, key);\n    }\n  }, {\n    key: "delete",\n    value: function _delete(key, value) {\n      _get(_getPrototypeOf(IndexedMultimap.prototype), "delete", this).call(this, key, value);\n\n      del(this.keysByValue, value, key);\n    }\n  }, {\n    key: "hasValue",\n    value: function hasValue(value) {\n      return this.keysByValue.has(value);\n    }\n  }, {\n    key: "getKeysForValue",\n    value: function getKeysForValue(value) {\n      var set = this.keysByValue.get(value);\n      return set ? Array.from(set) : [];\n    }\n  }, {\n    key: "values",\n    get: function get() {\n      return Array.from(this.keysByValue.keys());\n    }\n  }]);\n\n  return IndexedMultimap;\n}(Multimap)));\n\nvar TokenListObserver = /*#__PURE__*/function () {\n  function TokenListObserver(element, attributeName, delegate) {\n    _classCallCheck(this, TokenListObserver);\n\n    this.attributeObserver = new AttributeObserver(element, attributeName, this);\n    this.delegate = delegate;\n    this.tokensByElement = new Multimap();\n  }\n\n  _createClass(TokenListObserver, [{\n    key: "start",\n    value: function start() {\n      this.attributeObserver.start();\n    }\n  }, {\n    key: "pause",\n    value: function pause(callback) {\n      this.attributeObserver.pause(callback);\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      this.attributeObserver.stop();\n    }\n  }, {\n    key: "refresh",\n    value: function refresh() {\n      this.attributeObserver.refresh();\n    }\n  }, {\n    key: "elementMatchedAttribute",\n    value: function elementMatchedAttribute(element) {\n      this.tokensMatched(this.readTokensForElement(element));\n    }\n  }, {\n    key: "elementAttributeValueChanged",\n    value: function elementAttributeValueChanged(element) {\n      var _this$refreshTokensFo = this.refreshTokensForElement(element),\n          _this$refreshTokensFo2 = _slicedToArray(_this$refreshTokensFo, 2),\n          unmatchedTokens = _this$refreshTokensFo2[0],\n          matchedTokens = _this$refreshTokensFo2[1];\n\n      this.tokensUnmatched(unmatchedTokens);\n      this.tokensMatched(matchedTokens);\n    }\n  }, {\n    key: "elementUnmatchedAttribute",\n    value: function elementUnmatchedAttribute(element) {\n      this.tokensUnmatched(this.tokensByElement.getValuesForKey(element));\n    }\n  }, {\n    key: "tokensMatched",\n    value: function tokensMatched(tokens) {\n      var _this4 = this;\n\n      tokens.forEach(function (token) {\n        return _this4.tokenMatched(token);\n      });\n    }\n  }, {\n    key: "tokensUnmatched",\n    value: function tokensUnmatched(tokens) {\n      var _this5 = this;\n\n      tokens.forEach(function (token) {\n        return _this5.tokenUnmatched(token);\n      });\n    }\n  }, {\n    key: "tokenMatched",\n    value: function tokenMatched(token) {\n      this.delegate.tokenMatched(token);\n      this.tokensByElement.add(token.element, token);\n    }\n  }, {\n    key: "tokenUnmatched",\n    value: function tokenUnmatched(token) {\n      this.delegate.tokenUnmatched(token);\n      this.tokensByElement["delete"](token.element, token);\n    }\n  }, {\n    key: "refreshTokensForElement",\n    value: function refreshTokensForElement(element) {\n      var previousTokens = this.tokensByElement.getValuesForKey(element);\n      var currentTokens = this.readTokensForElement(element);\n      var firstDifferingIndex = zip(previousTokens, currentTokens).findIndex(function (_ref6) {\n        var _ref7 = _slicedToArray(_ref6, 2),\n            previousToken = _ref7[0],\n            currentToken = _ref7[1];\n\n        return !tokensAreEqual(previousToken, currentToken);\n      });\n\n      if (firstDifferingIndex == -1) {\n        return [[], []];\n      } else {\n        return [previousTokens.slice(firstDifferingIndex), currentTokens.slice(firstDifferingIndex)];\n      }\n    }\n  }, {\n    key: "readTokensForElement",\n    value: function readTokensForElement(element) {\n      var attributeName = this.attributeName;\n      var tokenString = element.getAttribute(attributeName) || "";\n      return parseTokenString(tokenString, element, attributeName);\n    }\n  }, {\n    key: "started",\n    get: function get() {\n      return this.attributeObserver.started;\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.attributeObserver.element;\n    }\n  }, {\n    key: "attributeName",\n    get: function get() {\n      return this.attributeObserver.attributeName;\n    }\n  }]);\n\n  return TokenListObserver;\n}();\n\nfunction parseTokenString(tokenString, element, attributeName) {\n  return tokenString.trim().split(/\\s+/).filter(function (content) {\n    return content.length;\n  }).map(function (content, index) {\n    return {\n      element: element,\n      attributeName: attributeName,\n      content: content,\n      index: index\n    };\n  });\n}\n\nfunction zip(left, right) {\n  var length = Math.max(left.length, right.length);\n  return Array.from({\n    length: length\n  }, function (_, index) {\n    return [left[index], right[index]];\n  });\n}\n\nfunction tokensAreEqual(left, right) {\n  return left && right && left.index == right.index && left.content == right.content;\n}\n\nvar ValueListObserver = /*#__PURE__*/function () {\n  function ValueListObserver(element, attributeName, delegate) {\n    _classCallCheck(this, ValueListObserver);\n\n    this.tokenListObserver = new TokenListObserver(element, attributeName, this);\n    this.delegate = delegate;\n    this.parseResultsByToken = new WeakMap();\n    this.valuesByTokenByElement = new WeakMap();\n  }\n\n  _createClass(ValueListObserver, [{\n    key: "start",\n    value: function start() {\n      this.tokenListObserver.start();\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      this.tokenListObserver.stop();\n    }\n  }, {\n    key: "refresh",\n    value: function refresh() {\n      this.tokenListObserver.refresh();\n    }\n  }, {\n    key: "tokenMatched",\n    value: function tokenMatched(token) {\n      var element = token.element;\n\n      var _this$fetchParseResul = this.fetchParseResultForToken(token),\n          value = _this$fetchParseResul.value;\n\n      if (value) {\n        this.fetchValuesByTokenForElement(element).set(token, value);\n        this.delegate.elementMatchedValue(element, value);\n      }\n    }\n  }, {\n    key: "tokenUnmatched",\n    value: function tokenUnmatched(token) {\n      var element = token.element;\n\n      var _this$fetchParseResul2 = this.fetchParseResultForToken(token),\n          value = _this$fetchParseResul2.value;\n\n      if (value) {\n        this.fetchValuesByTokenForElement(element)["delete"](token);\n        this.delegate.elementUnmatchedValue(element, value);\n      }\n    }\n  }, {\n    key: "fetchParseResultForToken",\n    value: function fetchParseResultForToken(token) {\n      var parseResult = this.parseResultsByToken.get(token);\n\n      if (!parseResult) {\n        parseResult = this.parseToken(token);\n        this.parseResultsByToken.set(token, parseResult);\n      }\n\n      return parseResult;\n    }\n  }, {\n    key: "fetchValuesByTokenForElement",\n    value: function fetchValuesByTokenForElement(element) {\n      var valuesByToken = this.valuesByTokenByElement.get(element);\n\n      if (!valuesByToken) {\n        valuesByToken = new Map();\n        this.valuesByTokenByElement.set(element, valuesByToken);\n      }\n\n      return valuesByToken;\n    }\n  }, {\n    key: "parseToken",\n    value: function parseToken(token) {\n      try {\n        var value = this.delegate.parseValueForToken(token);\n        return {\n          value: value\n        };\n      } catch (error) {\n        return {\n          error: error\n        };\n      }\n    }\n  }, {\n    key: "started",\n    get: function get() {\n      return this.tokenListObserver.started;\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.tokenListObserver.element;\n    }\n  }, {\n    key: "attributeName",\n    get: function get() {\n      return this.tokenListObserver.attributeName;\n    }\n  }]);\n\n  return ValueListObserver;\n}();\n\nvar BindingObserver = /*#__PURE__*/function () {\n  function BindingObserver(context, delegate) {\n    _classCallCheck(this, BindingObserver);\n\n    this.context = context;\n    this.delegate = delegate;\n    this.bindingsByAction = new Map();\n  }\n\n  _createClass(BindingObserver, [{\n    key: "start",\n    value: function start() {\n      if (!this.valueListObserver) {\n        this.valueListObserver = new ValueListObserver(this.element, this.actionAttribute, this);\n        this.valueListObserver.start();\n      }\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      if (this.valueListObserver) {\n        this.valueListObserver.stop();\n        delete this.valueListObserver;\n        this.disconnectAllActions();\n      }\n    }\n  }, {\n    key: "connectAction",\n    value: function connectAction(action) {\n      var binding = new Binding(this.context, action);\n      this.bindingsByAction.set(action, binding);\n      this.delegate.bindingConnected(binding);\n    }\n  }, {\n    key: "disconnectAction",\n    value: function disconnectAction(action) {\n      var binding = this.bindingsByAction.get(action);\n\n      if (binding) {\n        this.bindingsByAction["delete"](action);\n        this.delegate.bindingDisconnected(binding);\n      }\n    }\n  }, {\n    key: "disconnectAllActions",\n    value: function disconnectAllActions() {\n      var _this6 = this;\n\n      this.bindings.forEach(function (binding) {\n        return _this6.delegate.bindingDisconnected(binding);\n      });\n      this.bindingsByAction.clear();\n    }\n  }, {\n    key: "parseValueForToken",\n    value: function parseValueForToken(token) {\n      var action = Action.forToken(token);\n\n      if (action.identifier == this.identifier) {\n        return action;\n      }\n    }\n  }, {\n    key: "elementMatchedValue",\n    value: function elementMatchedValue(element, action) {\n      this.connectAction(action);\n    }\n  }, {\n    key: "elementUnmatchedValue",\n    value: function elementUnmatchedValue(element, action) {\n      this.disconnectAction(action);\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.context.element;\n    }\n  }, {\n    key: "identifier",\n    get: function get() {\n      return this.context.identifier;\n    }\n  }, {\n    key: "actionAttribute",\n    get: function get() {\n      return this.schema.actionAttribute;\n    }\n  }, {\n    key: "schema",\n    get: function get() {\n      return this.context.schema;\n    }\n  }, {\n    key: "bindings",\n    get: function get() {\n      return Array.from(this.bindingsByAction.values());\n    }\n  }]);\n\n  return BindingObserver;\n}();\n\nvar ValueObserver = /*#__PURE__*/function () {\n  function ValueObserver(context, receiver) {\n    _classCallCheck(this, ValueObserver);\n\n    this.context = context;\n    this.receiver = receiver;\n    this.stringMapObserver = new StringMapObserver(this.element, this);\n    this.valueDescriptorMap = this.controller.valueDescriptorMap;\n    this.invokeChangedCallbacksForDefaultValues();\n  }\n\n  _createClass(ValueObserver, [{\n    key: "start",\n    value: function start() {\n      this.stringMapObserver.start();\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      this.stringMapObserver.stop();\n    }\n  }, {\n    key: "getStringMapKeyForAttribute",\n    value: function getStringMapKeyForAttribute(attributeName) {\n      if (attributeName in this.valueDescriptorMap) {\n        return this.valueDescriptorMap[attributeName].name;\n      }\n    }\n  }, {\n    key: "stringMapKeyAdded",\n    value: function stringMapKeyAdded(key, attributeName) {\n      var descriptor = this.valueDescriptorMap[attributeName];\n\n      if (!this.hasValue(key)) {\n        this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), descriptor.writer(descriptor.defaultValue));\n      }\n    }\n  }, {\n    key: "stringMapValueChanged",\n    value: function stringMapValueChanged(value, name, oldValue) {\n      var descriptor = this.valueDescriptorNameMap[name];\n      if (value === null) return;\n\n      if (oldValue === null) {\n        oldValue = descriptor.writer(descriptor.defaultValue);\n      }\n\n      this.invokeChangedCallback(name, value, oldValue);\n    }\n  }, {\n    key: "stringMapKeyRemoved",\n    value: function stringMapKeyRemoved(key, attributeName, oldValue) {\n      var descriptor = this.valueDescriptorNameMap[key];\n\n      if (this.hasValue(key)) {\n        this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), oldValue);\n      } else {\n        this.invokeChangedCallback(key, descriptor.writer(descriptor.defaultValue), oldValue);\n      }\n    }\n  }, {\n    key: "invokeChangedCallbacksForDefaultValues",\n    value: function invokeChangedCallbacksForDefaultValues() {\n      var _iterator6 = _createForOfIteratorHelper(this.valueDescriptors),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _step6$value = _step6.value,\n              key = _step6$value.key,\n              name = _step6$value.name,\n              defaultValue = _step6$value.defaultValue,\n              writer = _step6$value.writer;\n\n          if (defaultValue != undefined && !this.controller.data.has(key)) {\n            this.invokeChangedCallback(name, writer(defaultValue), undefined);\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: "invokeChangedCallback",\n    value: function invokeChangedCallback(name, rawValue, rawOldValue) {\n      var changedMethodName = "".concat(name, "Changed");\n      var changedMethod = this.receiver[changedMethodName];\n\n      if (typeof changedMethod == "function") {\n        var descriptor = this.valueDescriptorNameMap[name];\n        var value = descriptor.reader(rawValue);\n        var oldValue = rawOldValue;\n\n        if (rawOldValue) {\n          oldValue = descriptor.reader(rawOldValue);\n        }\n\n        changedMethod.call(this.receiver, value, oldValue);\n      }\n    }\n  }, {\n    key: "hasValue",\n    value: function hasValue(attributeName) {\n      var descriptor = this.valueDescriptorNameMap[attributeName];\n      var hasMethodName = "has".concat(capitalize(descriptor.name));\n      return this.receiver[hasMethodName];\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.context.element;\n    }\n  }, {\n    key: "controller",\n    get: function get() {\n      return this.context.controller;\n    }\n  }, {\n    key: "valueDescriptors",\n    get: function get() {\n      var valueDescriptorMap = this.valueDescriptorMap;\n      return Object.keys(valueDescriptorMap).map(function (key) {\n        return valueDescriptorMap[key];\n      });\n    }\n  }, {\n    key: "valueDescriptorNameMap",\n    get: function get() {\n      var _this7 = this;\n\n      var descriptors = {};\n      Object.keys(this.valueDescriptorMap).forEach(function (key) {\n        var descriptor = _this7.valueDescriptorMap[key];\n        descriptors[descriptor.name] = descriptor;\n      });\n      return descriptors;\n    }\n  }]);\n\n  return ValueObserver;\n}();\n\nvar TargetObserver = /*#__PURE__*/function () {\n  function TargetObserver(context, delegate) {\n    _classCallCheck(this, TargetObserver);\n\n    this.context = context;\n    this.delegate = delegate;\n    this.targetsByName = new Multimap();\n  }\n\n  _createClass(TargetObserver, [{\n    key: "start",\n    value: function start() {\n      if (!this.tokenListObserver) {\n        this.tokenListObserver = new TokenListObserver(this.element, this.attributeName, this);\n        this.tokenListObserver.start();\n      }\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      if (this.tokenListObserver) {\n        this.disconnectAllTargets();\n        this.tokenListObserver.stop();\n        delete this.tokenListObserver;\n      }\n    }\n  }, {\n    key: "tokenMatched",\n    value: function tokenMatched(_ref8) {\n      var element = _ref8.element,\n          name = _ref8.content;\n\n      if (this.scope.containsElement(element)) {\n        this.connectTarget(element, name);\n      }\n    }\n  }, {\n    key: "tokenUnmatched",\n    value: function tokenUnmatched(_ref9) {\n      var element = _ref9.element,\n          name = _ref9.content;\n      this.disconnectTarget(element, name);\n    }\n  }, {\n    key: "connectTarget",\n    value: function connectTarget(element, name) {\n      var _this8 = this;\n\n      var _a;\n\n      if (!this.targetsByName.has(name, element)) {\n        this.targetsByName.add(name, element);\n        (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(function () {\n          return _this8.delegate.targetConnected(element, name);\n        });\n      }\n    }\n  }, {\n    key: "disconnectTarget",\n    value: function disconnectTarget(element, name) {\n      var _this9 = this;\n\n      var _a;\n\n      if (this.targetsByName.has(name, element)) {\n        this.targetsByName["delete"](name, element);\n        (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(function () {\n          return _this9.delegate.targetDisconnected(element, name);\n        });\n      }\n    }\n  }, {\n    key: "disconnectAllTargets",\n    value: function disconnectAllTargets() {\n      var _iterator7 = _createForOfIteratorHelper(this.targetsByName.keys),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var name = _step7.value;\n\n          var _iterator8 = _createForOfIteratorHelper(this.targetsByName.getValuesForKey(name)),\n              _step8;\n\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var element = _step8.value;\n              this.disconnectTarget(element, name);\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }, {\n    key: "attributeName",\n    get: function get() {\n      return "data-".concat(this.context.identifier, "-target");\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.context.element;\n    }\n  }, {\n    key: "scope",\n    get: function get() {\n      return this.context.scope;\n    }\n  }]);\n\n  return TargetObserver;\n}();\n\nvar Context = /*#__PURE__*/function () {\n  function Context(module, scope) {\n    var _this10 = this;\n\n    _classCallCheck(this, Context);\n\n    this.logDebugActivity = function (functionName) {\n      var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var identifier = _this10.identifier,\n          controller = _this10.controller,\n          element = _this10.element;\n      detail = Object.assign({\n        identifier: identifier,\n        controller: controller,\n        element: element\n      }, detail);\n\n      _this10.application.logDebugActivity(_this10.identifier, functionName, detail);\n    };\n\n    this.module = module;\n    this.scope = scope;\n    this.controller = new module.controllerConstructor(this);\n    this.bindingObserver = new BindingObserver(this, this.dispatcher);\n    this.valueObserver = new ValueObserver(this, this.controller);\n    this.targetObserver = new TargetObserver(this, this);\n\n    try {\n      this.controller.initialize();\n      this.logDebugActivity("initialize");\n    } catch (error) {\n      this.handleError(error, "initializing controller");\n    }\n  }\n\n  _createClass(Context, [{\n    key: "connect",\n    value: function connect() {\n      this.bindingObserver.start();\n      this.valueObserver.start();\n      this.targetObserver.start();\n\n      try {\n        this.controller.connect();\n        this.logDebugActivity("connect");\n      } catch (error) {\n        this.handleError(error, "connecting controller");\n      }\n    }\n  }, {\n    key: "disconnect",\n    value: function disconnect() {\n      try {\n        this.controller.disconnect();\n        this.logDebugActivity("disconnect");\n      } catch (error) {\n        this.handleError(error, "disconnecting controller");\n      }\n\n      this.targetObserver.stop();\n      this.valueObserver.stop();\n      this.bindingObserver.stop();\n    }\n  }, {\n    key: "handleError",\n    value: function handleError(error, message) {\n      var detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var identifier = this.identifier,\n          controller = this.controller,\n          element = this.element;\n      detail = Object.assign({\n        identifier: identifier,\n        controller: controller,\n        element: element\n      }, detail);\n      this.application.handleError(error, "Error ".concat(message), detail);\n    }\n  }, {\n    key: "targetConnected",\n    value: function targetConnected(element, name) {\n      this.invokeControllerMethod("".concat(name, "TargetConnected"), element);\n    }\n  }, {\n    key: "targetDisconnected",\n    value: function targetDisconnected(element, name) {\n      this.invokeControllerMethod("".concat(name, "TargetDisconnected"), element);\n    }\n  }, {\n    key: "invokeControllerMethod",\n    value: function invokeControllerMethod(methodName) {\n      var controller = this.controller;\n\n      if (typeof controller[methodName] == "function") {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        controller[methodName].apply(controller, args);\n      }\n    }\n  }, {\n    key: "application",\n    get: function get() {\n      return this.module.application;\n    }\n  }, {\n    key: "identifier",\n    get: function get() {\n      return this.module.identifier;\n    }\n  }, {\n    key: "schema",\n    get: function get() {\n      return this.application.schema;\n    }\n  }, {\n    key: "dispatcher",\n    get: function get() {\n      return this.application.dispatcher;\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.scope.element;\n    }\n  }, {\n    key: "parentElement",\n    get: function get() {\n      return this.element.parentElement;\n    }\n  }]);\n\n  return Context;\n}();\n\nfunction readInheritableStaticArrayValues(constructor, propertyName) {\n  var ancestors = getAncestorsForConstructor(constructor);\n  return Array.from(ancestors.reduce(function (values, constructor) {\n    getOwnStaticArrayValues(constructor, propertyName).forEach(function (name) {\n      return values.add(name);\n    });\n    return values;\n  }, new Set()));\n}\n\nfunction readInheritableStaticObjectPairs(constructor, propertyName) {\n  var ancestors = getAncestorsForConstructor(constructor);\n  return ancestors.reduce(function (pairs, constructor) {\n    pairs.push.apply(pairs, _toConsumableArray(getOwnStaticObjectPairs(constructor, propertyName)));\n    return pairs;\n  }, []);\n}\n\nfunction getAncestorsForConstructor(constructor) {\n  var ancestors = [];\n\n  while (constructor) {\n    ancestors.push(constructor);\n    constructor = Object.getPrototypeOf(constructor);\n  }\n\n  return ancestors.reverse();\n}\n\nfunction getOwnStaticArrayValues(constructor, propertyName) {\n  var definition = constructor[propertyName];\n  return Array.isArray(definition) ? definition : [];\n}\n\nfunction getOwnStaticObjectPairs(constructor, propertyName) {\n  var definition = constructor[propertyName];\n  return definition ? Object.keys(definition).map(function (key) {\n    return [key, definition[key]];\n  }) : [];\n}\n\nfunction bless(constructor) {\n  return shadow(constructor, getBlessedProperties(constructor));\n}\n\nfunction shadow(constructor, properties) {\n  var shadowConstructor = extend(constructor);\n  var shadowProperties = getShadowProperties(constructor.prototype, properties);\n  Object.defineProperties(shadowConstructor.prototype, shadowProperties);\n  return shadowConstructor;\n}\n\nfunction getBlessedProperties(constructor) {\n  var blessings = readInheritableStaticArrayValues(constructor, "blessings");\n  return blessings.reduce(function (blessedProperties, blessing) {\n    var properties = blessing(constructor);\n\n    for (var key in properties) {\n      var descriptor = blessedProperties[key] || {};\n      blessedProperties[key] = Object.assign(descriptor, properties[key]);\n    }\n\n    return blessedProperties;\n  }, {});\n}\n\nfunction getShadowProperties(prototype, properties) {\n  return getOwnKeys(properties).reduce(function (shadowProperties, key) {\n    var descriptor = getShadowedDescriptor(prototype, properties, key);\n\n    if (descriptor) {\n      Object.assign(shadowProperties, _defineProperty({}, key, descriptor));\n    }\n\n    return shadowProperties;\n  }, {});\n}\n\nfunction getShadowedDescriptor(prototype, properties, key) {\n  var shadowingDescriptor = Object.getOwnPropertyDescriptor(prototype, key);\n  var shadowedByValue = shadowingDescriptor && "value" in shadowingDescriptor;\n\n  if (!shadowedByValue) {\n    var descriptor = Object.getOwnPropertyDescriptor(properties, key).value;\n\n    if (shadowingDescriptor) {\n      descriptor.get = shadowingDescriptor.get || descriptor.get;\n      descriptor.set = shadowingDescriptor.set || descriptor.set;\n    }\n\n    return descriptor;\n  }\n}\n\nvar getOwnKeys = function () {\n  if (typeof Object.getOwnPropertySymbols == "function") {\n    return function (object) {\n      return [].concat(_toConsumableArray(Object.getOwnPropertyNames(object)), _toConsumableArray(Object.getOwnPropertySymbols(object)));\n    };\n  } else {\n    return Object.getOwnPropertyNames;\n  }\n}();\n\nvar extend = function () {\n  function extendWithReflect(constructor) {\n    function extended() {\n      return Reflect.construct(constructor, arguments, this instanceof extended ? this.constructor : void 0);\n    }\n\n    extended.prototype = Object.create(constructor.prototype, {\n      constructor: {\n        value: extended\n      }\n    });\n    Reflect.setPrototypeOf(extended, constructor);\n    return extended;\n  }\n\n  function testReflectExtension() {\n    var a = function a() {\n      this.a.call(this);\n    };\n\n    var b = extendWithReflect(a);\n\n    b.prototype.a = function () {};\n\n    return new b();\n  }\n\n  try {\n    testReflectExtension();\n    return extendWithReflect;\n  } catch (error) {\n    return function (constructor) {\n      return /*#__PURE__*/function (_constructor) {\n        _inherits(extended, _constructor);\n\n        var _super2 = _createSuper(extended);\n\n        function extended() {\n          _classCallCheck(this, extended);\n\n          return _super2.apply(this, arguments);\n        }\n\n        return extended;\n      }(constructor);\n    };\n  }\n}();\n\nfunction blessDefinition(definition) {\n  return {\n    identifier: definition.identifier,\n    controllerConstructor: bless(definition.controllerConstructor)\n  };\n}\n\nvar Module = /*#__PURE__*/function () {\n  function Module(application, definition) {\n    _classCallCheck(this, Module);\n\n    this.application = application;\n    this.definition = blessDefinition(definition);\n    this.contextsByScope = new WeakMap();\n    this.connectedContexts = new Set();\n  }\n\n  _createClass(Module, [{\n    key: "connectContextForScope",\n    value: function connectContextForScope(scope) {\n      var context = this.fetchContextForScope(scope);\n      this.connectedContexts.add(context);\n      context.connect();\n    }\n  }, {\n    key: "disconnectContextForScope",\n    value: function disconnectContextForScope(scope) {\n      var context = this.contextsByScope.get(scope);\n\n      if (context) {\n        this.connectedContexts["delete"](context);\n        context.disconnect();\n      }\n    }\n  }, {\n    key: "fetchContextForScope",\n    value: function fetchContextForScope(scope) {\n      var context = this.contextsByScope.get(scope);\n\n      if (!context) {\n        context = new Context(this, scope);\n        this.contextsByScope.set(scope, context);\n      }\n\n      return context;\n    }\n  }, {\n    key: "identifier",\n    get: function get() {\n      return this.definition.identifier;\n    }\n  }, {\n    key: "controllerConstructor",\n    get: function get() {\n      return this.definition.controllerConstructor;\n    }\n  }, {\n    key: "contexts",\n    get: function get() {\n      return Array.from(this.connectedContexts);\n    }\n  }]);\n\n  return Module;\n}();\n\nvar ClassMap = /*#__PURE__*/function () {\n  function ClassMap(scope) {\n    _classCallCheck(this, ClassMap);\n\n    this.scope = scope;\n  }\n\n  _createClass(ClassMap, [{\n    key: "has",\n    value: function has(name) {\n      return this.data.has(this.getDataKey(name));\n    }\n  }, {\n    key: "get",\n    value: function get(name) {\n      return this.getAll(name)[0];\n    }\n  }, {\n    key: "getAll",\n    value: function getAll(name) {\n      var tokenString = this.data.get(this.getDataKey(name)) || "";\n      return tokenize(tokenString);\n    }\n  }, {\n    key: "getAttributeName",\n    value: function getAttributeName(name) {\n      return this.data.getAttributeNameForKey(this.getDataKey(name));\n    }\n  }, {\n    key: "getDataKey",\n    value: function getDataKey(name) {\n      return "".concat(name, "-class");\n    }\n  }, {\n    key: "data",\n    get: function get() {\n      return this.scope.data;\n    }\n  }]);\n\n  return ClassMap;\n}();\n\nvar DataMap = /*#__PURE__*/function () {\n  function DataMap(scope) {\n    _classCallCheck(this, DataMap);\n\n    this.scope = scope;\n  }\n\n  _createClass(DataMap, [{\n    key: "get",\n    value: function get(key) {\n      var name = this.getAttributeNameForKey(key);\n      return this.element.getAttribute(name);\n    }\n  }, {\n    key: "set",\n    value: function set(key, value) {\n      var name = this.getAttributeNameForKey(key);\n      this.element.setAttribute(name, value);\n      return this.get(key);\n    }\n  }, {\n    key: "has",\n    value: function has(key) {\n      var name = this.getAttributeNameForKey(key);\n      return this.element.hasAttribute(name);\n    }\n  }, {\n    key: "delete",\n    value: function _delete(key) {\n      if (this.has(key)) {\n        var name = this.getAttributeNameForKey(key);\n        this.element.removeAttribute(name);\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: "getAttributeNameForKey",\n    value: function getAttributeNameForKey(key) {\n      return "data-".concat(this.identifier, "-").concat(dasherize(key));\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.scope.element;\n    }\n  }, {\n    key: "identifier",\n    get: function get() {\n      return this.scope.identifier;\n    }\n  }]);\n\n  return DataMap;\n}();\n\nvar Guide = /*#__PURE__*/function () {\n  function Guide(logger) {\n    _classCallCheck(this, Guide);\n\n    this.warnedKeysByObject = new WeakMap();\n    this.logger = logger;\n  }\n\n  _createClass(Guide, [{\n    key: "warn",\n    value: function warn(object, key, message) {\n      var warnedKeys = this.warnedKeysByObject.get(object);\n\n      if (!warnedKeys) {\n        warnedKeys = new Set();\n        this.warnedKeysByObject.set(object, warnedKeys);\n      }\n\n      if (!warnedKeys.has(key)) {\n        warnedKeys.add(key);\n        this.logger.warn(message, object);\n      }\n    }\n  }]);\n\n  return Guide;\n}();\n\nfunction attributeValueContainsToken(attributeName, token) {\n  return "[".concat(attributeName, "~=\\"").concat(token, "\\"]");\n}\n\nvar TargetSet = /*#__PURE__*/function () {\n  function TargetSet(scope) {\n    _classCallCheck(this, TargetSet);\n\n    this.scope = scope;\n  }\n\n  _createClass(TargetSet, [{\n    key: "has",\n    value: function has(targetName) {\n      return this.find(targetName) != null;\n    }\n  }, {\n    key: "find",\n    value: function find() {\n      var _this11 = this;\n\n      for (var _len2 = arguments.length, targetNames = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        targetNames[_key2] = arguments[_key2];\n      }\n\n      return targetNames.reduce(function (target, targetName) {\n        return target || _this11.findTarget(targetName) || _this11.findLegacyTarget(targetName);\n      }, undefined);\n    }\n  }, {\n    key: "findAll",\n    value: function findAll() {\n      var _this12 = this;\n\n      for (var _len3 = arguments.length, targetNames = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        targetNames[_key3] = arguments[_key3];\n      }\n\n      return targetNames.reduce(function (targets, targetName) {\n        return [].concat(_toConsumableArray(targets), _toConsumableArray(_this12.findAllTargets(targetName)), _toConsumableArray(_this12.findAllLegacyTargets(targetName)));\n      }, []);\n    }\n  }, {\n    key: "findTarget",\n    value: function findTarget(targetName) {\n      var selector = this.getSelectorForTargetName(targetName);\n      return this.scope.findElement(selector);\n    }\n  }, {\n    key: "findAllTargets",\n    value: function findAllTargets(targetName) {\n      var selector = this.getSelectorForTargetName(targetName);\n      return this.scope.findAllElements(selector);\n    }\n  }, {\n    key: "getSelectorForTargetName",\n    value: function getSelectorForTargetName(targetName) {\n      var attributeName = this.schema.targetAttributeForScope(this.identifier);\n      return attributeValueContainsToken(attributeName, targetName);\n    }\n  }, {\n    key: "findLegacyTarget",\n    value: function findLegacyTarget(targetName) {\n      var selector = this.getLegacySelectorForTargetName(targetName);\n      return this.deprecate(this.scope.findElement(selector), targetName);\n    }\n  }, {\n    key: "findAllLegacyTargets",\n    value: function findAllLegacyTargets(targetName) {\n      var _this13 = this;\n\n      var selector = this.getLegacySelectorForTargetName(targetName);\n      return this.scope.findAllElements(selector).map(function (element) {\n        return _this13.deprecate(element, targetName);\n      });\n    }\n  }, {\n    key: "getLegacySelectorForTargetName",\n    value: function getLegacySelectorForTargetName(targetName) {\n      var targetDescriptor = "".concat(this.identifier, ".").concat(targetName);\n      return attributeValueContainsToken(this.schema.targetAttribute, targetDescriptor);\n    }\n  }, {\n    key: "deprecate",\n    value: function deprecate(element, targetName) {\n      if (element) {\n        var identifier = this.identifier;\n        var attributeName = this.schema.targetAttribute;\n        var revisedAttributeName = this.schema.targetAttributeForScope(identifier);\n        this.guide.warn(element, "target:".concat(targetName), "Please replace ".concat(attributeName, "=\\"").concat(identifier, ".").concat(targetName, "\\" with ").concat(revisedAttributeName, "=\\"").concat(targetName, "\\". ") + "The ".concat(attributeName, " attribute is deprecated and will be removed in a future version of Stimulus."));\n      }\n\n      return element;\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.scope.element;\n    }\n  }, {\n    key: "identifier",\n    get: function get() {\n      return this.scope.identifier;\n    }\n  }, {\n    key: "schema",\n    get: function get() {\n      return this.scope.schema;\n    }\n  }, {\n    key: "guide",\n    get: function get() {\n      return this.scope.guide;\n    }\n  }]);\n\n  return TargetSet;\n}();\n\nvar Scope = /*#__PURE__*/function () {\n  function Scope(schema, element, identifier, logger) {\n    var _this14 = this;\n\n    _classCallCheck(this, Scope);\n\n    this.targets = new TargetSet(this);\n    this.classes = new ClassMap(this);\n    this.data = new DataMap(this);\n\n    this.containsElement = function (element) {\n      return element.closest(_this14.controllerSelector) === _this14.element;\n    };\n\n    this.schema = schema;\n    this.element = element;\n    this.identifier = identifier;\n    this.guide = new Guide(logger);\n  }\n\n  _createClass(Scope, [{\n    key: "findElement",\n    value: function findElement(selector) {\n      return this.element.matches(selector) ? this.element : this.queryElements(selector).find(this.containsElement);\n    }\n  }, {\n    key: "findAllElements",\n    value: function findAllElements(selector) {\n      return [].concat(_toConsumableArray(this.element.matches(selector) ? [this.element] : []), _toConsumableArray(this.queryElements(selector).filter(this.containsElement)));\n    }\n  }, {\n    key: "queryElements",\n    value: function queryElements(selector) {\n      return Array.from(this.element.querySelectorAll(selector));\n    }\n  }, {\n    key: "controllerSelector",\n    get: function get() {\n      return attributeValueContainsToken(this.schema.controllerAttribute, this.identifier);\n    }\n  }]);\n\n  return Scope;\n}();\n\nvar ScopeObserver = /*#__PURE__*/function () {\n  function ScopeObserver(element, schema, delegate) {\n    _classCallCheck(this, ScopeObserver);\n\n    this.element = element;\n    this.schema = schema;\n    this.delegate = delegate;\n    this.valueListObserver = new ValueListObserver(this.element, this.controllerAttribute, this);\n    this.scopesByIdentifierByElement = new WeakMap();\n    this.scopeReferenceCounts = new WeakMap();\n  }\n\n  _createClass(ScopeObserver, [{\n    key: "start",\n    value: function start() {\n      this.valueListObserver.start();\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      this.valueListObserver.stop();\n    }\n  }, {\n    key: "parseValueForToken",\n    value: function parseValueForToken(token) {\n      var element = token.element,\n          identifier = token.content;\n      var scopesByIdentifier = this.fetchScopesByIdentifierForElement(element);\n      var scope = scopesByIdentifier.get(identifier);\n\n      if (!scope) {\n        scope = this.delegate.createScopeForElementAndIdentifier(element, identifier);\n        scopesByIdentifier.set(identifier, scope);\n      }\n\n      return scope;\n    }\n  }, {\n    key: "elementMatchedValue",\n    value: function elementMatchedValue(element, value) {\n      var referenceCount = (this.scopeReferenceCounts.get(value) || 0) + 1;\n      this.scopeReferenceCounts.set(value, referenceCount);\n\n      if (referenceCount == 1) {\n        this.delegate.scopeConnected(value);\n      }\n    }\n  }, {\n    key: "elementUnmatchedValue",\n    value: function elementUnmatchedValue(element, value) {\n      var referenceCount = this.scopeReferenceCounts.get(value);\n\n      if (referenceCount) {\n        this.scopeReferenceCounts.set(value, referenceCount - 1);\n\n        if (referenceCount == 1) {\n          this.delegate.scopeDisconnected(value);\n        }\n      }\n    }\n  }, {\n    key: "fetchScopesByIdentifierForElement",\n    value: function fetchScopesByIdentifierForElement(element) {\n      var scopesByIdentifier = this.scopesByIdentifierByElement.get(element);\n\n      if (!scopesByIdentifier) {\n        scopesByIdentifier = new Map();\n        this.scopesByIdentifierByElement.set(element, scopesByIdentifier);\n      }\n\n      return scopesByIdentifier;\n    }\n  }, {\n    key: "controllerAttribute",\n    get: function get() {\n      return this.schema.controllerAttribute;\n    }\n  }]);\n\n  return ScopeObserver;\n}();\n\nvar Router = /*#__PURE__*/function () {\n  function Router(application) {\n    _classCallCheck(this, Router);\n\n    this.application = application;\n    this.scopeObserver = new ScopeObserver(this.element, this.schema, this);\n    this.scopesByIdentifier = new Multimap();\n    this.modulesByIdentifier = new Map();\n  }\n\n  _createClass(Router, [{\n    key: "start",\n    value: function start() {\n      this.scopeObserver.start();\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      this.scopeObserver.stop();\n    }\n  }, {\n    key: "loadDefinition",\n    value: function loadDefinition(definition) {\n      this.unloadIdentifier(definition.identifier);\n      var module = new Module(this.application, definition);\n      this.connectModule(module);\n    }\n  }, {\n    key: "unloadIdentifier",\n    value: function unloadIdentifier(identifier) {\n      var module = this.modulesByIdentifier.get(identifier);\n\n      if (module) {\n        this.disconnectModule(module);\n      }\n    }\n  }, {\n    key: "getContextForElementAndIdentifier",\n    value: function getContextForElementAndIdentifier(element, identifier) {\n      var module = this.modulesByIdentifier.get(identifier);\n\n      if (module) {\n        return module.contexts.find(function (context) {\n          return context.element == element;\n        });\n      }\n    }\n  }, {\n    key: "handleError",\n    value: function handleError(error, message, detail) {\n      this.application.handleError(error, message, detail);\n    }\n  }, {\n    key: "createScopeForElementAndIdentifier",\n    value: function createScopeForElementAndIdentifier(element, identifier) {\n      return new Scope(this.schema, element, identifier, this.logger);\n    }\n  }, {\n    key: "scopeConnected",\n    value: function scopeConnected(scope) {\n      this.scopesByIdentifier.add(scope.identifier, scope);\n      var module = this.modulesByIdentifier.get(scope.identifier);\n\n      if (module) {\n        module.connectContextForScope(scope);\n      }\n    }\n  }, {\n    key: "scopeDisconnected",\n    value: function scopeDisconnected(scope) {\n      this.scopesByIdentifier["delete"](scope.identifier, scope);\n      var module = this.modulesByIdentifier.get(scope.identifier);\n\n      if (module) {\n        module.disconnectContextForScope(scope);\n      }\n    }\n  }, {\n    key: "connectModule",\n    value: function connectModule(module) {\n      this.modulesByIdentifier.set(module.identifier, module);\n      var scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);\n      scopes.forEach(function (scope) {\n        return module.connectContextForScope(scope);\n      });\n    }\n  }, {\n    key: "disconnectModule",\n    value: function disconnectModule(module) {\n      this.modulesByIdentifier["delete"](module.identifier);\n      var scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);\n      scopes.forEach(function (scope) {\n        return module.disconnectContextForScope(scope);\n      });\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.application.element;\n    }\n  }, {\n    key: "schema",\n    get: function get() {\n      return this.application.schema;\n    }\n  }, {\n    key: "logger",\n    get: function get() {\n      return this.application.logger;\n    }\n  }, {\n    key: "controllerAttribute",\n    get: function get() {\n      return this.schema.controllerAttribute;\n    }\n  }, {\n    key: "modules",\n    get: function get() {\n      return Array.from(this.modulesByIdentifier.values());\n    }\n  }, {\n    key: "contexts",\n    get: function get() {\n      return this.modules.reduce(function (contexts, module) {\n        return contexts.concat(module.contexts);\n      }, []);\n    }\n  }]);\n\n  return Router;\n}();\n\nvar defaultSchema = {\n  controllerAttribute: "data-controller",\n  actionAttribute: "data-action",\n  targetAttribute: "data-target",\n  targetAttributeForScope: function targetAttributeForScope(identifier) {\n    return "data-".concat(identifier, "-target");\n  }\n};\n\nvar Application = /*#__PURE__*/function () {\n  function Application() {\n    var _this15 = this;\n\n    var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.documentElement;\n    var schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultSchema;\n\n    _classCallCheck(this, Application);\n\n    this.logger = console;\n    this.debug = false;\n\n    this.logDebugActivity = function (identifier, functionName) {\n      var detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (_this15.debug) {\n        _this15.logFormattedMessage(identifier, functionName, detail);\n      }\n    };\n\n    this.element = element;\n    this.schema = schema;\n    this.dispatcher = new Dispatcher(this);\n    this.router = new Router(this);\n  }\n\n  _createClass(Application, [{\n    key: "start",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return domReady();\n\n              case 2:\n                this.logDebugActivity("application", "starting");\n                this.dispatcher.start();\n                this.router.start();\n                this.logDebugActivity("application", "start");\n\n              case 6:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function start() {\n        return _start.apply(this, arguments);\n      }\n\n      return start;\n    }()\n  }, {\n    key: "stop",\n    value: function stop() {\n      this.logDebugActivity("application", "stopping");\n      this.dispatcher.stop();\n      this.router.stop();\n      this.logDebugActivity("application", "stop");\n    }\n  }, {\n    key: "register",\n    value: function register(identifier, controllerConstructor) {\n      if (controllerConstructor.shouldLoad) {\n        this.load({\n          identifier: identifier,\n          controllerConstructor: controllerConstructor\n        });\n      }\n    }\n  }, {\n    key: "load",\n    value: function load(head) {\n      var _this16 = this;\n\n      for (var _len4 = arguments.length, rest = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        rest[_key4 - 1] = arguments[_key4];\n      }\n\n      var definitions = Array.isArray(head) ? head : [head].concat(rest);\n      definitions.forEach(function (definition) {\n        return _this16.router.loadDefinition(definition);\n      });\n    }\n  }, {\n    key: "unload",\n    value: function unload(head) {\n      var _this17 = this;\n\n      for (var _len5 = arguments.length, rest = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        rest[_key5 - 1] = arguments[_key5];\n      }\n\n      var identifiers = Array.isArray(head) ? head : [head].concat(rest);\n      identifiers.forEach(function (identifier) {\n        return _this17.router.unloadIdentifier(identifier);\n      });\n    }\n  }, {\n    key: "getControllerForElementAndIdentifier",\n    value: function getControllerForElementAndIdentifier(element, identifier) {\n      var context = this.router.getContextForElementAndIdentifier(element, identifier);\n      return context ? context.controller : null;\n    }\n  }, {\n    key: "handleError",\n    value: function handleError(error, message, detail) {\n      var _a;\n\n      this.logger.error("%s\\n\\n%o\\n\\n%o", message, error, detail);\n      (_a = window.onerror) === null || _a === void 0 ? void 0 : _a.call(window, message, "", 0, 0, error);\n    }\n  }, {\n    key: "logFormattedMessage",\n    value: function logFormattedMessage(identifier, functionName) {\n      var detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      detail = Object.assign({\n        application: this\n      }, detail);\n      this.logger.groupCollapsed("".concat(identifier, " #").concat(functionName));\n      this.logger.log("details:", Object.assign({}, detail));\n      this.logger.groupEnd();\n    }\n  }, {\n    key: "controllers",\n    get: function get() {\n      return this.router.contexts.map(function (context) {\n        return context.controller;\n      });\n    }\n  }], [{\n    key: "start",\n    value: function start(element, schema) {\n      var application = new Application(element, schema);\n      application.start();\n      return application;\n    }\n  }]);\n\n  return Application;\n}();\n\nfunction domReady() {\n  return new Promise(function (resolve) {\n    if (document.readyState == "loading") {\n      document.addEventListener("DOMContentLoaded", function () {\n        return resolve();\n      });\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction ClassPropertiesBlessing(constructor) {\n  var classes = readInheritableStaticArrayValues(constructor, "classes");\n  return classes.reduce(function (properties, classDefinition) {\n    return Object.assign(properties, propertiesForClassDefinition(classDefinition));\n  }, {});\n}\n\nfunction propertiesForClassDefinition(key) {\n  var _ref10;\n\n  return _ref10 = {}, _defineProperty(_ref10, "".concat(key, "Class"), {\n    get: function get() {\n      var classes = this.classes;\n\n      if (classes.has(key)) {\n        return classes.get(key);\n      } else {\n        var attribute = classes.getAttributeName(key);\n        throw new Error("Missing attribute \\"".concat(attribute, "\\""));\n      }\n    }\n  }), _defineProperty(_ref10, "".concat(key, "Classes"), {\n    get: function get() {\n      return this.classes.getAll(key);\n    }\n  }), _defineProperty(_ref10, "has".concat(capitalize(key), "Class"), {\n    get: function get() {\n      return this.classes.has(key);\n    }\n  }), _ref10;\n}\n\nfunction TargetPropertiesBlessing(constructor) {\n  var targets = readInheritableStaticArrayValues(constructor, "targets");\n  return targets.reduce(function (properties, targetDefinition) {\n    return Object.assign(properties, propertiesForTargetDefinition(targetDefinition));\n  }, {});\n}\n\nfunction propertiesForTargetDefinition(name) {\n  var _ref11;\n\n  return _ref11 = {}, _defineProperty(_ref11, "".concat(name, "Target"), {\n    get: function get() {\n      var target = this.targets.find(name);\n\n      if (target) {\n        return target;\n      } else {\n        throw new Error("Missing target element \\"".concat(name, "\\" for \\"").concat(this.identifier, "\\" controller"));\n      }\n    }\n  }), _defineProperty(_ref11, "".concat(name, "Targets"), {\n    get: function get() {\n      return this.targets.findAll(name);\n    }\n  }), _defineProperty(_ref11, "has".concat(capitalize(name), "Target"), {\n    get: function get() {\n      return this.targets.has(name);\n    }\n  }), _ref11;\n}\n\nfunction ValuePropertiesBlessing(constructor) {\n  var valueDefinitionPairs = readInheritableStaticObjectPairs(constructor, "values");\n  var propertyDescriptorMap = {\n    valueDescriptorMap: {\n      get: function get() {\n        var _this18 = this;\n\n        return valueDefinitionPairs.reduce(function (result, valueDefinitionPair) {\n          var valueDescriptor = parseValueDefinitionPair(valueDefinitionPair);\n\n          var attributeName = _this18.data.getAttributeNameForKey(valueDescriptor.key);\n\n          return Object.assign(result, _defineProperty({}, attributeName, valueDescriptor));\n        }, {});\n      }\n    }\n  };\n  return valueDefinitionPairs.reduce(function (properties, valueDefinitionPair) {\n    return Object.assign(properties, propertiesForValueDefinitionPair(valueDefinitionPair));\n  }, propertyDescriptorMap);\n}\n\nfunction propertiesForValueDefinitionPair(valueDefinitionPair) {\n  var _ref12;\n\n  var definition = parseValueDefinitionPair(valueDefinitionPair);\n  var key = definition.key,\n      name = definition.name,\n      read = definition.reader,\n      write = definition.writer;\n  return _ref12 = {}, _defineProperty(_ref12, name, {\n    get: function get() {\n      var value = this.data.get(key);\n\n      if (value !== null) {\n        return read(value);\n      } else {\n        return definition.defaultValue;\n      }\n    },\n    set: function set(value) {\n      if (value === undefined) {\n        this.data["delete"](key);\n      } else {\n        this.data.set(key, write(value));\n      }\n    }\n  }), _defineProperty(_ref12, "has".concat(capitalize(name)), {\n    get: function get() {\n      return this.data.has(key) || definition.hasCustomDefaultValue;\n    }\n  }), _ref12;\n}\n\nfunction parseValueDefinitionPair(_ref13) {\n  var _ref14 = _slicedToArray(_ref13, 2),\n      token = _ref14[0],\n      typeDefinition = _ref14[1];\n\n  return valueDescriptorForTokenAndTypeDefinition(token, typeDefinition);\n}\n\nfunction parseValueTypeConstant(constant) {\n  switch (constant) {\n    case Array:\n      return "array";\n\n    case Boolean:\n      return "boolean";\n\n    case Number:\n      return "number";\n\n    case Object:\n      return "object";\n\n    case String:\n      return "string";\n  }\n}\n\nfunction parseValueTypeDefault(defaultValue) {\n  switch (_typeof(defaultValue)) {\n    case "boolean":\n      return "boolean";\n\n    case "number":\n      return "number";\n\n    case "string":\n      return "string";\n  }\n\n  if (Array.isArray(defaultValue)) return "array";\n  if (Object.prototype.toString.call(defaultValue) === "[object Object]") return "object";\n}\n\nfunction parseValueTypeObject(typeObject) {\n  var typeFromObject = parseValueTypeConstant(typeObject.type);\n\n  if (typeFromObject) {\n    var defaultValueType = parseValueTypeDefault(typeObject["default"]);\n\n    if (typeFromObject !== defaultValueType) {\n      throw new Error("Type \\"".concat(typeFromObject, "\\" must match the type of the default value. Given default value: \\"").concat(typeObject["default"], "\\" as \\"").concat(defaultValueType, "\\""));\n    }\n\n    return typeFromObject;\n  }\n}\n\nfunction parseValueTypeDefinition(typeDefinition) {\n  var typeFromObject = parseValueTypeObject(typeDefinition);\n  var typeFromDefaultValue = parseValueTypeDefault(typeDefinition);\n  var typeFromConstant = parseValueTypeConstant(typeDefinition);\n  var type = typeFromObject || typeFromDefaultValue || typeFromConstant;\n  if (type) return type;\n  throw new Error("Unknown value type \\"".concat(typeDefinition, "\\""));\n}\n\nfunction defaultValueForDefinition(typeDefinition) {\n  var constant = parseValueTypeConstant(typeDefinition);\n  if (constant) return defaultValuesByType[constant];\n  var defaultValue = typeDefinition["default"];\n  if (defaultValue !== undefined) return defaultValue;\n  return typeDefinition;\n}\n\nfunction valueDescriptorForTokenAndTypeDefinition(token, typeDefinition) {\n  var key = "".concat(dasherize(token), "-value");\n  var type = parseValueTypeDefinition(typeDefinition);\n  return {\n    type: type,\n    key: key,\n    name: camelize(key),\n\n    get defaultValue() {\n      return defaultValueForDefinition(typeDefinition);\n    },\n\n    get hasCustomDefaultValue() {\n      return parseValueTypeDefault(typeDefinition) !== undefined;\n    },\n\n    reader: readers[type],\n    writer: writers[type] || writers["default"]\n  };\n}\n\nvar defaultValuesByType = {\n  get array() {\n    return [];\n  },\n\n  "boolean": false,\n  number: 0,\n\n  get object() {\n    return {};\n  },\n\n  string: ""\n};\nvar readers = {\n  array: function array(value) {\n    var array = JSON.parse(value);\n\n    if (!Array.isArray(array)) {\n      throw new TypeError("Expected array");\n    }\n\n    return array;\n  },\n  "boolean": function boolean(value) {\n    return !(value == "0" || value == "false");\n  },\n  number: function number(value) {\n    return Number(value);\n  },\n  object: function object(value) {\n    var object = JSON.parse(value);\n\n    if (object === null || _typeof(object) != "object" || Array.isArray(object)) {\n      throw new TypeError("Expected object");\n    }\n\n    return object;\n  },\n  string: function string(value) {\n    return value;\n  }\n};\nvar writers = {\n  "default": writeString,\n  array: writeJSON,\n  object: writeJSON\n};\n\nfunction writeJSON(value) {\n  return JSON.stringify(value);\n}\n\nfunction writeString(value) {\n  return "".concat(value);\n}\n\nvar Controller = /*#__PURE__*/function () {\n  function Controller(context) {\n    _classCallCheck(this, Controller);\n\n    this.context = context;\n  }\n\n  _createClass(Controller, [{\n    key: "initialize",\n    value: function initialize() {}\n  }, {\n    key: "connect",\n    value: function connect() {}\n  }, {\n    key: "disconnect",\n    value: function disconnect() {}\n  }, {\n    key: "dispatch",\n    value: function dispatch(eventName) {\n      var _ref15 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref15$target = _ref15.target,\n          target = _ref15$target === void 0 ? this.element : _ref15$target,\n          _ref15$detail = _ref15.detail,\n          detail = _ref15$detail === void 0 ? {} : _ref15$detail,\n          _ref15$prefix = _ref15.prefix,\n          prefix = _ref15$prefix === void 0 ? this.identifier : _ref15$prefix,\n          _ref15$bubbles = _ref15.bubbles,\n          bubbles = _ref15$bubbles === void 0 ? true : _ref15$bubbles,\n          _ref15$cancelable = _ref15.cancelable,\n          cancelable = _ref15$cancelable === void 0 ? true : _ref15$cancelable;\n\n      var type = prefix ? "".concat(prefix, ":").concat(eventName) : eventName;\n      var event = new CustomEvent(type, {\n        detail: detail,\n        bubbles: bubbles,\n        cancelable: cancelable\n      });\n      target.dispatchEvent(event);\n      return event;\n    }\n  }, {\n    key: "application",\n    get: function get() {\n      return this.context.application;\n    }\n  }, {\n    key: "scope",\n    get: function get() {\n      return this.context.scope;\n    }\n  }, {\n    key: "element",\n    get: function get() {\n      return this.scope.element;\n    }\n  }, {\n    key: "identifier",\n    get: function get() {\n      return this.scope.identifier;\n    }\n  }, {\n    key: "targets",\n    get: function get() {\n      return this.scope.targets;\n    }\n  }, {\n    key: "classes",\n    get: function get() {\n      return this.scope.classes;\n    }\n  }, {\n    key: "data",\n    get: function get() {\n      return this.scope.data;\n    }\n  }], [{\n    key: "shouldLoad",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return Controller;\n}();\n\nController.blessings = [ClassPropertiesBlessing, TargetPropertiesBlessing, ValuePropertiesBlessing];\nController.targets = [];\nController.values = {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///318\n')},416:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(853);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(147);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(734);\n/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(50);\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(56);\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(470);\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(318);\n/* harmony import */ var pubsub_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(990);\n/* harmony import */ var pubsub_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(pubsub_js__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var lodash_camelcase__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(766);\n/* harmony import */ var lodash_camelcase__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(lodash_camelcase__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === "undefined" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === "function") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n\n\n\n\nvar ApplicationController = /*#__PURE__*/function (_Controller) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(ApplicationController, _Controller);\n\n  var _super = _createSuper(ApplicationController);\n\n  function ApplicationController() {\n    var _this;\n\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, ApplicationController);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.__timeouts = [];\n    _this.__events = [];\n    _this.__subscriptions = [];\n    _this.element[_this.controllerName] = _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2___default()(_this);\n    return _this;\n  }\n  /**\n   * Don\'t forget to call `super.disconnect()` if you override the disconnect hook.\n   */\n\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(ApplicationController, [{\n    key: "disconnect",\n    value: function disconnect() {\n      this.clearAllTimeouts();\n\n      this.__events.forEach(function (_ref) {\n        var receiver = _ref.receiver,\n            event = _ref.event,\n            callback = _ref.callback;\n        receiver.removeEventListener(event, callback);\n      });\n\n      this.__subscriptions.forEach(function (subscription) {\n        (0,pubsub_js__WEBPACK_IMPORTED_MODULE_7__.unsubscribe)(subscription);\n      });\n\n      this.element[this.controllerName] = null;\n    }\n    /**\n     * The controller name in camel came\n     */\n\n  }, {\n    key: "later",\n\n    /**\n     * Executes a callback function after some delay.\\\n     * Same as window.setTimeout, but timeouts are cancelled automatically on disconnect.\n     * - Don\'t forget to call `super.disconnect()` if you override the disconnect hook.\n     *\n     * @param {function} callback\n     * @param {number} [delay=0]\n     */\n    value: function later(callback) {\n      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      this.__timeouts.push(setTimeout(callback, delay));\n    }\n    /**\n     * Clears all registered timeouts without waiting for controller disconnect.\n     */\n\n  }, {\n    key: "clearAllTimeouts",\n    value: function clearAllTimeouts() {\n      this.__timeouts.forEach(function (id) {\n        return clearTimeout(id);\n      });\n\n      this.__timeouts = [];\n    }\n    /**\n     * Binds the given callback to the receiver\'s event.\\\n     * Same as HTMLElement.addEventListener, but listeners are removed automatically on disconnect.\n     * - Don\'t forget to call `super.disconnect()` if you override the disconnect hook.\n     * - If events is a space-separated list of events, each events gets bound.\n     *\n     * @param {HTMLElement} receiver\n     * @param {string} events\n     * @param {function} callback\n     * @param {boolean | AddEventListenerOptions} [options]\n     */\n\n  }, {\n    key: "bind",\n    value: function bind(receiver, events, callback, options) {\n      var _this2 = this;\n\n      var listeners = events.split(\' \').map(function (event) {\n        var data = {\n          receiver: receiver,\n          event: event,\n          callback: callback\n        };\n        receiver.addEventListener(event, callback, options);\n\n        _this2.__events.push(data);\n\n        return data;\n      });\n\n      if (listeners.length === 1) {\n        return listeners[0];\n      }\n\n      return listeners;\n    }\n    /**\n     * Unbinds all listeners of the given event types.\n     *\n     * @param {string[]} events\n     */\n\n  }, {\n    key: "unbind",\n    value: function unbind() {\n      for (var _len2 = arguments.length, events = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        events[_key2] = arguments[_key2];\n      }\n\n      var matchingEvents = this.__events.filter(function (_ref2) {\n        var event = _ref2.event;\n        return events.includes(event);\n      });\n\n      var rest = this.__events.filter(function (_ref3) {\n        var event = _ref3.event;\n        return !events.includes(event);\n      });\n\n      matchingEvents.forEach(function (_ref4) {\n        var receiver = _ref4.receiver,\n            event = _ref4.event,\n            callback = _ref4.callback;\n        receiver.removeEventListener(event, callback);\n      });\n      this.__events = rest;\n    }\n    /**\n     * Unbinds all given listeners.\n     *\n     * @param {Object[]} listeners\n     */\n\n  }, {\n    key: "unbindListeners",\n    value: function unbindListeners() {\n      var _this3 = this;\n\n      for (var _len3 = arguments.length, listeners = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        listeners[_key3] = arguments[_key3];\n      }\n\n      listeners.forEach(function (listener) {\n        var receiver = listener.receiver,\n            event = listener.event,\n            callback = listener.callback;\n        receiver.removeEventListener(event, callback);\n\n        _this3.__events.pop(listener);\n      });\n    }\n    /**\n     * Publishes a PubSubJS event. Helper function.\n     *\n     * @param {string} message Message descriptor\n     * @param {*} data User data\n     */\n\n  }, {\n    key: "publish",\n    value: function publish(message, data) {\n      return (0,pubsub_js__WEBPACK_IMPORTED_MODULE_7__.publish)(message, data);\n    }\n    /**\n     * Subscribes to a PubSub event.\\\n     * Same as the native PubSubJS subscribe function, but unsubscribes automatically on disconnect.\n     * - Don\'t forget to call `super.disconnect()` if you override the disconnect hook.\n     *\n     * @param {string} message\n     * @param {SubscriptionCallback} func\n     */\n\n  }, {\n    key: "subscribe",\n    value: function subscribe(message, func) {\n      var subscription = (0,pubsub_js__WEBPACK_IMPORTED_MODULE_7__.subscribe)(message, func);\n\n      this.__subscriptions.push(pubsub_js__WEBPACK_IMPORTED_MODULE_7__.subscribe);\n\n      return subscription;\n    }\n    /**\n     * Unsubscribes from a PubSub event.\n     *\n     * @param {Subscription} subscription\n     */\n\n  }, {\n    key: "unsubscribe",\n    value: function unsubscribe(subscription) {\n      (0,pubsub_js__WEBPACK_IMPORTED_MODULE_7__.unsubscribe)(subscription);\n\n      this.__subscriptions = this.__subscriptions.filter(function (sub) {\n        return sub !== subscription;\n      });\n    }\n  }, {\n    key: "camelCaseIdentifier",\n    get: function get() {\n      return lodash_camelcase__WEBPACK_IMPORTED_MODULE_8___default()(this.identifier);\n    }\n    /**\n     * The controller name formatted as {name}Controller.\n     */\n\n  }, {\n    key: "controllerName",\n    get: function get() {\n      return "".concat(this.camelCaseIdentifier, "Controller");\n    }\n  }]);\n\n  return ApplicationController;\n}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_6__/* .Controller */ .Qr);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ApplicationController);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///416\n')},642:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ _default\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(853);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(147);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(50);\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(56);\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(470);\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(156);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _common_application_controller__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(416);\n\n\n\n\n\n\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n\n\nvar _default = /*#__PURE__*/function (_ApplicationControlle) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(_default, _ApplicationControlle);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, _default);\n\n    return _super.apply(this, arguments);\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(_default, [{\n    key: \"setStatusMessage\",\n    value: function setStatusMessage(status) {\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      this.statusMessageTargets.forEach(function (target) {\n        var defaultSuccessMessage = target.dataset.defaultSuccessMessage;\n        target.dataset.status = status;\n\n        if (status === 'success') {\n          target.innerText = defaultSuccessMessage || message;\n        } else {\n          target.innerText = message;\n        }\n      });\n    }\n  }, {\n    key: \"dispatch\",\n    value: function dispatch(name) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var event = new Event(\"mvpf:\".concat(name));\n      event.detail = data;\n      this.element.dispatchEvent(event);\n    }\n  }, {\n    key: \"sendForm\",\n    value: function sendForm() {\n      var _this = this;\n\n      if (this.status !== 'sending') {\n        this.setStatusMessage('sending');\n        this.status = 'sending';\n        fetch(this.ajaxURL, {\n          method: 'POST',\n          credentials: 'same-origin',\n          headers: new Headers({\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'X-Mvpf-Method': 'AJAX'\n          }),\n          body: this.formParams\n        }).then(function (response) {\n          if (response.ok) {\n            return response.json();\n          } // TODO: Translate this message\n\n\n          throw new Error('Error while submitting form');\n        }).then(function (json) {\n          var success = json.success,\n              message = json.message;\n\n          _this.setStatusMessage(success ? 'success' : 'error', message);\n\n          _this.dispatch('ajax-submitted', {\n            success: success,\n            message: message\n          });\n        })[\"catch\"](function (error) {\n          _this.setStatusMessage('error', error);\n\n          _this.dispatch('ajax-submitted', {\n            success: false,\n            error: error\n          });\n        })[\"finally\"](function () {\n          _this.status = null;\n        });\n      }\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      event.preventDefault();\n      this.sendForm();\n    }\n  }, {\n    key: \"ajaxURL\",\n    get: function get() {\n      var _window, _window$__mvpf, _window$__mvpf$adminA;\n\n      return (_window = window) === null || _window === void 0 ? void 0 : (_window$__mvpf = _window.__mvpf) === null || _window$__mvpf === void 0 ? void 0 : (_window$__mvpf$adminA = _window$__mvpf.adminAjax) === null || _window$__mvpf$adminA === void 0 ? void 0 : _window$__mvpf$adminA.url;\n    }\n  }, {\n    key: \"formData\",\n    get: function get() {\n      return new FormData(this.element);\n    }\n  }, {\n    key: \"formParams\",\n    get: function get() {\n      return new URLSearchParams(this.formData);\n    }\n  }, {\n    key: \"status\",\n    set: function set(value) {\n      if (value) {\n        this.data.set('status', value);\n      } else {\n        this.data[\"delete\"]('status');\n      }\n    },\n    get: function get() {\n      return this.data.get('status');\n    }\n  }]);\n\n  return _default;\n}(_common_application_controller__WEBPACK_IMPORTED_MODULE_6__/* .default */ .Z);\n\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5___default()(_default, \"targets\", ['statusMessage']);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9qcy9mcm9udC9jb250cm9sbGVycy9tYXNodnAtZm9ybXMvYWpheC1jb250cm9sbGVyLmpzPzNkNDUiXSwibmFtZXMiOlsic3RhdHVzIiwibWVzc2FnZSIsImRlZmF1bHRTdWNjZXNzTWVzc2FnZSIsInRhcmdldCIsIm5hbWUiLCJkYXRhIiwiZXZlbnQiLCJmZXRjaCIsIm1ldGhvZCIsImNyZWRlbnRpYWxzIiwiaGVhZGVycyIsImJvZHkiLCJmb3JtUGFyYW1zIiwicmVzcG9uc2UiLCJzdWNjZXNzIiwianNvbiIsImVycm9yIiwid2luZG93IiwidmFsdWUiLCJBcHBsaWNhdGlvbkNvbnRyb2xsZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7OztxQ0E2Qm1CQSxNLEVBQXNCO0FBQUEsVUFBZEMsT0FBYyx1RUFBSixFQUFJO0FBQ3JDLHdDQUFrQyxrQkFBWTtBQUFBLFlBQ3BDQyxxQkFEb0MsR0FDVkMsTUFBTSxDQURJLE9BQ1ZBLENBRFU7QUFHNUNBLGNBQU0sQ0FBTkE7O0FBRUEsWUFBSUgsTUFBTSxLQUFWLFdBQTBCO0FBQ3hCRyxnQkFBTSxDQUFOQSxZQUFtQkQscUJBQXFCLElBQXhDQztBQURGLGVBRU87QUFDTEEsZ0JBQU0sQ0FBTkE7QUFDRDtBQVRIO0FBV0Q7Ozs2QkFFUUMsSSxFQUFpQjtBQUFBLFVBQVhDLElBQVcsdUVBQUosRUFBSTtBQUN4QixVQUFNQyxLQUFLLEdBQUcseUJBQWQsSUFBYyxFQUFkO0FBRUFBLFdBQUssQ0FBTEE7QUFFQTtBQUNEOzs7K0JBRVU7QUFBQTs7QUFDVCxVQUFJLGdCQUFKLFdBQStCO0FBQzdCO0FBQ0E7QUFFQUMsYUFBSyxDQUFDLEtBQUQsU0FBZTtBQUNsQkMsZ0JBQU0sRUFEWTtBQUVsQkMscUJBQVcsRUFGTztBQUdsQkMsaUJBQU8sRUFBRSxZQUFZO0FBQ25CLDRCQURtQjtBQUVuQiw2QkFBaUI7QUFGRSxXQUFaLENBSFM7QUFPbEJDLGNBQUksRUFBRSxLQUFLQztBQVBPLFNBQWYsQ0FBTEwsTUFTUSxvQkFBYztBQUNsQixjQUFJTSxRQUFRLENBQVosSUFBaUI7QUFDZixtQkFBT0EsUUFBUSxDQUFmLElBQU9BLEVBQVA7QUFGZ0IsWUFLbEI7OztBQUNBLGdCQUFNLFVBQU4sNkJBQU0sQ0FBTjtBQWZKTixnQkFpQlEsZ0JBQVU7QUFBQSxjQUNOTyxPQURNLEdBQ2VDLElBRGY7QUFBQSxjQUNHZCxPQURILEdBQ2VjLElBRGY7O0FBR2QsZUFBSSxDQUFKLGlCQUFzQkQsT0FBTyxlQUE3Qjs7QUFDQSxlQUFJLENBQUosMkJBQWdDO0FBQUVBLG1CQUFPLEVBQVQ7QUFBV2IsbUJBQU8sRUFBUEE7QUFBWCxXQUFoQztBQXJCSk0sb0JBdUJTLGlCQUFXO0FBQ2hCLGVBQUksQ0FBSjs7QUFDQSxlQUFJLENBQUosMkJBQWdDO0FBQUVPLG1CQUFPLEVBQVQ7QUFBa0JFLGlCQUFLLEVBQUxBO0FBQWxCLFdBQWhDO0FBekJKVCxzQkEyQlcsWUFBTTtBQUNiLGVBQUksQ0FBSjtBQTVCSkE7QUE4QkQ7QUFDRjs7O2lDQUVZRCxLLEVBQU87QUFDbEJBLFdBQUssQ0FBTEE7QUFDQTtBQUNEOzs7d0JBdkZhO0FBQUE7O0FBQ1osNEZBQU9XLFFBQVAsa0ZBQU9BLGVBQVAsbUVBQU9BLHNCQUFQO0FBQ0Q7Ozt3QkFFYztBQUNiLGFBQU8sYUFBYSxLQUFwQixPQUFPLENBQVA7QUFDRDs7O3dCQUVnQjtBQUNmLGFBQU8sb0JBQW9CLEtBQTNCLFFBQU8sQ0FBUDtBQUNEOzs7c0JBRVVDLEssRUFBTztBQUNoQixpQkFBVztBQUNUO0FBREYsYUFFTztBQUNMO0FBQ0Q7O3dCQUdVO0FBQ1gsYUFBTyxjQUFQLFFBQU8sQ0FBUDtBQUNEOzs7O0VBekIwQkMsNEU7O2tHQUNWLGlCIiwiZmlsZSI6IjY0Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBcHBsaWNhdGlvbkNvbnRyb2xsZXIgZnJvbSAnLi4vLi4vLi4vY29tbW9uL2FwcGxpY2F0aW9uLWNvbnRyb2xsZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIEFwcGxpY2F0aW9uQ29udHJvbGxlciB7XG4gIHN0YXRpYyB0YXJnZXRzID0gWydzdGF0dXNNZXNzYWdlJ107XG5cbiAgZ2V0IGFqYXhVUkwoKSB7XG4gICAgcmV0dXJuIHdpbmRvdz8uX19tdnBmPy5hZG1pbkFqYXg/LnVybDtcbiAgfVxuXG4gIGdldCBmb3JtRGF0YSgpIHtcbiAgICByZXR1cm4gbmV3IEZvcm1EYXRhKHRoaXMuZWxlbWVudCk7XG4gIH1cblxuICBnZXQgZm9ybVBhcmFtcygpIHtcbiAgICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyh0aGlzLmZvcm1EYXRhKTtcbiAgfVxuXG4gIHNldCBzdGF0dXModmFsdWUpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuZGF0YS5zZXQoJ3N0YXR1cycsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhLmRlbGV0ZSgnc3RhdHVzJyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHN0YXR1cygpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLmdldCgnc3RhdHVzJyk7XG4gIH1cblxuICBzZXRTdGF0dXNNZXNzYWdlKHN0YXR1cywgbWVzc2FnZSA9ICcnKSB7XG4gICAgdGhpcy5zdGF0dXNNZXNzYWdlVGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IHtcbiAgICAgIGNvbnN0IHsgZGVmYXVsdFN1Y2Nlc3NNZXNzYWdlIH0gPSB0YXJnZXQuZGF0YXNldDtcblxuICAgICAgdGFyZ2V0LmRhdGFzZXQuc3RhdHVzID0gc3RhdHVzO1xuXG4gICAgICBpZiAoc3RhdHVzID09PSAnc3VjY2VzcycpIHtcbiAgICAgICAgdGFyZ2V0LmlubmVyVGV4dCA9IGRlZmF1bHRTdWNjZXNzTWVzc2FnZSB8fCBtZXNzYWdlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0LmlubmVyVGV4dCA9IG1lc3NhZ2U7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBkaXNwYXRjaChuYW1lLCBkYXRhID0ge30pIHtcbiAgICBjb25zdCBldmVudCA9IG5ldyBFdmVudChgbXZwZjoke25hbWV9YCk7XG5cbiAgICBldmVudC5kZXRhaWwgPSBkYXRhO1xuXG4gICAgdGhpcy5lbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICB9XG5cbiAgc2VuZEZvcm0oKSB7XG4gICAgaWYgKHRoaXMuc3RhdHVzICE9PSAnc2VuZGluZycpIHtcbiAgICAgIHRoaXMuc2V0U3RhdHVzTWVzc2FnZSgnc2VuZGluZycpO1xuICAgICAgdGhpcy5zdGF0dXMgPSAnc2VuZGluZyc7XG5cbiAgICAgIGZldGNoKHRoaXMuYWpheFVSTCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbicsXG4gICAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICAgICAgJ1gtTXZwZi1NZXRob2QnOiAnQUpBWCcsXG4gICAgICAgIH0pLFxuICAgICAgICBib2R5OiB0aGlzLmZvcm1QYXJhbXMsXG4gICAgICB9KVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVE9ETzogVHJhbnNsYXRlIHRoaXMgbWVzc2FnZVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3Igd2hpbGUgc3VibWl0dGluZyBmb3JtJyk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKChqc29uKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBzdWNjZXNzLCBtZXNzYWdlIH0gPSBqc29uO1xuXG4gICAgICAgICAgdGhpcy5zZXRTdGF0dXNNZXNzYWdlKHN1Y2Nlc3MgPyAnc3VjY2VzcycgOiAnZXJyb3InLCBtZXNzYWdlKTtcbiAgICAgICAgICB0aGlzLmRpc3BhdGNoKCdhamF4LXN1Ym1pdHRlZCcsIHsgc3VjY2VzcywgbWVzc2FnZSB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdHVzTWVzc2FnZSgnZXJyb3InLCBlcnJvcik7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaCgnYWpheC1zdWJtaXR0ZWQnLCB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvciB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuc3RhdHVzID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlU3VibWl0KGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnNlbmRGb3JtKCk7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///642\n")},715:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => /* binding */ _default\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(545);\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(853);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(147);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(734);\n/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(50);\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(56);\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(470);\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(156);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _babel_runtime_helpers_classPrivateFieldSet__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(278);\n/* harmony import */ var _babel_runtime_helpers_classPrivateFieldSet__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classPrivateFieldSet__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _babel_runtime_helpers_classPrivateFieldGet__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(385);\n/* harmony import */ var _babel_runtime_helpers_classPrivateFieldGet__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classPrivateFieldGet__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _common_application_controller__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(416);\n\n\n\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === "undefined" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === "function") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n\n\nvar _submitButtons = new WeakMap();\n\nvar _default = /*#__PURE__*/function (_ApplicationControlle) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(_default, _ApplicationControlle);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    var _this;\n\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, _default);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _submitButtons.set(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3___default()(_this), {\n      writable: true,\n      value: void 0\n    });\n\n    return _this;\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(_default, [{\n    key: "connect",\n    value: function connect() {\n      var _this2 = this;\n\n      window[this.callbackName] = function (token) {\n        _this2.callbackHandler(token);\n      };\n\n      this.recaptchaTarget.dataset.callback = this.callbackName;\n      this.submitButtons.forEach(function (button) {\n        _this2.bind(button, \'click\', function (event) {\n          return _this2.handleBeforeSubmit(event);\n        });\n      });\n      this.bind(this.element, \'mvpf:ajax-submitted\', function () {\n        var _window = window,\n            grecaptcha = _window.grecaptcha;\n        delete _this2.element.dataset.token;\n\n        if (grecaptcha) {\n          grecaptcha.reset();\n        }\n      });\n    }\n  }, {\n    key: "handleBeforeSubmit",\n    value: function handleBeforeSubmit(event) {\n      var _window2 = window,\n          grecaptcha = _window2.grecaptcha;\n\n      if (grecaptcha && !this.element.dataset.token) {\n        event.preventDefault();\n        grecaptcha.execute();\n      }\n    }\n  }, {\n    key: "callbackHandler",\n    value: function callbackHandler(token) {\n      this.element.dataset.token = token; // Manually resubmit\n\n      if (this.submitButtons && this.submitButtons.length > 0) {\n        this.submitButtons[this.submitButtons.length - 1].click();\n      }\n    }\n  }, {\n    key: "formID",\n    get: function get() {\n      return this.element.dataset.formId;\n    }\n  }, {\n    key: "callbackName",\n    get: function get() {\n      return "mvpf__recaptcha_callback__".concat(this.formID);\n    }\n  }, {\n    key: "submitButtons",\n    get: function get() {\n      return _babel_runtime_helpers_classPrivateFieldGet__WEBPACK_IMPORTED_MODULE_9___default()(this, _submitButtons) || _babel_runtime_helpers_classPrivateFieldSet__WEBPACK_IMPORTED_MODULE_8___default()(this, _submitButtons, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(this.element.querySelectorAll(\'[type="submit"]\')));\n    }\n  }]);\n\n  return _default;\n}(_common_application_controller__WEBPACK_IMPORTED_MODULE_10__/* .default */ .Z);\n\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7___default()(_default, "targets", [\'recaptcha\']);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9qcy9mcm9udC9jb250cm9sbGVycy9tYXNodnAtZm9ybXMvcmVjYXB0Y2hhLWNvbnRyb2xsZXIuanM/MTU1MSJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJncmVjYXB0Y2hhIiwiZXZlbnQiLCJ0b2tlbiIsIkFwcGxpY2F0aW9uQ29udHJvbGxlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCQU9ZO0FBQUE7O0FBQ1JBLFlBQU0sQ0FBQyxLQUFQQSxZQUFNLENBQU5BLEdBQTRCLGlCQUFXO0FBQ3JDLGNBQUksQ0FBSjtBQURGQTs7QUFJQSw4Q0FBd0MsS0FBeEM7QUFFQSxpQ0FBMkIsa0JBQVk7QUFDckMsY0FBSSxDQUFKLHNCQUEyQjtBQUFBLGlCQUFXLE1BQUksQ0FBSixtQkFBWCxLQUFXLENBQVg7QUFBM0I7QUFERjtBQUlBLGdCQUFVLEtBQVYsZ0NBQStDLFlBQU07QUFBQTtBQUFBLFlBQzNDQyxVQUQyQztBQUduRCxlQUFPLE1BQUksQ0FBSixnQkFBUDs7QUFFQSx3QkFBZ0I7QUFDZEEsb0JBQVUsQ0FBVkE7QUFDRDtBQVBIO0FBU0Q7Ozt1Q0FnQmtCQyxLLEVBQU87QUFBQTtBQUFBLFVBQ2hCRCxVQURnQjs7QUFHeEIsVUFBSUEsVUFBVSxJQUFJLENBQUMscUJBQW5CLE9BQStDO0FBQzdDQyxhQUFLLENBQUxBO0FBQ0FELGtCQUFVLENBQVZBO0FBQ0Q7QUFDRjs7O29DQUVlRSxLLEVBQU87QUFDckIsbUNBRHFCLEtBQ3JCLENBRHFCLENBR3JCOztBQUNBLFVBQUksc0JBQXNCLDRCQUExQixHQUF5RDtBQUN2RCwyQkFBbUIsNEJBQW5CO0FBQ0Q7QUFDRjs7O3dCQTlCWTtBQUNYLGFBQU8scUJBQVA7QUFDRDs7O3dCQUVrQjtBQUNqQixpREFBb0MsS0FBcEM7QUFDRDs7O3dCQUVtQjtBQUNsQixrVEFDSyw4QkFETCxpQkFDSyxDQURMO0FBR0Q7Ozs7RUF2QzBCQyw2RTs7a0dBR1YsYSIsImZpbGUiOiI3MTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXBwbGljYXRpb25Db250cm9sbGVyIGZyb20gJy4uLy4uLy4uL2NvbW1vbi9hcHBsaWNhdGlvbi1jb250cm9sbGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBBcHBsaWNhdGlvbkNvbnRyb2xsZXIge1xuICAjc3VibWl0QnV0dG9ucztcblxuICBzdGF0aWMgdGFyZ2V0cyA9IFsncmVjYXB0Y2hhJ107XG5cbiAgY29ubmVjdCgpIHtcbiAgICB3aW5kb3dbdGhpcy5jYWxsYmFja05hbWVdID0gKHRva2VuKSA9PiB7XG4gICAgICB0aGlzLmNhbGxiYWNrSGFuZGxlcih0b2tlbik7XG4gICAgfTtcblxuICAgIHRoaXMucmVjYXB0Y2hhVGFyZ2V0LmRhdGFzZXQuY2FsbGJhY2sgPSB0aGlzLmNhbGxiYWNrTmFtZTtcblxuICAgIHRoaXMuc3VibWl0QnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+IHtcbiAgICAgIHRoaXMuYmluZChidXR0b24sICdjbGljaycsIChldmVudCkgPT4gdGhpcy5oYW5kbGVCZWZvcmVTdWJtaXQoZXZlbnQpKTtcbiAgICB9KTtcblxuICAgIHRoaXMuYmluZCh0aGlzLmVsZW1lbnQsICdtdnBmOmFqYXgtc3VibWl0dGVkJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBncmVjYXB0Y2hhIH0gPSB3aW5kb3c7XG5cbiAgICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQuZGF0YXNldC50b2tlbjtcblxuICAgICAgaWYgKGdyZWNhcHRjaGEpIHtcbiAgICAgICAgZ3JlY2FwdGNoYS5yZXNldCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZ2V0IGZvcm1JRCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LmRhdGFzZXQuZm9ybUlkO1xuICB9XG5cbiAgZ2V0IGNhbGxiYWNrTmFtZSgpIHtcbiAgICByZXR1cm4gYG12cGZfX3JlY2FwdGNoYV9jYWxsYmFja19fJHt0aGlzLmZvcm1JRH1gO1xuICB9XG5cbiAgZ2V0IHN1Ym1pdEJ1dHRvbnMoKSB7XG4gICAgcmV0dXJuICh0aGlzLiNzdWJtaXRCdXR0b25zIHx8PSBbXG4gICAgICAuLi50aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW3R5cGU9XCJzdWJtaXRcIl0nKSxcbiAgICBdKTtcbiAgfVxuXG4gIGhhbmRsZUJlZm9yZVN1Ym1pdChldmVudCkge1xuICAgIGNvbnN0IHsgZ3JlY2FwdGNoYSB9ID0gd2luZG93O1xuXG4gICAgaWYgKGdyZWNhcHRjaGEgJiYgIXRoaXMuZWxlbWVudC5kYXRhc2V0LnRva2VuKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZ3JlY2FwdGNoYS5leGVjdXRlKCk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2tIYW5kbGVyKHRva2VuKSB7XG4gICAgdGhpcy5lbGVtZW50LmRhdGFzZXQudG9rZW4gPSB0b2tlbjtcblxuICAgIC8vIE1hbnVhbGx5IHJlc3VibWl0XG4gICAgaWYgKHRoaXMuc3VibWl0QnV0dG9ucyAmJiB0aGlzLnN1Ym1pdEJ1dHRvbnMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5zdWJtaXRCdXR0b25zW3RoaXMuc3VibWl0QnV0dG9ucy5sZW5ndGggLSAxXS5jbGljaygpO1xuICAgIH1cbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///715\n')},766:(module,__unused_webpack_exports,__webpack_require__)=>{eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n/** `Object#toString` result references. */\n\nvar symbolTag = '[object Symbol]';\n/** Used to match words composed of alphanumeric characters. */\n\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n/** Used to match Latin Unicode letters (excluding mathematical operators). */\n\nvar reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n/** Used to compose unicode character classes. */\n\nvar rsAstralRange = \"\\\\ud800-\\\\udfff\",\n    rsComboMarksRange = \"\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23\",\n    rsComboSymbolsRange = \"\\\\u20d0-\\\\u20f0\",\n    rsDingbatRange = \"\\\\u2700-\\\\u27bf\",\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n    rsPunctuationRange = \"\\\\u2000-\\\\u206f\",\n    rsSpaceRange = \" \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000\",\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n    rsVarRange = \"\\\\ufe0e\\\\ufe0f\",\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n/** Used to compose unicode capture groups. */\n\nvar rsApos = \"['\\u2019]\",\n    rsAstral = '[' + rsAstralRange + ']',\n    rsBreak = '[' + rsBreakRange + ']',\n    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n    rsDigits = '\\\\d+',\n    rsDingbat = '[' + rsDingbatRange + ']',\n    rsLower = '[' + rsLowerRange + ']',\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n    rsFitz = \"\\\\ud83c[\\\\udffb-\\\\udfff]\",\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = \"(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}\",\n    rsSurrPair = \"[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]\",\n    rsUpper = '[' + rsUpperRange + ']',\n    rsZWJ = \"\\\\u200d\";\n/** Used to compose unicode regexes. */\n\nvar rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',\n    rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',\n    rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n    rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n    reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n/** Used to match apostrophes. */\n\nvar reApos = RegExp(rsApos, 'g');\n/**\n * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n */\n\nvar reComboMark = RegExp(rsCombo, 'g');\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n/** Used to match complex or compound words. */\n\nvar reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')', rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr, rsUpper + '+' + rsOptUpperContr, rsDigits, rsEmoji].join('|'), 'g');\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n/** Used to detect strings that need a more robust regexp to match words. */\n\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n/** Used to map Latin Unicode letters to basic Latin letters. */\n\nvar deburredLetters = {\n  // Latin-1 Supplement block.\n  '\\xc0': 'A',\n  '\\xc1': 'A',\n  '\\xc2': 'A',\n  '\\xc3': 'A',\n  '\\xc4': 'A',\n  '\\xc5': 'A',\n  '\\xe0': 'a',\n  '\\xe1': 'a',\n  '\\xe2': 'a',\n  '\\xe3': 'a',\n  '\\xe4': 'a',\n  '\\xe5': 'a',\n  '\\xc7': 'C',\n  '\\xe7': 'c',\n  '\\xd0': 'D',\n  '\\xf0': 'd',\n  '\\xc8': 'E',\n  '\\xc9': 'E',\n  '\\xca': 'E',\n  '\\xcb': 'E',\n  '\\xe8': 'e',\n  '\\xe9': 'e',\n  '\\xea': 'e',\n  '\\xeb': 'e',\n  '\\xcc': 'I',\n  '\\xcd': 'I',\n  '\\xce': 'I',\n  '\\xcf': 'I',\n  '\\xec': 'i',\n  '\\xed': 'i',\n  '\\xee': 'i',\n  '\\xef': 'i',\n  '\\xd1': 'N',\n  '\\xf1': 'n',\n  '\\xd2': 'O',\n  '\\xd3': 'O',\n  '\\xd4': 'O',\n  '\\xd5': 'O',\n  '\\xd6': 'O',\n  '\\xd8': 'O',\n  '\\xf2': 'o',\n  '\\xf3': 'o',\n  '\\xf4': 'o',\n  '\\xf5': 'o',\n  '\\xf6': 'o',\n  '\\xf8': 'o',\n  '\\xd9': 'U',\n  '\\xda': 'U',\n  '\\xdb': 'U',\n  '\\xdc': 'U',\n  '\\xf9': 'u',\n  '\\xfa': 'u',\n  '\\xfb': 'u',\n  '\\xfc': 'u',\n  '\\xdd': 'Y',\n  '\\xfd': 'y',\n  '\\xff': 'y',\n  '\\xc6': 'Ae',\n  '\\xe6': 'ae',\n  '\\xde': 'Th',\n  '\\xfe': 'th',\n  '\\xdf': 'ss',\n  // Latin Extended-A block.\n  \"\\u0100\": 'A',\n  \"\\u0102\": 'A',\n  \"\\u0104\": 'A',\n  \"\\u0101\": 'a',\n  \"\\u0103\": 'a',\n  \"\\u0105\": 'a',\n  \"\\u0106\": 'C',\n  \"\\u0108\": 'C',\n  \"\\u010A\": 'C',\n  \"\\u010C\": 'C',\n  \"\\u0107\": 'c',\n  \"\\u0109\": 'c',\n  \"\\u010B\": 'c',\n  \"\\u010D\": 'c',\n  \"\\u010E\": 'D',\n  \"\\u0110\": 'D',\n  \"\\u010F\": 'd',\n  \"\\u0111\": 'd',\n  \"\\u0112\": 'E',\n  \"\\u0114\": 'E',\n  \"\\u0116\": 'E',\n  \"\\u0118\": 'E',\n  \"\\u011A\": 'E',\n  \"\\u0113\": 'e',\n  \"\\u0115\": 'e',\n  \"\\u0117\": 'e',\n  \"\\u0119\": 'e',\n  \"\\u011B\": 'e',\n  \"\\u011C\": 'G',\n  \"\\u011E\": 'G',\n  \"\\u0120\": 'G',\n  \"\\u0122\": 'G',\n  \"\\u011D\": 'g',\n  \"\\u011F\": 'g',\n  \"\\u0121\": 'g',\n  \"\\u0123\": 'g',\n  \"\\u0124\": 'H',\n  \"\\u0126\": 'H',\n  \"\\u0125\": 'h',\n  \"\\u0127\": 'h',\n  \"\\u0128\": 'I',\n  \"\\u012A\": 'I',\n  \"\\u012C\": 'I',\n  \"\\u012E\": 'I',\n  \"\\u0130\": 'I',\n  \"\\u0129\": 'i',\n  \"\\u012B\": 'i',\n  \"\\u012D\": 'i',\n  \"\\u012F\": 'i',\n  \"\\u0131\": 'i',\n  \"\\u0134\": 'J',\n  \"\\u0135\": 'j',\n  \"\\u0136\": 'K',\n  \"\\u0137\": 'k',\n  \"\\u0138\": 'k',\n  \"\\u0139\": 'L',\n  \"\\u013B\": 'L',\n  \"\\u013D\": 'L',\n  \"\\u013F\": 'L',\n  \"\\u0141\": 'L',\n  \"\\u013A\": 'l',\n  \"\\u013C\": 'l',\n  \"\\u013E\": 'l',\n  \"\\u0140\": 'l',\n  \"\\u0142\": 'l',\n  \"\\u0143\": 'N',\n  \"\\u0145\": 'N',\n  \"\\u0147\": 'N',\n  \"\\u014A\": 'N',\n  \"\\u0144\": 'n',\n  \"\\u0146\": 'n',\n  \"\\u0148\": 'n',\n  \"\\u014B\": 'n',\n  \"\\u014C\": 'O',\n  \"\\u014E\": 'O',\n  \"\\u0150\": 'O',\n  \"\\u014D\": 'o',\n  \"\\u014F\": 'o',\n  \"\\u0151\": 'o',\n  \"\\u0154\": 'R',\n  \"\\u0156\": 'R',\n  \"\\u0158\": 'R',\n  \"\\u0155\": 'r',\n  \"\\u0157\": 'r',\n  \"\\u0159\": 'r',\n  \"\\u015A\": 'S',\n  \"\\u015C\": 'S',\n  \"\\u015E\": 'S',\n  \"\\u0160\": 'S',\n  \"\\u015B\": 's',\n  \"\\u015D\": 's',\n  \"\\u015F\": 's',\n  \"\\u0161\": 's',\n  \"\\u0162\": 'T',\n  \"\\u0164\": 'T',\n  \"\\u0166\": 'T',\n  \"\\u0163\": 't',\n  \"\\u0165\": 't',\n  \"\\u0167\": 't',\n  \"\\u0168\": 'U',\n  \"\\u016A\": 'U',\n  \"\\u016C\": 'U',\n  \"\\u016E\": 'U',\n  \"\\u0170\": 'U',\n  \"\\u0172\": 'U',\n  \"\\u0169\": 'u',\n  \"\\u016B\": 'u',\n  \"\\u016D\": 'u',\n  \"\\u016F\": 'u',\n  \"\\u0171\": 'u',\n  \"\\u0173\": 'u',\n  \"\\u0174\": 'W',\n  \"\\u0175\": 'w',\n  \"\\u0176\": 'Y',\n  \"\\u0177\": 'y',\n  \"\\u0178\": 'Y',\n  \"\\u0179\": 'Z',\n  \"\\u017B\": 'Z',\n  \"\\u017D\": 'Z',\n  \"\\u017A\": 'z',\n  \"\\u017C\": 'z',\n  \"\\u017E\": 'z',\n  \"\\u0132\": 'IJ',\n  \"\\u0133\": 'ij',\n  \"\\u0152\": 'Oe',\n  \"\\u0153\": 'oe',\n  \"\\u0149\": \"'n\",\n  \"\\u017F\": 'ss'\n};\n/** Detect free variable `global` from Node.js. */\n\nvar freeGlobal = (typeof __webpack_require__.g === \"undefined\" ? \"undefined\" : _typeof(__webpack_require__.g)) == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;\n/** Detect free variable `self`. */\n\nvar freeSelf = (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) == 'object' && self && self.Object === Object && self;\n/** Used as a reference to the global object. */\n\nvar root = freeGlobal || freeSelf || Function('return this')();\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\n\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n\n  return accumulator;\n}\n/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\n\n\nfunction asciiToArray(string) {\n  return string.split('');\n}\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\n\n\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\n\n\nfunction basePropertyOf(object) {\n  return function (key) {\n    return object == null ? undefined : object[key];\n  };\n}\n/**\n * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n * letters to basic Latin letters.\n *\n * @private\n * @param {string} letter The matched letter to deburr.\n * @returns {string} Returns the deburred letter.\n */\n\n\nvar deburrLetter = basePropertyOf(deburredLetters);\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\n\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\n\n\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\n\n\nfunction stringToArray(string) {\n  return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);\n}\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\n\n\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\n\n\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n/** Used for built-in method references. */\n\n\nvar objectProto = Object.prototype;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar objectToString = objectProto.toString;\n/** Built-in value references. */\n\nvar _Symbol = root.Symbol;\n/** Used to convert symbols to primitives and strings. */\n\nvar symbolProto = _Symbol ? _Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\n\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n\n  end = end > length ? length : end;\n\n  if (end < 0) {\n    end += length;\n  }\n\n  length = start > end ? 0 : end - start >>> 0;\n  start >>>= 0;\n  var result = Array(length);\n\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n\n  return result;\n}\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\n\n\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n\n  var result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\n\n\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return !start && end >= length ? array : baseSlice(array, start, end);\n}\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\n\n\nfunction createCaseFirst(methodName) {\n  return function (string) {\n    string = toString(string);\n    var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;\n    var chr = strSymbols ? strSymbols[0] : string.charAt(0);\n    var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);\n    return chr[methodName]() + trailing;\n  };\n}\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\n\n\nfunction createCompounder(callback) {\n  return function (string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\n\n\nfunction isObjectLike(value) {\n  return !!value && _typeof(value) == 'object';\n}\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\n\n\nfunction isSymbol(value) {\n  return _typeof(value) == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;\n}\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\n\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n/**\n * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the camel cased string.\n * @example\n *\n * _.camelCase('Foo Bar');\n * // => 'fooBar'\n *\n * _.camelCase('--foo-bar--');\n * // => 'fooBar'\n *\n * _.camelCase('__FOO_BAR__');\n * // => 'fooBar'\n */\n\n\nvar camelCase = createCompounder(function (result, word, index) {\n  word = word.toLowerCase();\n  return result + (index ? capitalize(word) : word);\n});\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\n\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n/**\n * Deburrs `string` by converting\n * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n * letters to basic Latin letters and removing\n * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to deburr.\n * @returns {string} Returns the deburred string.\n * @example\n *\n * _.deburr('déjà vu');\n * // => 'deja vu'\n */\n\n\nfunction deburr(string) {\n  string = toString(string);\n  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n}\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\n\n\nvar upperFirst = createCaseFirst('toUpperCase');\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\n\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n\n  return string.match(pattern) || [];\n}\n\nmodule.exports = camelCase;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///766\n")},990:function(module,exports,__webpack_require__){eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) 2010,2011,2012,2013,2014 Morgan Roderick http://roderick.dk\n * License: MIT - http://mrgnrdrck.mit-license.org\n *\n * https://github.com/mroderick/PubSubJS\n */\n(function (root, factory) {\n  'use strict';\n\n  var PubSub = {};\n  root.PubSub = PubSub;\n  factory(PubSub); // CommonJS and Node.js module support\n\n  if (( false ? 0 : _typeof(exports)) === 'object') {\n    if (module !== undefined && module.exports) {\n      exports = module.exports = PubSub; // Node.js specific `module.exports`\n    }\n\n    exports.PubSub = PubSub; // CommonJS module 1.1.1 spec\n\n    module.exports = exports = PubSub; // CommonJS\n  } // AMD support\n\n  /* eslint-disable no-undef */\n  else if (true) {\n      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n        return PubSub;\n      }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n      /* eslint-enable no-undef */\n    }\n})((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === 'object' && window || this, function (PubSub) {\n  'use strict';\n\n  var messages = {},\n      lastUid = -1,\n      ALL_SUBSCRIBING_MSG = '*';\n\n  function hasKeys(obj) {\n    var key;\n\n    for (key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Returns a function that throws the passed exception, for use as argument for setTimeout\n   * @alias throwException\n   * @function\n   * @param { Object } ex An Error object\n   */\n\n\n  function throwException(ex) {\n    return function reThrowException() {\n      throw ex;\n    };\n  }\n\n  function callSubscriberWithDelayedExceptions(subscriber, message, data) {\n    try {\n      subscriber(message, data);\n    } catch (ex) {\n      setTimeout(throwException(ex), 0);\n    }\n  }\n\n  function callSubscriberWithImmediateExceptions(subscriber, message, data) {\n    subscriber(message, data);\n  }\n\n  function deliverMessage(originalMessage, matchedMessage, data, immediateExceptions) {\n    var subscribers = messages[matchedMessage],\n        callSubscriber = immediateExceptions ? callSubscriberWithImmediateExceptions : callSubscriberWithDelayedExceptions,\n        s;\n\n    if (!messages.hasOwnProperty(matchedMessage)) {\n      return;\n    }\n\n    for (s in subscribers) {\n      if (subscribers.hasOwnProperty(s)) {\n        callSubscriber(subscribers[s], originalMessage, data);\n      }\n    }\n  }\n\n  function createDeliveryFunction(message, data, immediateExceptions) {\n    return function deliverNamespaced() {\n      var topic = String(message),\n          position = topic.lastIndexOf('.'); // deliver the message as it is now\n\n      deliverMessage(message, message, data, immediateExceptions); // trim the hierarchy and deliver message to each level\n\n      while (position !== -1) {\n        topic = topic.substr(0, position);\n        position = topic.lastIndexOf('.');\n        deliverMessage(message, topic, data, immediateExceptions);\n      }\n\n      deliverMessage(message, ALL_SUBSCRIBING_MSG, data, immediateExceptions);\n    };\n  }\n\n  function hasDirectSubscribersFor(message) {\n    var topic = String(message),\n        found = Boolean(messages.hasOwnProperty(topic) && hasKeys(messages[topic]));\n    return found;\n  }\n\n  function messageHasSubscribers(message) {\n    var topic = String(message),\n        found = hasDirectSubscribersFor(topic) || hasDirectSubscribersFor(ALL_SUBSCRIBING_MSG),\n        position = topic.lastIndexOf('.');\n\n    while (!found && position !== -1) {\n      topic = topic.substr(0, position);\n      position = topic.lastIndexOf('.');\n      found = hasDirectSubscribersFor(topic);\n    }\n\n    return found;\n  }\n\n  function publish(message, data, sync, immediateExceptions) {\n    message = _typeof(message) === 'symbol' ? message.toString() : message;\n    var deliver = createDeliveryFunction(message, data, immediateExceptions),\n        hasSubscribers = messageHasSubscribers(message);\n\n    if (!hasSubscribers) {\n      return false;\n    }\n\n    if (sync === true) {\n      deliver();\n    } else {\n      setTimeout(deliver, 0);\n    }\n\n    return true;\n  }\n  /**\n   * Publishes the message, passing the data to it's subscribers\n   * @function\n   * @alias publish\n   * @param { String } message The message to publish\n   * @param {} data The data to pass to subscribers\n   * @return { Boolean }\n   */\n\n\n  PubSub.publish = function (message, data) {\n    return publish(message, data, false, PubSub.immediateExceptions);\n  };\n  /**\n   * Publishes the message synchronously, passing the data to it's subscribers\n   * @function\n   * @alias publishSync\n   * @param { String } message The message to publish\n   * @param {} data The data to pass to subscribers\n   * @return { Boolean }\n   */\n\n\n  PubSub.publishSync = function (message, data) {\n    return publish(message, data, true, PubSub.immediateExceptions);\n  };\n  /**\n   * Subscribes the passed function to the passed message. Every returned token is unique and should be stored if you need to unsubscribe\n   * @function\n   * @alias subscribe\n   * @param { String } message The message to subscribe to\n   * @param { Function } func The function to call when a new message is published\n   * @return { String }\n   */\n\n\n  PubSub.subscribe = function (message, func) {\n    if (typeof func !== 'function') {\n      return false;\n    }\n\n    message = _typeof(message) === 'symbol' ? message.toString() : message; // message is not registered yet\n\n    if (!messages.hasOwnProperty(message)) {\n      messages[message] = {};\n    } // forcing token as String, to allow for future expansions without breaking usage\n    // and allow for easy use as key names for the 'messages' object\n\n\n    var token = 'uid_' + String(++lastUid);\n    messages[message][token] = func; // return token for unsubscribing\n\n    return token;\n  };\n\n  PubSub.subscribeAll = function (func) {\n    return PubSub.subscribe(ALL_SUBSCRIBING_MSG, func);\n  };\n  /**\n   * Subscribes the passed function to the passed message once\n   * @function\n   * @alias subscribeOnce\n   * @param { String } message The message to subscribe to\n   * @param { Function } func The function to call when a new message is published\n   * @return { PubSub }\n   */\n\n\n  PubSub.subscribeOnce = function (message, func) {\n    var token = PubSub.subscribe(message, function () {\n      // before func apply, unsubscribe message\n      PubSub.unsubscribe(token);\n      func.apply(this, arguments);\n    });\n    return PubSub;\n  };\n  /**\n   * Clears all subscriptions\n   * @function\n   * @public\n   * @alias clearAllSubscriptions\n   */\n\n\n  PubSub.clearAllSubscriptions = function clearAllSubscriptions() {\n    messages = {};\n  };\n  /**\n   * Clear subscriptions by the topic\n   * @function\n   * @public\n   * @alias clearAllSubscriptions\n   * @return { int }\n   */\n\n\n  PubSub.clearSubscriptions = function clearSubscriptions(topic) {\n    var m;\n\n    for (m in messages) {\n      if (messages.hasOwnProperty(m) && m.indexOf(topic) === 0) {\n        delete messages[m];\n      }\n    }\n  };\n  /** \n     Count subscriptions by the topic\n   * @function\n   * @public\n   * @alias countSubscriptions\n   * @return { Array }\n  */\n\n\n  PubSub.countSubscriptions = function countSubscriptions(topic) {\n    var m;\n    var count = 0;\n\n    for (m in messages) {\n      if (messages.hasOwnProperty(m) && m.indexOf(topic) === 0) {\n        count++;\n      }\n    }\n\n    return count;\n  };\n  /** \n     Gets subscriptions by the topic\n   * @function\n   * @public\n   * @alias getSubscriptions\n  */\n\n\n  PubSub.getSubscriptions = function getSubscriptions(topic) {\n    var m;\n    var list = [];\n\n    for (m in messages) {\n      if (messages.hasOwnProperty(m) && m.indexOf(topic) === 0) {\n        list.push(m);\n      }\n    }\n\n    return list;\n  };\n  /**\n   * Removes subscriptions\n   *\n   * - When passed a token, removes a specific subscription.\n   *\n  * - When passed a function, removes all subscriptions for that function\n   *\n  * - When passed a topic, removes all subscriptions for that topic (hierarchy)\n   * @function\n   * @public\n   * @alias subscribeOnce\n   * @param { String | Function } value A token, function or topic to unsubscribe from\n   * @example // Unsubscribing with a token\n   * var token = PubSub.subscribe('mytopic', myFunc);\n   * PubSub.unsubscribe(token);\n   * @example // Unsubscribing with a function\n   * PubSub.unsubscribe(myFunc);\n   * @example // Unsubscribing from a topic\n   * PubSub.unsubscribe('mytopic');\n   */\n\n\n  PubSub.unsubscribe = function (value) {\n    var descendantTopicExists = function descendantTopicExists(topic) {\n      var m;\n\n      for (m in messages) {\n        if (messages.hasOwnProperty(m) && m.indexOf(topic) === 0) {\n          // a descendant of the topic exists:\n          return true;\n        }\n      }\n\n      return false;\n    },\n        isTopic = typeof value === 'string' && (messages.hasOwnProperty(value) || descendantTopicExists(value)),\n        isToken = !isTopic && typeof value === 'string',\n        isFunction = typeof value === 'function',\n        result = false,\n        m,\n        message,\n        t;\n\n    if (isTopic) {\n      PubSub.clearSubscriptions(value);\n      return;\n    }\n\n    for (m in messages) {\n      if (messages.hasOwnProperty(m)) {\n        message = messages[m];\n\n        if (isToken && message[value]) {\n          delete message[value];\n          result = value; // tokens are unique, so we can just stop here\n\n          break;\n        }\n\n        if (isFunction) {\n          for (t in message) {\n            if (message.hasOwnProperty(t) && message[t] === value) {\n              delete message[t];\n              result = true;\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///990\n")}},__webpack_module_cache__={};function __webpack_require__(Q){if(__webpack_module_cache__[Q])return __webpack_module_cache__[Q].exports;var n=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q].call(n.exports,n,n.exports,__webpack_require__),n.loaded=!0,n.exports}__webpack_require__.n=Q=>{var n=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=(Q,n)=>{for(var B in n)__webpack_require__.o(n,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:n[B]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,n)=>Object.prototype.hasOwnProperty.call(Q,n),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q),(()=>{"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/@hotwired/stimulus/dist/stimulus.js\nvar stimulus = __webpack_require__(318);\n;// CONCATENATED MODULE: ./node_modules/@hotwired/stimulus-webpack-helpers/dist/stimulus-webpack-helpers.js\n/*\nStimulus Webpack Helpers 1.0.0\nCopyright © 2021 Basecamp, LLC\n */\nfunction definitionsFromContext(context) {\n  return context.keys().map(function (key) {\n    return definitionForModuleWithContextAndKey(context, key);\n  }).filter(function (value) {\n    return value;\n  });\n}\n\nfunction definitionForModuleWithContextAndKey(context, key) {\n  var identifier = identifierForContextKey(key);\n\n  if (identifier) {\n    return definitionForModuleAndIdentifier(context(key), identifier);\n  }\n}\n\nfunction definitionForModuleAndIdentifier(module, identifier) {\n  var controllerConstructor = module["default"];\n\n  if (typeof controllerConstructor == "function") {\n    return {\n      identifier: identifier,\n      controllerConstructor: controllerConstructor\n    };\n  }\n}\n\nfunction identifierForContextKey(key) {\n  var logicalName = (key.match(/^(?:\\.\\/)?(.+)(?:[_-]controller\\..+?)$/) || [])[1];\n\n  if (logicalName) {\n    return logicalName.replace(/_/g, "-").replace(/\\//g, "--");\n  }\n}\n\n\n;// CONCATENATED MODULE: ./js/front/index.js\n/* eslint-disable no-undef */\n\n\n\nvar initStimulus = function initStimulus() {\n  var application = stimulus/* Application.start */.Mx.start();\n\n  var context = __webpack_require__(343);\n\n  application.load(definitionsFromContext(context));\n};\n\ninitStimulus();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXNodnAtZm9ybXMvLi9ub2RlX21vZHVsZXMvQGhvdHdpcmVkL3N0aW11bHVzLXdlYnBhY2staGVscGVycy9kaXN0L3N0aW11bHVzLXdlYnBhY2staGVscGVycy5qcz9lMzQ1Iiwid2VicGFjazovL21hc2h2cC1mb3Jtcy8uL2pzL2Zyb250L2luZGV4LmpzP2MxODAiXSwibmFtZXMiOlsiZGVmaW5pdGlvbnNGcm9tQ29udGV4dCIsImNvbnRleHQiLCJrZXlzIiwibWFwIiwia2V5IiwiZGVmaW5pdGlvbkZvck1vZHVsZVdpdGhDb250ZXh0QW5kS2V5IiwiZmlsdGVyIiwidmFsdWUiLCJpZGVudGlmaWVyIiwiaWRlbnRpZmllckZvckNvbnRleHRLZXkiLCJkZWZpbml0aW9uRm9yTW9kdWxlQW5kSWRlbnRpZmllciIsIm1vZHVsZSIsImNvbnRyb2xsZXJDb25zdHJ1Y3RvciIsImxvZ2ljYWxOYW1lIiwibWF0Y2giLCJyZXBsYWNlIiwiaW5pdFN0aW11bHVzIiwiYXBwbGljYXRpb24iLCJBcHBsaWNhdGlvbiIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLHNCQUFULENBQWdDQyxPQUFoQyxFQUF5QztBQUNyQyxTQUFPQSxPQUFPLENBQUNDLElBQVIsR0FDRkMsR0FERSxDQUNFLFVBQUNDLEdBQUQ7QUFBQSxXQUFTQyxvQ0FBb0MsQ0FBQ0osT0FBRCxFQUFVRyxHQUFWLENBQTdDO0FBQUEsR0FERixFQUVGRSxNQUZFLENBRUssVUFBQ0MsS0FBRDtBQUFBLFdBQVdBLEtBQVg7QUFBQSxHQUZMLENBQVA7QUFHSDs7QUFDRCxTQUFTRixvQ0FBVCxDQUE4Q0osT0FBOUMsRUFBdURHLEdBQXZELEVBQTREO0FBQ3hELE1BQU1JLFVBQVUsR0FBR0MsdUJBQXVCLENBQUNMLEdBQUQsQ0FBMUM7O0FBQ0EsTUFBSUksVUFBSixFQUFnQjtBQUNaLFdBQU9FLGdDQUFnQyxDQUFDVCxPQUFPLENBQUNHLEdBQUQsQ0FBUixFQUFlSSxVQUFmLENBQXZDO0FBQ0g7QUFDSjs7QUFDRCxTQUFTRSxnQ0FBVCxDQUEwQ0MsTUFBMUMsRUFBa0RILFVBQWxELEVBQThEO0FBQzFELE1BQU1JLHFCQUFxQixHQUFHRCxNQUFNLFdBQXBDOztBQUNBLE1BQUksT0FBT0MscUJBQVAsSUFBZ0MsVUFBcEMsRUFBZ0Q7QUFDNUMsV0FBTztBQUFFSixnQkFBVSxFQUFWQSxVQUFGO0FBQWNJLDJCQUFxQixFQUFyQkE7QUFBZCxLQUFQO0FBQ0g7QUFDSjs7QUFDRCxTQUFTSCx1QkFBVCxDQUFpQ0wsR0FBakMsRUFBc0M7QUFDbEMsTUFBTVMsV0FBVyxHQUFHLENBQUNULEdBQUcsQ0FBQ1UsS0FBSixDQUFVLHdDQUFWLEtBQXVELEVBQXhELEVBQTRELENBQTVELENBQXBCOztBQUNBLE1BQUlELFdBQUosRUFBaUI7QUFDYixXQUFPQSxXQUFXLENBQUNFLE9BQVosQ0FBb0IsSUFBcEIsRUFBMEIsR0FBMUIsRUFBK0JBLE9BQS9CLENBQXVDLEtBQXZDLEVBQThDLElBQTlDLENBQVA7QUFDSDtBQUNKOzs7O0FDMUJEO0FBRUE7QUFDQTs7QUFFQSxJQUFNQyxZQUFZLEdBQUcsU0FBZkEsWUFBZSxHQUFNO0FBQ3pCLE1BQU1DLFdBQVcsR0FBR0MsMENBQXBCOztBQUVBLE1BQU1qQixPQUFPLEdBQUdrQix3QkFBaEI7O0FBTUFGLGFBQVcsQ0FBWEEsS0FBaUJqQixzQkFBc0IsQ0FBdkNpQixPQUF1QyxDQUF2Q0E7QUFURjs7QUFZQUQsWUFBWSIsImZpbGUiOiI2NzguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuU3RpbXVsdXMgV2VicGFjayBIZWxwZXJzIDEuMC4wXG5Db3B5cmlnaHQgwqkgMjAyMSBCYXNlY2FtcCwgTExDXG4gKi9cbmZ1bmN0aW9uIGRlZmluaXRpb25zRnJvbUNvbnRleHQoY29udGV4dCkge1xuICAgIHJldHVybiBjb250ZXh0LmtleXMoKVxuICAgICAgICAubWFwKChrZXkpID0+IGRlZmluaXRpb25Gb3JNb2R1bGVXaXRoQ29udGV4dEFuZEtleShjb250ZXh0LCBrZXkpKVxuICAgICAgICAuZmlsdGVyKCh2YWx1ZSkgPT4gdmFsdWUpO1xufVxuZnVuY3Rpb24gZGVmaW5pdGlvbkZvck1vZHVsZVdpdGhDb250ZXh0QW5kS2V5KGNvbnRleHQsIGtleSkge1xuICAgIGNvbnN0IGlkZW50aWZpZXIgPSBpZGVudGlmaWVyRm9yQ29udGV4dEtleShrZXkpO1xuICAgIGlmIChpZGVudGlmaWVyKSB7XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uRm9yTW9kdWxlQW5kSWRlbnRpZmllcihjb250ZXh0KGtleSksIGlkZW50aWZpZXIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlZmluaXRpb25Gb3JNb2R1bGVBbmRJZGVudGlmaWVyKG1vZHVsZSwgaWRlbnRpZmllcikge1xuICAgIGNvbnN0IGNvbnRyb2xsZXJDb25zdHJ1Y3RvciA9IG1vZHVsZS5kZWZhdWx0O1xuICAgIGlmICh0eXBlb2YgY29udHJvbGxlckNvbnN0cnVjdG9yID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4geyBpZGVudGlmaWVyLCBjb250cm9sbGVyQ29uc3RydWN0b3IgfTtcbiAgICB9XG59XG5mdW5jdGlvbiBpZGVudGlmaWVyRm9yQ29udGV4dEtleShrZXkpIHtcbiAgICBjb25zdCBsb2dpY2FsTmFtZSA9IChrZXkubWF0Y2goL14oPzpcXC5cXC8pPyguKykoPzpbXy1dY29udHJvbGxlclxcLi4rPykkLykgfHwgW10pWzFdO1xuICAgIGlmIChsb2dpY2FsTmFtZSkge1xuICAgICAgICByZXR1cm4gbG9naWNhbE5hbWUucmVwbGFjZSgvXy9nLCBcIi1cIikucmVwbGFjZSgvXFwvL2csIFwiLS1cIik7XG4gICAgfVxufVxuXG5leHBvcnQgeyBkZWZpbml0aW9uRm9yTW9kdWxlQW5kSWRlbnRpZmllciwgZGVmaW5pdGlvbkZvck1vZHVsZVdpdGhDb250ZXh0QW5kS2V5LCBkZWZpbml0aW9uc0Zyb21Db250ZXh0LCBpZGVudGlmaWVyRm9yQ29udGV4dEtleSB9O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cblxuaW1wb3J0IHsgQXBwbGljYXRpb24gfSBmcm9tICdAaG90d2lyZWQvc3RpbXVsdXMnO1xuaW1wb3J0IHsgZGVmaW5pdGlvbnNGcm9tQ29udGV4dCB9IGZyb20gJ0Bob3R3aXJlZC9zdGltdWx1cy13ZWJwYWNrLWhlbHBlcnMnO1xuXG5jb25zdCBpbml0U3RpbXVsdXMgPSAoKSA9PiB7XG4gIGNvbnN0IGFwcGxpY2F0aW9uID0gQXBwbGljYXRpb24uc3RhcnQoKTtcblxuICBjb25zdCBjb250ZXh0ID0gcmVxdWlyZS5jb250ZXh0KFxuICAgICcuL2NvbnRyb2xsZXJzJyxcbiAgICB0cnVlLFxuICAgIC8oPzwhXFwuZGlzYWJsZWQpXFwuanMkL1xuICApO1xuXG4gIGFwcGxpY2F0aW9uLmxvYWQoZGVmaW5pdGlvbnNGcm9tQ29udGV4dChjb250ZXh0KSk7XG59O1xuXG5pbml0U3RpbXVsdXMoKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///678\n')})()})();